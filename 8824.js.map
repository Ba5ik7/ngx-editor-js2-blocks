{"version":3,"file":"8824.js","mappings":"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ACxCO,aAAa,EAAExB,OAAO,CAACwB,aAAa;IACpCN,SAAS,EAAElB,OAAO,CAACkB,SAAS;IAC5BE,QAAQ,EAAEpB,OAAO,CAACoB,QAAQ;IAC1BD,KAAK,EAAEnB,OAAO,CAACmB,KAAK;IACpBE,IAAI,EAAErB,OAAO,CAACqB,IAAI;IAClBC,QAAQ,EAAEtB,OAAO,CAACsB;EACtB,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA,IAqDMzF,UAAU;EAAhB,MAAMA,UAAU,CAAC;IACbsW,OAAO;IACP5P,WAAWA,CAAC4P,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIpS,OAAOA,CAACqS,KAAK,EAAE1R,GAAG,EAAEV,OAAO,GAAG,CAAC,CAAC,EAAE;MAC9B,IAAIyE,GAAG;MACP;MACA,IAAI2N,KAAK,YAAY1W,WAAW,EAAE;QAC9B;QACA;QACA+I,GAAG,GAAG2N,KAAK;MACf,CAAC,MACI;QACD;QACA;QACA;QACA;QACA,IAAIzR,OAAO,GAAGF,SAAS;QACvB,IAAIT,OAAO,CAACW,OAAO,YAAYnF,WAAW,EAAE;UACxCmF,OAAO,GAAGX,OAAO,CAACW,OAAO;QAC7B,CAAC,MACI;UACDA,OAAO,GAAG,IAAInF,WAAW,CAACwE,OAAO,CAACW,OAAO,CAAC;QAC9C;QACA;QACA,IAAIC,MAAM,GAAGH,SAAS;QACtB,IAAI,CAAC,CAACT,OAAO,CAACY,MAAM,EAAE;U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","sources":["./node_modules/@angular/common/fesm2022/http.mjs","./node_modules/@angular/common/fesm2022/xhr.mjs","./node_modules/@angular/common/fesm2022/module.mjs","./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["/**\n * @license Angular v20.1.0\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { HttpHeaders, HttpParams, HttpRequest, HttpEventType, HttpErrorResponse, HttpClient, HTTP_ROOT_INTERCEPTOR_FNS, HttpResponse } from './module.mjs';\nexport { FetchBackend, HTTP_INTERCEPTORS, HttpBackend, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpResponseBase, HttpStatusCode, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, provideHttpClient, withFetch, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ɵHttpInterceptingHandler, HttpInterceptorHandler as ɵHttpInterceptorHandler, REQUESTS_CONTRIBUTE_TO_STABILITY as ɵREQUESTS_CONTRIBUTE_TO_STABILITY } from './module.mjs';\nimport { assertInInjectionContext, inject, Injector, ɵResourceImpl as _ResourceImpl, linkedSignal, computed, signal, ɵencapsulateResourceError as _encapsulateResourceError, ɵRuntimeError as _RuntimeError, InjectionToken, ɵperformanceMarkFeature as _performanceMarkFeature, APP_BOOTSTRAP_LISTENER, ApplicationRef, TransferState, makeStateKey, ɵtruncateMiddle as _truncateMiddle, ɵformatRuntimeError as _formatRuntimeError } from '@angular/core';\nimport { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport './xhr.mjs';\n\n/**\n * `httpResource` makes a reactive HTTP request and exposes the request status and response value as\n * a `WritableResource`. By default, it assumes that the backend will return JSON data. To make a\n * request that expects a different kind of data, you can use a sub-constructor of `httpResource`,\n * such as `httpResource.text`.\n *\n * @experimental 19.2\n * @initializerApiFunction\n */\nconst httpResource = (() => {\n    const jsonFn = makeHttpResourceFn('json');\n    jsonFn.arrayBuffer = makeHttpResourceFn('arraybuffer');\n    jsonFn.blob = makeHttpResourceFn('blob');\n    jsonFn.text = makeHttpResourceFn('text');\n    return jsonFn;\n})();\nfunction makeHttpResourceFn(responseType) {\n    return function httpResource(request, options) {\n        if (ngDevMode && !options?.injector) {\n            assertInInjectionContext(httpResource);\n        }\n        const injector = options?.injector ?? inject(Injector);\n        return new HttpResourceImpl(injector, () => normalizeRequest(request, responseType), options?.defaultValue, options?.parse, options?.equal);\n    };\n}\nfunction normalizeRequest(request, responseType) {\n    let unwrappedRequest = typeof request === 'function' ? request() : request;\n    if (unwrappedRequest === undefined) {\n        return undefined;\n    }\n    else if (typeof unwrappedRequest === 'string') {\n        unwrappedRequest = { url: unwrappedRequest };\n    }\n    const headers = unwrappedRequest.headers instanceof HttpHeaders\n        ? unwrappedRequest.headers\n        : new HttpHeaders(unwrappedRequest.headers);\n    const params = unwrappedRequest.params instanceof HttpParams\n        ? unwrappedRequest.params\n        : new HttpParams({ fromObject: unwrappedRequest.params });\n    return new HttpRequest(unwrappedRequest.method ?? 'GET', unwrappedRequest.url, unwrappedRequest.body ?? null, {\n        headers,\n        params,\n        reportProgress: unwrappedRequest.reportProgress,\n        withCredentials: unwrappedRequest.withCredentials,\n        keepalive: unwrappedRequest.keepalive,\n        cache: unwrappedRequest.cache,\n        priority: unwrappedRequest.priority,\n        mode: unwrappedRequest.mode,\n        redirect: unwrappedRequest.redirect,\n        responseType,\n        context: unwrappedRequest.context,\n        transferCache: unwrappedRequest.transferCache,\n        credentials: unwrappedRequest.credentials,\n        timeout: unwrappedRequest.timeout,\n    });\n}\nclass HttpResourceImpl extends _ResourceImpl {\n    client;\n    _headers = linkedSignal({\n        source: this.extRequest,\n        computation: () => undefined,\n    });\n    _progress = linkedSignal({\n        source: this.extRequest,\n        computation: () => undefined,\n    });\n    _statusCode = linkedSignal({\n        source: this.extRequest,\n        computation: () => undefined,\n    });\n    headers = computed(() => this.status() === 'resolved' || this.status() === 'error' ? this._headers() : undefined, ...(ngDevMode ? [{ debugName: \"headers\" }] : []));\n    progress = this._progress.asReadonly();\n    statusCode = this._statusCode.asReadonly();\n    constructor(injector, request, defaultValue, parse, equal) {\n        super(request, ({ params: request, abortSignal }) => {\n            let sub;\n            // Track the abort listener so it can be removed if the Observable completes (as a memory\n            // optimization).\n            const onAbort = () => sub.unsubscribe();\n            abortSignal.addEventListener('abort', onAbort);\n            // Start off stream as undefined.\n            const stream = signal({ value: undefined }, ...(ngDevMode ? [{ debugName: \"stream\" }] : []));\n            let resolve;\n            const promise = new Promise((r) => (resolve = r));\n            const send = (value) => {\n                stream.set(value);\n                resolve?.(stream);\n                resolve = undefined;\n            };\n            sub = this.client.request(request).subscribe({\n                next: (event) => {\n                    switch (event.type) {\n                        case HttpEventType.Response:\n                            this._headers.set(event.headers);\n                            this._statusCode.set(event.status);\n                            try {\n                                send({ value: parse ? parse(event.body) : event.body });\n                            }\n                            catch (error) {\n                                send({ error: _encapsulateResourceError(error) });\n                            }\n                            break;\n                        case HttpEventType.DownloadProgress:\n                            this._progress.set(event);\n                            break;\n                    }\n                },\n                error: (error) => {\n                    if (error instanceof HttpErrorResponse) {\n                        this._headers.set(error.headers);\n                        this._statusCode.set(error.status);\n                    }\n                    send({ error });\n                    abortSignal.removeEventListener('abort', onAbort);\n                },\n                complete: () => {\n                    if (resolve) {\n                        send({\n                            error: new _RuntimeError(991 /* ɵRuntimeErrorCode.RESOURCE_COMPLETED_BEFORE_PRODUCING_VALUE */, ngDevMode && 'Resource completed before producing a value'),\n                        });\n                    }\n                    abortSignal.removeEventListener('abort', onAbort);\n                },\n            });\n            return promise;\n        }, defaultValue, equal, injector);\n        this.client = injector.get(HttpClient);\n    }\n}\n\n/**\n * If your application uses different HTTP origins to make API calls (via `HttpClient`) on the server and\n * on the client, the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token allows you to establish a mapping\n * between those origins, so that `HttpTransferCache` feature can recognize those requests as the same\n * ones and reuse the data cached on the server during hydration on the client.\n *\n * **Important note**: the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token should *only* be provided in\n * the *server* code of your application (typically in the `app.server.config.ts` script). Angular throws an\n * error if it detects that the token is defined while running on the client.\n *\n * @usageNotes\n *\n * When the same API endpoint is accessed via `http://internal-domain.com:8080` on the server and\n * via `https://external-domain.com` on the client, you can use the following configuration:\n * ```ts\n * // in app.server.config.ts\n * {\n *     provide: HTTP_TRANSFER_CACHE_ORIGIN_MAP,\n *     useValue: {\n *         'http://internal-domain.com:8080': 'https://external-domain.com'\n *     }\n * }\n * ```\n *\n * @publicApi\n */\nconst HTTP_TRANSFER_CACHE_ORIGIN_MAP = new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_CACHE_ORIGIN_MAP' : '');\n/**\n * Keys within cached response data structure.\n */\nconst BODY = 'b';\nconst HEADERS = 'h';\nconst STATUS = 's';\nconst STATUS_TEXT = 'st';\nconst REQ_URL = 'u';\nconst RESPONSE_TYPE = 'rt';\nconst CACHE_OPTIONS = new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_OPTIONS' : '');\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\nfunction transferCacheInterceptorFn(req, next) {\n    const { isCacheActive, ...globalOptions } = inject(CACHE_OPTIONS);\n    const { transferCache: requestOptions, method: requestMethod } = req;\n    // In the following situations we do not want to cache the request\n    if (!isCacheActive ||\n        requestOptions === false ||\n        // POST requests are allowed either globally or at request level\n        (requestMethod === 'POST' && !globalOptions.includePostRequests && !requestOptions) ||\n        (requestMethod !== 'POST' && !ALLOWED_METHODS.includes(requestMethod)) ||\n        // Do not cache request that require authorization when includeRequestsWithAuthHeaders is falsey\n        (!globalOptions.includeRequestsWithAuthHeaders && hasAuthHeaders(req)) ||\n        globalOptions.filter?.(req) === false) {\n        return next(req);\n    }\n    const transferState = inject(TransferState);\n    const originMap = inject(HTTP_TRANSFER_CACHE_ORIGIN_MAP, {\n        optional: true,\n    });\n    if (typeof ngServerMode !== 'undefined' && !ngServerMode && originMap) {\n        throw new _RuntimeError(2803 /* RuntimeErrorCode.HTTP_ORIGIN_MAP_USED_IN_CLIENT */, ngDevMode &&\n            'Angular detected that the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token is configured and ' +\n                'present in the client side code. Please ensure that this token is only provided in the ' +\n                'server code of the application.');\n    }\n    const requestUrl = typeof ngServerMode !== 'undefined' && ngServerMode && originMap\n        ? mapRequestOriginUrl(req.url, originMap)\n        : req.url;\n    const storeKey = makeCacheKey(req, requestUrl);\n    const response = transferState.get(storeKey, null);\n    let headersToInclude = globalOptions.includeHeaders;\n    if (typeof requestOptions === 'object' && requestOptions.includeHeaders) {\n        // Request-specific config takes precedence over the global config.\n        headersToInclude = requestOptions.includeHeaders;\n    }\n    if (response) {\n        const { [BODY]: undecodedBody, [RESPONSE_TYPE]: responseType, [HEADERS]: httpHeaders, [STATUS]: status, [STATUS_TEXT]: statusText, [REQ_URL]: url, } = response;\n        // Request found in cache. Respond using it.\n        let body = undecodedBody;\n        switch (responseType) {\n            case 'arraybuffer':\n                body = new TextEncoder().encode(undecodedBody).buffer;\n                break;\n            case 'blob':\n                body = new Blob([undecodedBody]);\n                break;\n        }\n        // We want to warn users accessing a header provided from the cache\n        // That HttpTransferCache alters the headers\n        // The warning will be logged a single time by HttpHeaders instance\n        let headers = new HttpHeaders(httpHeaders);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            // Append extra logic in dev mode to produce a warning when a header\n            // that was not transferred to the client is accessed in the code via `get`\n            // and `has` calls.\n            headers = appendMissingHeadersDetection(req.url, headers, headersToInclude ?? []);\n        }\n        return of(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url,\n        }));\n    }\n    const event$ = next(req);\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n        // Request not found in cache. Make the request and cache it if on the server.\n        return event$.pipe(tap((event) => {\n            // Only cache successful HTTP responses.\n            if (event instanceof HttpResponse) {\n                transferState.set(storeKey, {\n                    [BODY]: event.body,\n                    [HEADERS]: getFilteredHeaders(event.headers, headersToInclude),\n                    [STATUS]: event.status,\n                    [STATUS_TEXT]: event.statusText,\n                    [REQ_URL]: requestUrl,\n                    [RESPONSE_TYPE]: req.responseType,\n                });\n            }\n        }));\n    }\n    return event$;\n}\n/** @returns true when the requests contains autorization related headers. */\nfunction hasAuthHeaders(req) {\n    return req.headers.has('authorization') || req.headers.has('proxy-authorization');\n}\nfunction getFilteredHeaders(headers, includeHeaders) {\n    if (!includeHeaders) {\n        return {};\n    }\n    const headersMap = {};\n    for (const key of includeHeaders) {\n        const values = headers.getAll(key);\n        if (values !== null) {\n            headersMap[key] = values;\n        }\n    }\n    return headersMap;\n}\nfunction sortAndConcatParams(params) {\n    return [...params.keys()]\n        .sort()\n        .map((k) => `${k}=${params.getAll(k)}`)\n        .join('&');\n}\nfunction makeCacheKey(request, mappedRequestUrl) {\n    // make the params encoded same as a url so it's easy to identify\n    const { params, method, responseType } = request;\n    const encodedParams = sortAndConcatParams(params);\n    let serializedBody = request.serializeBody();\n    if (serializedBody instanceof URLSearchParams) {\n        serializedBody = sortAndConcatParams(serializedBody);\n    }\n    else if (typeof serializedBody !== 'string') {\n        serializedBody = '';\n    }\n    const key = [method, responseType, mappedRequestUrl, serializedBody, encodedParams].join('|');\n    const hash = generateHash(key);\n    return makeStateKey(hash);\n}\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value) {\n    let hash = 0;\n    for (const char of value) {\n        hash = (Math.imul(31, hash) + char.charCodeAt(0)) << 0;\n    }\n    // Force positive number hash.\n    // 2147483647 = equivalent of Integer.MAX_VALUE.\n    hash += 2147483647 + 1;\n    return hash.toString();\n}\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nfunction withHttpTransferCache(cacheOptions) {\n    return [\n        {\n            provide: CACHE_OPTIONS,\n            useFactory: () => {\n                _performanceMarkFeature('NgHttpTransferCache');\n                return { isCacheActive: true, ...cacheOptions };\n            },\n        },\n        {\n            provide: HTTP_ROOT_INTERCEPTOR_FNS,\n            useValue: transferCacheInterceptorFn,\n            multi: true,\n        },\n        {\n            provide: APP_BOOTSTRAP_LISTENER,\n            multi: true,\n            useFactory: () => {\n                const appRef = inject(ApplicationRef);\n                const cacheState = inject(CACHE_OPTIONS);\n                return () => {\n                    appRef.whenStable().then(() => {\n                        cacheState.isCacheActive = false;\n                    });\n                };\n            },\n        },\n    ];\n}\n/**\n * This function will add a proxy to an HttpHeader to intercept calls to get/has\n * and log a warning if the header entry requested has been removed\n */\nfunction appendMissingHeadersDetection(url, headers, headersToInclude) {\n    const warningProduced = new Set();\n    return new Proxy(headers, {\n        get(target, prop) {\n            const value = Reflect.get(target, prop);\n            const methods = new Set(['get', 'has', 'getAll']);\n            if (typeof value !== 'function' || !methods.has(prop)) {\n                return value;\n            }\n            return (headerName) => {\n                // We log when the key has been removed and a warning hasn't been produced for the header\n                const key = (prop + ':' + headerName).toLowerCase(); // e.g. `get:cache-control`\n                if (!headersToInclude.includes(headerName) && !warningProduced.has(key)) {\n                    warningProduced.add(key);\n                    const truncatedUrl = _truncateMiddle(url);\n                    // TODO: create Error guide for this warning\n                    console.warn(_formatRuntimeError(2802 /* RuntimeErrorCode.HEADERS_ALTERED_BY_TRANSFER_CACHE */, `Angular detected that the \\`${headerName}\\` header is accessed, but the value of the header ` +\n                        `was not transferred from the server to the client by the HttpTransferCache. ` +\n                        `To include the value of the \\`${headerName}\\` header for the \\`${truncatedUrl}\\` request, ` +\n                        `use the \\`includeHeaders\\` list. The \\`includeHeaders\\` can be defined either ` +\n                        `on a request level by adding the \\`transferCache\\` parameter, or on an application ` +\n                        `level by adding the \\`httpCacheTransfer.includeHeaders\\` argument to the ` +\n                        `\\`provideClientHydration()\\` call. `));\n                }\n                // invoking the original method\n                return value.apply(target, [headerName]);\n            };\n        },\n    });\n}\nfunction mapRequestOriginUrl(url, originMap) {\n    const origin = new URL(url, 'resolve://').origin;\n    const mappedOrigin = originMap[origin];\n    if (!mappedOrigin) {\n        return url;\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        verifyMappedOrigin(mappedOrigin);\n    }\n    return url.replace(origin, mappedOrigin);\n}\nfunction verifyMappedOrigin(url) {\n    if (new URL(url, 'resolve://').pathname !== '/') {\n        throw new _RuntimeError(2804 /* RuntimeErrorCode.HTTP_ORIGIN_MAP_CONTAINS_PATH */, 'Angular detected a URL with a path segment in the value provided for the ' +\n            `\\`HTTP_TRANSFER_CACHE_ORIGIN_MAP\\` token: ${url}. The map should only contain origins ` +\n            'without any other segments.');\n    }\n}\n\nexport { HTTP_TRANSFER_CACHE_ORIGIN_MAP, HttpClient, HttpErrorResponse, HttpEventType, HttpHeaders, HttpParams, HttpRequest, HttpResponse, httpResource, HTTP_ROOT_INTERCEPTOR_FNS as ɵHTTP_ROOT_INTERCEPTOR_FNS, withHttpTransferCache as ɵwithHttpTransferCache };\n","/**\n * @license Angular v20.1.0\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nfunction parseCookieValue(cookieStr, name) {\n    name = encodeURIComponent(name);\n    for (const cookie of cookieStr.split(';')) {\n        const eqIndex = cookie.indexOf('=');\n        const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n        if (cookieName.trim() === name) {\n            return decodeURIComponent(cookieValue);\n        }\n    }\n    return null;\n}\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nclass XhrFactory {\n}\n\nexport { XhrFactory, parseCookieValue };\n","/**\n * @license Angular v20.1.0\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { ɵRuntimeError as _RuntimeError, Injectable, InjectionToken, inject, NgZone, DestroyRef, ɵformatRuntimeError as _formatRuntimeError, PendingTasks, ɵConsole as _Console, runInInjectionContext, DOCUMENT, Inject, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { concatMap, filter, map, finalize, switchMap } from 'rxjs/operators';\nimport { of, Observable, from } from 'rxjs';\nimport { XhrFactory, parseCookieValue } from './xhr.mjs';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**\n     * Internal map of lowercase header names to values.\n     */\n    headers;\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    normalizedNames = new Map();\n    /**\n     * Complete the lazy initialization of this object (needed before reading).\n     */\n    lazyInit;\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n    lazyUpdate = null;\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach((line) => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const value = line.slice(index + 1).trim();\n                        this.addHeaderEntry(name, value);\n                    }\n                });\n            };\n        }\n        else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n            this.headers = new Map();\n            headers.forEach((value, name) => {\n                this.addHeaderEntry(name, value);\n            });\n        }\n        else {\n            this.lazyInit = () => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    assertValidHeaders(headers);\n                }\n                this.headers = new Map();\n                Object.entries(headers).forEach(([name, values]) => {\n                    this.setHeaderEntries(name, values);\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach((update) => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach((key) => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter((value) => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    addHeaderEntry(name, value) {\n        const key = name.toLowerCase();\n        this.maybeSetNormalizedName(name, key);\n        if (this.headers.has(key)) {\n            this.headers.get(key).push(value);\n        }\n        else {\n            this.headers.set(key, [value]);\n        }\n    }\n    setHeaderEntries(name, values) {\n        const headerValues = (Array.isArray(values) ? values : [values]).map((value) => value.toString());\n        const key = name.toLowerCase();\n        this.headers.set(key, headerValues);\n        this.maybeSetNormalizedName(name, key);\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys()).forEach((key) => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n    for (const [key, value] of Object.entries(headers)) {\n        if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\n                `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n        }\n    }\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1\n                ? [codec.decodeKey(param), '']\n                : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    map;\n    encoder;\n    updates = null;\n    cloneFrom = null;\n    constructor(options = {}) {\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (options.fromString) {\n            if (options.fromObject) {\n                throw new _RuntimeError(2805 /* RuntimeErrorCode.CANNOT_SPECIFY_BOTH_FROM_STRING_AND_FROM_OBJECT */, ngDevMode && 'Cannot specify both fromString and fromObject.');\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach((key) => {\n                const value = options.fromObject[key];\n                // convert the values to strings\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n                this.map.set(key, values);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach((param) => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach((_value) => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return (this.keys()\n            .map((key) => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key)\n                .map((value) => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter((param) => param !== '')\n            .join('&'));\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach((key) => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach((update) => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    defaultValue;\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```ts\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    map = new Map();\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * `Content-Type` is an HTTP header used to indicate the media type\n * (also known as MIME type) of the resource being sent to the client\n * or received from the server.\n */\nconst CONTENT_TYPE_HEADER = 'Content-Type';\n/**\n * The `Accept` header is an HTTP request header that indicates the media types\n * (or content types) the client is willing to receive from the server.\n */\nconst ACCEPT_HEADER = 'Accept';\n/**\n * `X-Request-URL` is a custom HTTP header used in older browser versions,\n * including Firefox (< 32), Chrome (< 37), Safari (< 8), and Internet Explorer,\n * to include the full URL of the request in cross-origin requests.\n */\nconst X_REQUEST_URL_HEADER = 'X-Request-URL';\n/**\n * `text/plain` is a content type used to indicate that the content being\n * sent is plain text with no special formatting or structured data\n * like HTML, XML, or JSON.\n */\nconst TEXT_CONTENT_TYPE = 'text/plain';\n/**\n * `application/json` is a content type used to indicate that the content\n * being sent is in the JSON format.\n */\nconst JSON_CONTENT_TYPE = 'application/json';\n/**\n * `application/json, text/plain, *\\/*` is a content negotiation string often seen in the\n * Accept header of HTTP requests. It indicates the types of content the client is willing\n * to accept from the server, with a preference for `application/json` and `text/plain`,\n * but also accepting any other type (*\\/*).\n */\nconst ACCEPT_HEADER_VALUE = `${JSON_CONTENT_TYPE}, ${TEXT_CONTENT_TYPE}, */*`;\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    url;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n    body = null;\n    /**\n     * Outgoing headers for this request.\n     */\n    headers;\n    /**\n     * Shared and mutable context that can be used by interceptors\n     */\n    context;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     *\n     * Note: The `FetchBackend` doesn't support progress report on uploads.\n     */\n    reportProgress = false;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n    withCredentials = false;\n    /**\n     *  The credentials mode of the request, which determines how cookies and HTTP authentication are handled.\n     *  This can affect whether cookies are sent with the request, and how authentication is handled.\n     */\n    credentials;\n    /**\n     * When using the fetch implementation and set to `true`, the browser will not abort the associated request if the page that initiated it is unloaded before the request is complete.\n     */\n    keepalive = false;\n    /**\n     * Controls how the request will interact with the browser's HTTP cache.\n     * This affects whether a response is retrieved from the cache, how it is stored, or if it bypasses the cache altogether.\n     */\n    cache;\n    /**\n     * Indicates the relative priority of the request. This may be used by the browser to decide the order in which requests are dispatched and resources fetched.\n     */\n    priority;\n    /**\n     * The mode of the request, which determines how the request will interact with the browser's security model.\n     * This can affect things like CORS (Cross-Origin Resource Sharing) and same-origin policies.\n     */\n    mode;\n    /**\n     * The redirect mode of the request, which determines how redirects are handled.\n     * This can affect whether the request follows redirects automatically, or if it fails when a redirect occurs.\n     */\n    redirect;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n    responseType = 'json';\n    /**\n     * The outgoing HTTP request method.\n     */\n    method;\n    /**\n     * Outgoing URL parameters.\n     *\n     * To pass a string representation of HTTP parameters in the URL-query-string format,\n     * the `HttpParamsOptions`' `fromString` may be used. For example:\n     *\n     * ```ts\n     * new HttpParams({fromString: 'angular=awesome'})\n     * ```\n     */\n    params;\n    /**\n     * The outgoing URL with all URL parameters set.\n     */\n    urlWithParams;\n    /**\n     * The HttpTransferCache option for the request\n     */\n    transferCache;\n    /**\n     * The timeout for the backend HTTP request in ms.\n     */\n    timeout;\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = third !== undefined ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            this.keepalive = !!options.keepalive;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (options.headers) {\n                this.headers = options.headers;\n            }\n            if (options.context) {\n                this.context = options.context;\n            }\n            if (options.params) {\n                this.params = options.params;\n            }\n            if (options.priority) {\n                this.priority = options.priority;\n            }\n            if (options.cache) {\n                this.cache = options.cache;\n            }\n            if (options.credentials) {\n                this.credentials = options.credentials;\n            }\n            if (typeof options.timeout === 'number') {\n                // XHR will ignore any value below 1. AbortSignals only accept unsigned integers.\n                if (options.timeout < 1 || !Number.isInteger(options.timeout)) {\n                    // TODO: create a runtime error\n                    throw new Error(ngDevMode ? '`timeout` must be a positive integer value' : '');\n                }\n                this.timeout = options.timeout;\n            }\n            if (options.mode) {\n                this.mode = options.mode;\n            }\n            if (options.redirect) {\n                this.redirect = options.redirect;\n            }\n            // We do want to assign transferCache even if it's falsy (false is valid value)\n            this.transferCache = options.transferCache;\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        this.headers ??= new HttpHeaders();\n        // If no context have been passed in, construct a new HttpContext instance.\n        this.context ??= new HttpContext();\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (typeof this.body === 'string' ||\n            isArrayBuffer(this.body) ||\n            isBlob(this.body) ||\n            isFormData(this.body) ||\n            isUrlSearchParams(this.body)) {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' ||\n            typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return TEXT_CONTENT_TYPE;\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' ||\n            typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return JSON_CONTENT_TYPE;\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        const keepalive = update.keepalive ?? this.keepalive;\n        const priority = update.priority || this.priority;\n        const cache = update.cache || this.cache;\n        const mode = update.mode || this.mode;\n        const redirect = update.redirect || this.redirect;\n        const credentials = update.credentials || this.credentials;\n        // Carefully handle the transferCache to differentiate between\n        // `false` and `undefined` in the update args.\n        const transferCache = update.transferCache ?? this.transferCache;\n        const timeout = update.timeout ?? this.timeout;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = update.body !== undefined ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = update.withCredentials ?? this.withCredentials;\n        const reportProgress = update.reportProgress ?? this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = update.context ?? this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n            transferCache,\n            keepalive,\n            cache,\n            priority,\n            timeout,\n            mode,\n            redirect,\n            credentials,\n        });\n    }\n}\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     *\n     * Note: The `FetchBackend` doesn't support progress report on uploads.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * All response headers.\n     */\n    headers;\n    /**\n     * Response status code.\n     */\n    status;\n    /**\n     * Textual description of response status code, defaults to OK.\n     *\n     * Do not depend on this.\n     */\n    statusText;\n    /**\n     * URL of the resource retrieved, or null if not available.\n     */\n    url;\n    /**\n     * Whether the status code falls in the 2xx range.\n     */\n    ok;\n    /**\n     * Type of the response, narrowed to either the full response or the header.\n     */\n    type;\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n    }\n    type = HttpEventType.ResponseHeader;\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * The response body, or `null` if one was not returned.\n     */\n    body;\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    type = HttpEventType.Response;\n    clone(update = {}) {\n        return new HttpResponse({\n            body: update.body !== undefined ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    name = 'HttpErrorResponse';\n    message;\n    error;\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n    ok = false;\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n/**\n * We use these constant to prevent pulling the whole HttpStatusCode enum\n * Those are the only ones referenced directly by the framework\n */\nconst HTTP_STATUS_CODE_OK = 200;\nconst HTTP_STATUS_CODE_NO_CONTENT = 204;\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nvar HttpStatusCode;\n(function (HttpStatusCode) {\n    HttpStatusCode[HttpStatusCode[\"Continue\"] = 100] = \"Continue\";\n    HttpStatusCode[HttpStatusCode[\"SwitchingProtocols\"] = 101] = \"SwitchingProtocols\";\n    HttpStatusCode[HttpStatusCode[\"Processing\"] = 102] = \"Processing\";\n    HttpStatusCode[HttpStatusCode[\"EarlyHints\"] = 103] = \"EarlyHints\";\n    HttpStatusCode[HttpStatusCode[\"Ok\"] = 200] = \"Ok\";\n    HttpStatusCode[HttpStatusCode[\"Created\"] = 201] = \"Created\";\n    HttpStatusCode[HttpStatusCode[\"Accepted\"] = 202] = \"Accepted\";\n    HttpStatusCode[HttpStatusCode[\"NonAuthoritativeInformation\"] = 203] = \"NonAuthoritativeInformation\";\n    HttpStatusCode[HttpStatusCode[\"NoContent\"] = 204] = \"NoContent\";\n    HttpStatusCode[HttpStatusCode[\"ResetContent\"] = 205] = \"ResetContent\";\n    HttpStatusCode[HttpStatusCode[\"PartialContent\"] = 206] = \"PartialContent\";\n    HttpStatusCode[HttpStatusCode[\"MultiStatus\"] = 207] = \"MultiStatus\";\n    HttpStatusCode[HttpStatusCode[\"AlreadyReported\"] = 208] = \"AlreadyReported\";\n    HttpStatusCode[HttpStatusCode[\"ImUsed\"] = 226] = \"ImUsed\";\n    HttpStatusCode[HttpStatusCode[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpStatusCode[HttpStatusCode[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpStatusCode[HttpStatusCode[\"Found\"] = 302] = \"Found\";\n    HttpStatusCode[HttpStatusCode[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpStatusCode[HttpStatusCode[\"NotModified\"] = 304] = \"NotModified\";\n    HttpStatusCode[HttpStatusCode[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpStatusCode[HttpStatusCode[\"Unused\"] = 306] = \"Unused\";\n    HttpStatusCode[HttpStatusCode[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpStatusCode[HttpStatusCode[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpStatusCode[HttpStatusCode[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpStatusCode[HttpStatusCode[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpStatusCode[HttpStatusCode[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpStatusCode[HttpStatusCode[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpStatusCode[HttpStatusCode[\"NotFound\"] = 404] = \"NotFound\";\n    HttpStatusCode[HttpStatusCode[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpStatusCode[HttpStatusCode[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpStatusCode[HttpStatusCode[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpStatusCode[HttpStatusCode[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpStatusCode[HttpStatusCode[\"Conflict\"] = 409] = \"Conflict\";\n    HttpStatusCode[HttpStatusCode[\"Gone\"] = 410] = \"Gone\";\n    HttpStatusCode[HttpStatusCode[\"LengthRequired\"] = 411] = \"LengthRequired\";\n    HttpStatusCode[HttpStatusCode[\"PreconditionFailed\"] = 412] = \"PreconditionFailed\";\n    HttpStatusCode[HttpStatusCode[\"PayloadTooLarge\"] = 413] = \"PayloadTooLarge\";\n    HttpStatusCode[HttpStatusCode[\"UriTooLong\"] = 414] = \"UriTooLong\";\n    HttpStatusCode[HttpStatusCode[\"UnsupportedMediaType\"] = 415] = \"UnsupportedMediaType\";\n    HttpStatusCode[HttpStatusCode[\"RangeNotSatisfiable\"] = 416] = \"RangeNotSatisfiable\";\n    HttpStatusCode[HttpStatusCode[\"ExpectationFailed\"] = 417] = \"ExpectationFailed\";\n    HttpStatusCode[HttpStatusCode[\"ImATeapot\"] = 418] = \"ImATeapot\";\n    HttpStatusCode[HttpStatusCode[\"MisdirectedRequest\"] = 421] = \"MisdirectedRequest\";\n    HttpStatusCode[HttpStatusCode[\"UnprocessableEntity\"] = 422] = \"UnprocessableEntity\";\n    HttpStatusCode[HttpStatusCode[\"Locked\"] = 423] = \"Locked\";\n    HttpStatusCode[HttpStatusCode[\"FailedDependency\"] = 424] = \"FailedDependency\";\n    HttpStatusCode[HttpStatusCode[\"TooEarly\"] = 425] = \"TooEarly\";\n    HttpStatusCode[HttpStatusCode[\"UpgradeRequired\"] = 426] = \"UpgradeRequired\";\n    HttpStatusCode[HttpStatusCode[\"PreconditionRequired\"] = 428] = \"PreconditionRequired\";\n    HttpStatusCode[HttpStatusCode[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpStatusCode[HttpStatusCode[\"RequestHeaderFieldsTooLarge\"] = 431] = \"RequestHeaderFieldsTooLarge\";\n    HttpStatusCode[HttpStatusCode[\"UnavailableForLegalReasons\"] = 451] = \"UnavailableForLegalReasons\";\n    HttpStatusCode[HttpStatusCode[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpStatusCode[HttpStatusCode[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpStatusCode[HttpStatusCode[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpStatusCode[HttpStatusCode[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpStatusCode[HttpStatusCode[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n    HttpStatusCode[HttpStatusCode[\"HttpVersionNotSupported\"] = 505] = \"HttpVersionNotSupported\";\n    HttpStatusCode[HttpStatusCode[\"VariantAlsoNegotiates\"] = 506] = \"VariantAlsoNegotiates\";\n    HttpStatusCode[HttpStatusCode[\"InsufficientStorage\"] = 507] = \"InsufficientStorage\";\n    HttpStatusCode[HttpStatusCode[\"LoopDetected\"] = 508] = \"LoopDetected\";\n    HttpStatusCode[HttpStatusCode[\"NotExtended\"] = 510] = \"NotExtended\";\n    HttpStatusCode[HttpStatusCode[\"NetworkAuthenticationRequired\"] = 511] = \"NetworkAuthenticationRequired\";\n})(HttpStatusCode || (HttpStatusCode = {}));\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n        transferCache: options.transferCache,\n        keepalive: options.keepalive,\n        priority: options.priority,\n        cache: options.cache,\n        mode: options.mode,\n        redirect: options.redirect,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @usageNotes\n *\n * ### HTTP Request Example\n *\n * ```ts\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```ts\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```ts\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```ts\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    handler;\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n                transferCache: options.transferCache,\n                keepalive: options.keepalive,\n                priority: options.priority,\n                cache: options.cache,\n                mode: options.mode,\n                redirect: options.redirect,\n                credentials: options.credentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = (events$.pipe(filter((event) => event instanceof HttpResponse)));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new _RuntimeError(2806 /* RuntimeErrorCode.RESPONSE_IS_NOT_AN_ARRAY_BUFFER */, ngDevMode && 'Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new _RuntimeError(2807 /* RuntimeErrorCode.RESPONSE_IS_NOT_A_BLOB */, ngDevMode && 'Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new _RuntimeError(2808 /* RuntimeErrorCode.RESPONSE_IS_NOT_A_STRING */, ngDevMode && 'Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new _RuntimeError(2809 /* RuntimeErrorCode.UNHANDLED_OBSERVE_TYPE */, ngDevMode && `Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClient });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: HttpHandler }] });\n\nconst XSSI_PREFIX$1 = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\nfunction getResponseUrl$1(response) {\n    if (response.url) {\n        return response.url;\n    }\n    // stored as lowercase in the map\n    const xRequestUrl = X_REQUEST_URL_HEADER.toLocaleLowerCase();\n    return response.headers.get(xRequestUrl);\n}\n/**\n * An internal injection token to reference `FetchBackend` implementation\n * in a tree-shakable way.\n */\nconst FETCH_BACKEND = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'FETCH_BACKEND' : '');\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n */\nclass FetchBackend {\n    // We use an arrow function to always reference the current global implementation of `fetch`.\n    // This is helpful for cases when the global `fetch` implementation is modified by external code,\n    // see https://github.com/angular/angular/issues/57527.\n    fetchImpl = inject(FetchFactory, { optional: true })?.fetch ?? ((...args) => globalThis.fetch(...args));\n    ngZone = inject(NgZone);\n    destroyRef = inject(DestroyRef);\n    destroyed = false;\n    constructor() {\n        this.destroyRef.onDestroy(() => {\n            this.destroyed = true;\n        });\n    }\n    handle(request) {\n        return new Observable((observer) => {\n            const aborter = new AbortController();\n            this.doRequest(request, aborter.signal, observer).then(noop, (error) => observer.error(new HttpErrorResponse({ error })));\n            let timeoutId;\n            if (request.timeout) {\n                // TODO: Replace with AbortSignal.any([aborter.signal, AbortSignal.timeout(request.timeout)])\n                // when AbortSignal.any support is Baseline widely available (NET nov. 2026)\n                timeoutId = this.ngZone.runOutsideAngular(() => setTimeout(() => {\n                    if (!aborter.signal.aborted) {\n                        aborter.abort(new DOMException('signal timed out', 'TimeoutError'));\n                    }\n                }, request.timeout));\n            }\n            return () => {\n                if (timeoutId !== undefined) {\n                    clearTimeout(timeoutId);\n                }\n                aborter.abort();\n            };\n        });\n    }\n    async doRequest(request, signal, observer) {\n        const init = this.createRequestInit(request);\n        let response;\n        try {\n            // Run fetch outside of Angular zone.\n            // This is due to Node.js fetch implementation (Undici) which uses a number of setTimeouts to check if\n            // the response should eventually timeout which causes extra CD cycles every 500ms\n            const fetchPromise = this.ngZone.runOutsideAngular(() => this.fetchImpl(request.urlWithParams, { signal, ...init }));\n            // Make sure Zone.js doesn't trigger false-positive unhandled promise\n            // error in case the Promise is rejected synchronously. See function\n            // description for additional information.\n            silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n            // Send the `Sent` event before awaiting the response.\n            observer.next({ type: HttpEventType.Sent });\n            response = await fetchPromise;\n        }\n        catch (error) {\n            observer.error(new HttpErrorResponse({\n                error,\n                status: error.status ?? 0,\n                statusText: error.statusText,\n                url: request.urlWithParams,\n                headers: error.headers,\n            }));\n            return;\n        }\n        const headers = new HttpHeaders(response.headers);\n        const statusText = response.statusText;\n        const url = getResponseUrl$1(response) ?? request.urlWithParams;\n        let status = response.status;\n        let body = null;\n        if (request.reportProgress) {\n            observer.next(new HttpHeaderResponse({ headers, status, statusText, url }));\n        }\n        if (response.body) {\n            // Read Progress\n            const contentLength = response.headers.get('content-length');\n            const chunks = [];\n            const reader = response.body.getReader();\n            let receivedLength = 0;\n            let decoder;\n            let partialText;\n            // We have to check whether the Zone is defined in the global scope because this may be called\n            // when the zone is nooped.\n            const reqZone = typeof Zone !== 'undefined' && Zone.current;\n            let canceled = false;\n            // Perform response processing outside of Angular zone to\n            // ensure no excessive change detection runs are executed\n            // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n            await this.ngZone.runOutsideAngular(async () => {\n                while (true) {\n                    // Prevent reading chunks if the app is destroyed. Otherwise, we risk doing\n                    // unnecessary work or triggering side effects after teardown.\n                    // This may happen if the app was explicitly destroyed before\n                    // the response returned entirely.\n                    if (this.destroyed) {\n                        // Streams left in a pending state (due to `break` without cancel) may\n                        // continue consuming or holding onto data behind the scenes.\n                        // Calling `reader.cancel()` allows the browser or the underlying\n                        // system to release any network or memory resources associated with the stream.\n                        await reader.cancel();\n                        canceled = true;\n                        break;\n                    }\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        break;\n                    }\n                    chunks.push(value);\n                    receivedLength += value.length;\n                    if (request.reportProgress) {\n                        partialText =\n                            request.responseType === 'text'\n                                ? (partialText ?? '') +\n                                    (decoder ??= new TextDecoder()).decode(value, { stream: true })\n                                : undefined;\n                        const reportProgress = () => observer.next({\n                            type: HttpEventType.DownloadProgress,\n                            total: contentLength ? +contentLength : undefined,\n                            loaded: receivedLength,\n                            partialText,\n                        });\n                        reqZone ? reqZone.run(reportProgress) : reportProgress();\n                    }\n                }\n            });\n            // We need to manage the canceled state — because the Streams API does not\n            // expose a direct `.state` property on the reader.\n            // We need to `return` because `parseBody` may not be able to parse chunks\n            // that were only partially read (due to cancellation caused by app destruction).\n            if (canceled) {\n                observer.complete();\n                return;\n            }\n            // Combine all chunks.\n            const chunksAll = this.concatChunks(chunks, receivedLength);\n            try {\n                const contentType = response.headers.get(CONTENT_TYPE_HEADER) ?? '';\n                body = this.parseBody(request, chunksAll, contentType);\n            }\n            catch (error) {\n                // Body loading or parsing failed\n                observer.error(new HttpErrorResponse({\n                    error,\n                    headers: new HttpHeaders(response.headers),\n                    status: response.status,\n                    statusText: response.statusText,\n                    url: getResponseUrl$1(response) ?? request.urlWithParams,\n                }));\n                return;\n            }\n        }\n        // Same behavior as the XhrBackend\n        if (status === 0) {\n            status = body ? HTTP_STATUS_CODE_OK : 0;\n        }\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        const ok = status >= 200 && status < 300;\n        if (ok) {\n            observer.next(new HttpResponse({\n                body,\n                headers,\n                status,\n                statusText,\n                url,\n            }));\n            // The full body has been received and delivered, no further events\n            // are possible. This request is complete.\n            observer.complete();\n        }\n        else {\n            observer.error(new HttpErrorResponse({\n                error: body,\n                headers,\n                status,\n                statusText,\n                url,\n            }));\n        }\n    }\n    parseBody(request, binContent, contentType) {\n        switch (request.responseType) {\n            case 'json':\n                // stripping the XSSI when present\n                const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX$1, '');\n                return text === '' ? null : JSON.parse(text);\n            case 'text':\n                return new TextDecoder().decode(binContent);\n            case 'blob':\n                return new Blob([binContent], { type: contentType });\n            case 'arraybuffer':\n                return binContent.buffer;\n        }\n    }\n    createRequestInit(req) {\n        // We could share some of this logic with the XhrBackend\n        const headers = {};\n        let credentials;\n        // If the request has a credentials property, use it.\n        // Otherwise, if the request has withCredentials set to true, use 'include'.\n        credentials = req.credentials;\n        // If withCredentials is true should be set to 'include', for compatibility\n        if (req.withCredentials) {\n            // A warning is logged in development mode if the request has both\n            (typeof ngDevMode === 'undefined' || ngDevMode) && warningOptionsMessage(req);\n            credentials = 'include';\n        }\n        // Setting all the requested headers.\n        req.headers.forEach((name, values) => (headers[name] = values.join(',')));\n        // Add an Accept header if one isn't present already.\n        if (!req.headers.has(ACCEPT_HEADER)) {\n            headers[ACCEPT_HEADER] = ACCEPT_HEADER_VALUE;\n        }\n        // Auto-detect the Content-Type header if one isn't present already.\n        if (!req.headers.has(CONTENT_TYPE_HEADER)) {\n            const detectedType = req.detectContentTypeHeader();\n            // Sometimes Content-Type detection fails.\n            if (detectedType !== null) {\n                headers[CONTENT_TYPE_HEADER] = detectedType;\n            }\n        }\n        return {\n            body: req.serializeBody(),\n            method: req.method,\n            headers,\n            credentials,\n            keepalive: req.keepalive,\n            cache: req.cache,\n            priority: req.priority,\n            mode: req.mode,\n            redirect: req.redirect,\n        };\n    }\n    concatChunks(chunks, totalLength) {\n        const chunksAll = new Uint8Array(totalLength);\n        let position = 0;\n        for (const chunk of chunks) {\n            chunksAll.set(chunk, position);\n            position += chunk.length;\n        }\n        return chunksAll;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: FetchBackend, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: FetchBackend });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: FetchBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [] });\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nclass FetchFactory {\n}\nfunction noop() { }\nfunction warningOptionsMessage(req) {\n    if (req.credentials && req.withCredentials) {\n        console.warn(_formatRuntimeError(2819 /* RuntimeErrorCode.WITH_CREDENTIALS_OVERRIDES_EXPLICIT_CREDENTIALS */, `Angular detected that a \\`HttpClient\\` request has both \\`withCredentials: true\\` and \\`credentials: '${req.credentials}'\\` options. The \\`withCredentials\\` option is overriding the explicit \\`credentials\\` setting to 'include'. Consider removing \\`withCredentials\\` and using \\`credentials: '${req.credentials}'\\` directly for clarity.`));\n    }\n}\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise) {\n    promise.then(noop, noop);\n}\n\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n    return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n    return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n        handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n    });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n    return (initialRequest, finalHandlerFn) => runInInjectionContext(injector, () => interceptorFn(initialRequest, (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn)));\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nconst HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n// TODO(atscott): We need a larger discussion about stability and what should contribute to stability.\n// Should the whole interceptor chain contribute to stability or just the backend request #55075?\n// Should HttpClient contribute to stability automatically at all?\nconst REQUESTS_CONTRIBUTE_TO_STABILITY = new InjectionToken(ngDevMode ? 'REQUESTS_CONTRIBUTE_TO_STABILITY' : '', { providedIn: 'root', factory: () => true });\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n    let chain = null;\n    return (req, handler) => {\n        if (chain === null) {\n            const interceptors = inject(HTTP_INTERCEPTORS, { optional: true }) ?? [];\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n        }\n        const pendingTasks = inject(PendingTasks);\n        const contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n        if (contributeToStability) {\n            const removeTask = pendingTasks.add();\n            return chain(req, handler).pipe(finalize(removeTask));\n        }\n        else {\n            return chain(req, handler);\n        }\n    };\n}\nlet fetchBackendWarningDisplayed = false;\nclass HttpInterceptorHandler extends HttpHandler {\n    backend;\n    injector;\n    chain = null;\n    pendingTasks = inject(PendingTasks);\n    contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n    constructor(backend, injector) {\n        super();\n        this.backend = backend;\n        this.injector = injector;\n        // We strongly recommend using fetch backend for HTTP calls when SSR is used\n        // for an application. The logic below checks if that's the case and produces\n        // a warning otherwise.\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !fetchBackendWarningDisplayed) {\n            // This flag is necessary because provideHttpClientTesting() overrides the backend\n            // even if `withFetch()` is used within the test. When the testing HTTP backend is provided,\n            // no HTTP calls are actually performed during the test, so producing a warning would be\n            // misleading.\n            const isTestingBackend = this.backend.isTestingBackend;\n            if (typeof ngServerMode !== 'undefined' &&\n                ngServerMode &&\n                !(this.backend instanceof FetchBackend) &&\n                !isTestingBackend) {\n                fetchBackendWarningDisplayed = true;\n                injector\n                    .get(_Console)\n                    .warn(_formatRuntimeError(2801 /* RuntimeErrorCode.NOT_USING_FETCH_BACKEND_IN_SSR */, 'Angular detected that `HttpClient` is not configured ' +\n                    \"to use `fetch` APIs. It's strongly recommended to \" +\n                    'enable `fetch` for applications that use Server-Side Rendering ' +\n                    'for better performance and compatibility. ' +\n                    'To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` ' +\n                    'call at the root of the application.'));\n            }\n        }\n    }\n    handle(initialRequest) {\n        if (this.chain === null) {\n            const dedupedInterceptorFns = Array.from(new Set([\n                ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n                ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n            ]));\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n        }\n        if (this.contributeToStability) {\n            const removeTask = this.pendingTasks.add();\n            return this.chain(initialRequest, (downstreamRequest) => this.backend.handle(downstreamRequest)).pipe(finalize(removeTask));\n        }\n        else {\n            return this.chain(initialRequest, (downstreamRequest) => this.backend.handle(downstreamRequest));\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpInterceptorHandler, deps: [{ token: HttpBackend }, { token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpInterceptorHandler });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpInterceptorHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: HttpBackend }, { type: i0.EnvironmentInjector }] });\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    callbackMap;\n    document;\n    /**\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\n     */\n    resolvedPromise = Promise.resolve();\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new _RuntimeError(2810 /* RuntimeErrorCode.JSONP_WRONG_METHOD */, ngDevMode && JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new _RuntimeError(2811 /* RuntimeErrorCode.JSONP_WRONG_RESPONSE_TYPE */, ngDevMode && JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n            throw new _RuntimeError(2812 /* RuntimeErrorCode.JSONP_HEADERS_NOT_SUPPORTED */, ngDevMode && JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // Remove the <script> tag if it's still on the page.\n                node.remove();\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = () => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: HTTP_STATUS_CODE_OK,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        foreignDocument ??= this.document.implementation.createHTMLDocument();\n        foreignDocument.adoptNode(script);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: JsonpClientBackend });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n    if (req.method === 'JSONP') {\n        return inject(JsonpClientBackend).handle(req);\n    }\n    // Fall through for normal HTTP requests.\n    return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    injector;\n    constructor(injector) {\n        this.injector = injector;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param initialRequest The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(initialRequest, next) {\n        return runInInjectionContext(this.injector, () => jsonpInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: JsonpInterceptor });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.EnvironmentInjector }] });\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\nconst X_REQUEST_URL_REGEXP = RegExp(`^${X_REQUEST_URL_HEADER}:`, 'm');\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (X_REQUEST_URL_REGEXP.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader(X_REQUEST_URL_HEADER);\n    }\n    return null;\n}\n/**\n * Validates whether the request is compatible with the XHR backend.\n * Show a warning if the request contains options that are not supported by XHR.\n */\nfunction validateXhrCompatibility(req) {\n    const unsupportedOptions = [\n        {\n            property: 'keepalive',\n            errorCode: 2813 /* RuntimeErrorCode.KEEPALIVE_NOT_SUPPORTED_WITH_XHR */,\n        },\n        {\n            property: 'cache',\n            errorCode: 2814 /* RuntimeErrorCode.CACHE_NOT_SUPPORTED_WITH_XHR */,\n        },\n        {\n            property: 'priority',\n            errorCode: 2815 /* RuntimeErrorCode.PRIORITY_NOT_SUPPORTED_WITH_XHR */,\n        },\n        {\n            property: 'mode',\n            errorCode: 2816 /* RuntimeErrorCode.MODE_NOT_SUPPORTED_WITH_XHR */,\n        },\n        {\n            property: 'redirect',\n            errorCode: 2817 /* RuntimeErrorCode.REDIRECT_NOT_SUPPORTED_WITH_XHR */,\n        },\n        {\n            property: 'credentials',\n            errorCode: 2818 /* RuntimeErrorCode.CREDENTIALS_NOT_SUPPORTED_WITH_XHR */,\n        },\n    ];\n    // Check each unsupported option and warn if present\n    for (const { property, errorCode } of unsupportedOptions) {\n        if (property in req) {\n            console.warn(_formatRuntimeError(errorCode, `Angular detected that a \\`HttpClient\\` request with the \\`${property}\\` option was sent using XHR, which does not support it. To use the \\`${property}\\` option, enable Fetch API support by passing \\`withFetch()\\` as an argument to \\`provideHttpClient()\\`.`));\n        }\n    }\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    xhrFactory;\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new _RuntimeError(-2800 /* RuntimeErrorCode.MISSING_JSONP_MODULE */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n        }\n        // Validate that the request is compatible with the XHR backend.\n        ngDevMode && validateXhrCompatibility(req);\n        // Check whether this factory has a special function to load an XHR implementation\n        // for various non-browser environments. We currently limit it to only `ServerXhr`\n        // class, which needs to load an XHR implementation.\n        const xhrFactory = this.xhrFactory;\n        const source = \n        // Note that `ɵloadImpl` is never defined in client bundles and can be\n        // safely dropped whenever we're running in the browser.\n        // This branching is redundant.\n        // The `ngServerMode` guard also enables tree-shaking of the `from()`\n        // function from the common bundle, as it's only used in server code.\n        typeof ngServerMode !== 'undefined' && ngServerMode && xhrFactory.ɵloadImpl\n            ? from(xhrFactory.ɵloadImpl())\n            : of(null);\n        return source.pipe(switchMap(() => {\n            // Everything happens on Observable subscription.\n            return new Observable((observer) => {\n                // Start by setting up the XHR object with request method, URL, and withCredentials\n                // flag.\n                const xhr = xhrFactory.build();\n                xhr.open(req.method, req.urlWithParams);\n                if (req.withCredentials) {\n                    xhr.withCredentials = true;\n                }\n                // Add all the requested headers.\n                req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n                // Add an Accept header if one isn't present already.\n                if (!req.headers.has(ACCEPT_HEADER)) {\n                    xhr.setRequestHeader(ACCEPT_HEADER, ACCEPT_HEADER_VALUE);\n                }\n                // Auto-detect the Content-Type header if one isn't present already.\n                if (!req.headers.has(CONTENT_TYPE_HEADER)) {\n                    const detectedType = req.detectContentTypeHeader();\n                    // Sometimes Content-Type detection fails.\n                    if (detectedType !== null) {\n                        xhr.setRequestHeader(CONTENT_TYPE_HEADER, detectedType);\n                    }\n                }\n                if (req.timeout) {\n                    xhr.timeout = req.timeout;\n                }\n                // Set the responseType if one was requested.\n                if (req.responseType) {\n                    const responseType = req.responseType.toLowerCase();\n                    // JSON responses need to be processed as text. This is because if the server\n                    // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                    // xhr.response will be null, and xhr.responseText cannot be accessed to\n                    // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                    // is parsed by first requesting text and then applying JSON.parse.\n                    xhr.responseType = (responseType !== 'json' ? responseType : 'text');\n                }\n                // Serialize the request body if one is present. If not, this will be set to null.\n                const reqBody = req.serializeBody();\n                // If progress events are enabled, response headers will be delivered\n                // in two events - the HttpHeaderResponse event and the full HttpResponse\n                // event. However, since response headers don't change in between these\n                // two events, it doesn't make sense to parse them twice. So headerResponse\n                // caches the data extracted from the response whenever it's first parsed,\n                // to ensure parsing isn't duplicated.\n                let headerResponse = null;\n                // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n                // state, and memoizes it into headerResponse.\n                const partialFromXhr = () => {\n                    if (headerResponse !== null) {\n                        return headerResponse;\n                    }\n                    const statusText = xhr.statusText || 'OK';\n                    // Parse headers from XMLHttpRequest - this step is lazy.\n                    const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                    // Read the response URL from the XMLHttpResponse instance and fall back on the\n                    // request URL.\n                    const url = getResponseUrl(xhr) || req.url;\n                    // Construct the HttpHeaderResponse and memoize it.\n                    headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                    return headerResponse;\n                };\n                // Next, a few closures are defined for the various events which XMLHttpRequest can\n                // emit. This allows them to be unregistered as event listeners later.\n                // First up is the load event, which represents a response being fully available.\n                const onLoad = () => {\n                    // Read response state from the memoized partial data.\n                    let { headers, status, statusText, url } = partialFromXhr();\n                    // The body will be read out if present.\n                    let body = null;\n                    if (status !== HTTP_STATUS_CODE_NO_CONTENT) {\n                        // Use XMLHttpRequest.response if set, responseText otherwise.\n                        body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n                    }\n                    // Normalize another potential bug (this one comes from CORS).\n                    if (status === 0) {\n                        status = !!body ? HTTP_STATUS_CODE_OK : 0;\n                    }\n                    // ok determines whether the response will be transmitted on the event or\n                    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                    // but a successful status code can still result in an error if the user\n                    // asked for JSON data and the body cannot be parsed as such.\n                    let ok = status >= 200 && status < 300;\n                    // Check whether the body needs to be parsed as JSON (in many cases the browser\n                    // will have done that already).\n                    if (req.responseType === 'json' && typeof body === 'string') {\n                        // Save the original body, before attempting XSSI prefix stripping.\n                        const originalBody = body;\n                        body = body.replace(XSSI_PREFIX, '');\n                        try {\n                            // Attempt the parse. If it fails, a parse error should be delivered to the\n                            // user.\n                            body = body !== '' ? JSON.parse(body) : null;\n                        }\n                        catch (error) {\n                            // Since the JSON.parse failed, it's reasonable to assume this might not have\n                            // been a JSON response. Restore the original body (including any XSSI prefix)\n                            // to deliver a better error response.\n                            body = originalBody;\n                            // If this was an error request to begin with, leave it as a string, it\n                            // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                            if (ok) {\n                                // Even though the response status was 2xx, this is still an error.\n                                ok = false;\n                                // The parse error contains the text of the body that failed to parse.\n                                body = { error, text: body };\n                            }\n                        }\n                    }\n                    if (ok) {\n                        // A successful response is delivered on the event stream.\n                        observer.next(new HttpResponse({\n                            body,\n                            headers,\n                            status,\n                            statusText,\n                            url: url || undefined,\n                        }));\n                        // The full body has been received and delivered, no further events\n                        // are possible. This request is complete.\n                        observer.complete();\n                    }\n                    else {\n                        // An unsuccessful request is delivered on the error channel.\n                        observer.error(new HttpErrorResponse({\n                            // The error in this case is the response body (error from the server).\n                            error: body,\n                            headers,\n                            status,\n                            statusText,\n                            url: url || undefined,\n                        }));\n                    }\n                };\n                // The onError callback is called when something goes wrong at the network level.\n                // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n                // transmitted on the error channel.\n                const onError = (error) => {\n                    const { url } = partialFromXhr();\n                    const res = new HttpErrorResponse({\n                        error,\n                        status: xhr.status || 0,\n                        statusText: xhr.statusText || 'Unknown Error',\n                        url: url || undefined,\n                    });\n                    observer.error(res);\n                };\n                let onTimeout = onError;\n                if (req.timeout) {\n                    onTimeout = (_) => {\n                        const { url } = partialFromXhr();\n                        const res = new HttpErrorResponse({\n                            error: new DOMException('Request timed out', 'TimeoutError'),\n                            status: xhr.status || 0,\n                            statusText: xhr.statusText || 'Request timeout',\n                            url: url || undefined,\n                        });\n                        observer.error(res);\n                    };\n                }\n                // The sentHeaders flag tracks whether the HttpResponseHeaders event\n                // has been sent on the stream. This is necessary to track if progress\n                // is enabled since the event will be sent on only the first download\n                // progress event.\n                let sentHeaders = false;\n                // The download progress event handler, which is only registered if\n                // progress events are enabled.\n                const onDownProgress = (event) => {\n                    // Send the HttpResponseHeaders event if it hasn't been sent already.\n                    if (!sentHeaders) {\n                        observer.next(partialFromXhr());\n                        sentHeaders = true;\n                    }\n                    // Start building the download progress event to deliver on the response\n                    // event stream.\n                    let progressEvent = {\n                        type: HttpEventType.DownloadProgress,\n                        loaded: event.loaded,\n                    };\n                    // Set the total number of bytes in the event if it's available.\n                    if (event.lengthComputable) {\n                        progressEvent.total = event.total;\n                    }\n                    // If the request was for text content and a partial response is\n                    // available on XMLHttpRequest, include it in the progress event\n                    // to allow for streaming reads.\n                    if (req.responseType === 'text' && !!xhr.responseText) {\n                        progressEvent.partialText = xhr.responseText;\n                    }\n                    // Finally, fire the event.\n                    observer.next(progressEvent);\n                };\n                // The upload progress event handler, which is only registered if\n                // progress events are enabled.\n                const onUpProgress = (event) => {\n                    // Upload progress events are simpler. Begin building the progress\n                    // event.\n                    let progress = {\n                        type: HttpEventType.UploadProgress,\n                        loaded: event.loaded,\n                    };\n                    // If the total number of bytes being uploaded is available, include\n                    // it.\n                    if (event.lengthComputable) {\n                        progress.total = event.total;\n                    }\n                    // Send the event.\n                    observer.next(progress);\n                };\n                // By default, register for load and error events.\n                xhr.addEventListener('load', onLoad);\n                xhr.addEventListener('error', onError);\n                xhr.addEventListener('timeout', onTimeout);\n                xhr.addEventListener('abort', onError);\n                // Progress events are only enabled if requested.\n                if (req.reportProgress) {\n                    // Download progress is always enabled if requested.\n                    xhr.addEventListener('progress', onDownProgress);\n                    // Upload progress depends on whether there is a body to upload.\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.addEventListener('progress', onUpProgress);\n                    }\n                }\n                // Fire the request, and notify the event stream that it was fired.\n                xhr.send(reqBody);\n                observer.next({ type: HttpEventType.Sent });\n                // This is the return from the Observable function, which is the\n                // request cancellation handler.\n                return () => {\n                    // On a cancellation, remove all registered event listeners.\n                    xhr.removeEventListener('error', onError);\n                    xhr.removeEventListener('abort', onError);\n                    xhr.removeEventListener('load', onLoad);\n                    xhr.removeEventListener('timeout', onTimeout);\n                    if (req.reportProgress) {\n                        xhr.removeEventListener('progress', onDownProgress);\n                        if (reqBody !== null && xhr.upload) {\n                            xhr.upload.removeEventListener('progress', onUpProgress);\n                        }\n                    }\n                    // Finally, abort the in-flight request.\n                    if (xhr.readyState !== xhr.DONE) {\n                        xhr.abort();\n                    }\n                };\n            });\n        }));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: XhrFactory }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpXhrBackend });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: XhrFactory }] });\n\nconst XSRF_ENABLED = new InjectionToken(ngDevMode ? 'XSRF_ENABLED' : '');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken(ngDevMode ? 'XSRF_COOKIE_NAME' : '', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken(ngDevMode ? 'XSRF_HEADER_NAME' : '', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    doc;\n    cookieName;\n    lastCookieString = '';\n    lastToken = null;\n    /**\n     * @internal for testing\n     */\n    parseCount = 0;\n    constructor(doc, cookieName) {\n        this.doc = doc;\n        this.cookieName = cookieName;\n    }\n    getToken() {\n        if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = parseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: XSRF_COOKIE_NAME }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpXsrfCookieExtractor });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_COOKIE_NAME]\n                }] }] });\nfunction xsrfInterceptorFn(req, next) {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (!inject(XSRF_ENABLED) ||\n        req.method === 'GET' ||\n        req.method === 'HEAD' ||\n        lcUrl.startsWith('http://') ||\n        lcUrl.startsWith('https://')) {\n        return next(req);\n    }\n    const token = inject(HttpXsrfTokenExtractor).getToken();\n    const headerName = inject(XSRF_HEADER_NAME);\n    // Be careful not to overwrite an existing header of the same name.\n    if (token != null && !req.headers.has(headerName)) {\n        req = req.clone({ headers: req.headers.set(headerName, token) });\n    }\n    return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    injector;\n    constructor(injector) {\n        this.injector = injector;\n    }\n    intercept(initialRequest, next) {\n        return runInInjectionContext(this.injector, () => xsrfInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpXsrfInterceptor });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.EnvironmentInjector }] });\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n    HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n    HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n    HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n    HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n    HttpFeatureKind[HttpFeatureKind[\"Fetch\"] = 6] = \"Fetch\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n    return {\n        ɵkind: kind,\n        ɵproviders: providers,\n    };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * <div class=\"docs-alert docs-alert-helpful\">\n *\n * It's strongly recommended to enable\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for applications that use\n * Server-Side Rendering for better performance and compatibility. To enable `fetch`, add\n * `withFetch()` feature to the `provideHttpClient()` call at the root of the application:\n *\n * ```ts\n * provideHttpClient(withFetch());\n * ```\n *\n * </div>\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nfunction provideHttpClient(...features) {\n    if (ngDevMode) {\n        const featureKinds = new Set(features.map((f) => f.ɵkind));\n        if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n            featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n            throw new Error(ngDevMode\n                ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.`\n                : '');\n        }\n    }\n    const providers = [\n        HttpClient,\n        HttpXhrBackend,\n        HttpInterceptorHandler,\n        { provide: HttpHandler, useExisting: HttpInterceptorHandler },\n        {\n            provide: HttpBackend,\n            useFactory: () => {\n                return inject(FETCH_BACKEND, { optional: true }) ?? inject(HttpXhrBackend);\n            },\n        },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: xsrfInterceptorFn,\n            multi: true,\n        },\n        { provide: XSRF_ENABLED, useValue: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n    ];\n    for (const feature of features) {\n        providers.push(...feature.ɵproviders);\n    }\n    return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n    return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map((interceptorFn) => {\n        return {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: interceptorFn,\n            multi: true,\n        };\n    }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken(ngDevMode ? 'LEGACY_INTERCEPTOR_FN' : '');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nfunction withInterceptorsFromDi() {\n    // Note: the legacy interceptor function is provided here via an intermediate token\n    // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n    // included multiple times, all of the multi-provider entries will have the same instance of the\n    // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n    // interceptors will not run multiple times.\n    return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n        {\n            provide: LEGACY_INTERCEPTOR_FN,\n            useFactory: legacyInterceptorFnFactory,\n        },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useExisting: LEGACY_INTERCEPTOR_FN,\n            multi: true,\n        },\n    ]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withXsrfConfiguration({ cookieName, headerName, }) {\n    const providers = [];\n    if (cookieName !== undefined) {\n        providers.push({ provide: XSRF_COOKIE_NAME, useValue: cookieName });\n    }\n    if (headerName !== undefined) {\n        providers.push({ provide: XSRF_HEADER_NAME, useValue: headerName });\n    }\n    return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withNoXsrfProtection() {\n    return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n        {\n            provide: XSRF_ENABLED,\n            useValue: false,\n        },\n    ]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nfunction withJsonpSupport() {\n    return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @publicApi 19.0\n */\nfunction withRequestsMadeViaParent() {\n    return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n        {\n            provide: HttpBackend,\n            useFactory: () => {\n                const handlerFromParent = inject(HttpHandler, { skipSelf: true, optional: true });\n                if (ngDevMode && handlerFromParent === null) {\n                    throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n                }\n                return handlerFromParent;\n            },\n        },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n */\nfunction withFetch() {\n    return makeHttpFeature(HttpFeatureKind.Fetch, [\n        FetchBackend,\n        { provide: FETCH_BACKEND, useExisting: FetchBackend },\n        { provide: HttpBackend, useExisting: FetchBackend },\n    ]);\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n * @deprecated Use withXsrfConfiguration({cookieName: 'XSRF-TOKEN', headerName: 'X-XSRF-TOKEN'}) as\n *     providers instead or `withNoXsrfProtection` if you want to disabled XSRF protection.\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [withNoXsrfProtection().ɵproviders],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: withXsrfConfiguration(options).ɵproviders,\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClientXsrfModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n            HttpXsrfInterceptor,\n            { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n            { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n            withXsrfConfiguration({\n                cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                headerName: XSRF_DEFAULT_HEADER_NAME,\n            }).ɵproviders,\n            { provide: XSRF_ENABLED, useValue: true },\n        ] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        withXsrfConfiguration({\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\n                        }).ɵproviders,\n                        { provide: XSRF_ENABLED, useValue: true },\n                    ],\n                }]\n        }] });\n/**\n * Configures the dependency injector for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in DI token `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n * @deprecated use `provideHttpClient(withInterceptorsFromDi())` as providers instead\n */\nclass HttpClientModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClientModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClientModule, providers: [provideHttpClient(withInterceptorsFromDi())] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Configures the dependency injector where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [provideHttpClient(withInterceptorsFromDi())],\n                }]\n        }] });\n/**\n * Configures the dependency injector for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n * @deprecated `withJsonpSupport()` as providers instead\n */\nclass HttpClientJsonpModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClientJsonpModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClientJsonpModule, providers: [withJsonpSupport().ɵproviders] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [withJsonpSupport().ɵproviders],\n                }]\n        }] });\n\nexport { FetchBackend, HTTP_INTERCEPTORS, HTTP_ROOT_INTERCEPTOR_FNS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpInterceptorHandler, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpStatusCode, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, REQUESTS_CONTRIBUTE_TO_STABILITY, provideHttpClient, withFetch, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration };\n","function asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\nexport { _asyncToGenerator as default };"],"names":["HttpHeaders","HttpParams","HttpRequest","HttpEventType","HttpErrorResponse","HttpClient","HTTP_ROOT_INTERCEPTOR_FNS","HttpResponse","FetchBackend","HTTP_INTERCEPTORS","HttpBackend","HttpClientJsonpModule","HttpClientModule","HttpClientXsrfModule","HttpContext","HttpContextToken","HttpFeatureKind","HttpHandler","HttpHeaderResponse","HttpResponseBase","HttpStatusCode","HttpUrlEncodingCodec","HttpXhrBackend","HttpXsrfTokenExtractor","JsonpClientBackend","JsonpInterceptor","provideHttpClient","withFetch","withInterceptors","withInterceptorsFromDi","withJsonpSupport","withNoXsrfProtection","withRequestsMadeViaParent","withXsrfConfiguration","HttpInterceptorHandler","ɵHttpInterceptingHandler","ɵHttpInterceptorHandler","REQUESTS_CONTRIBUTE_TO_STABILITY","ɵREQUESTS_CONTRIBUTE_TO_STABILITY","assertInInjectionContext","inject","Injector","ɵResourceImpl","_ResourceImpl","linkedSignal","computed","signal","ɵencapsulateResourceError","_encapsulateResourceError","ɵRuntimeError","_RuntimeError","InjectionToken","ɵperformanceMarkFeature","_performanceMarkFeature","APP_BOOTSTRAP_LISTENER","ApplicationRef","TransferState","makeStateKey","ɵtruncateMiddle","_truncateMiddle","ɵformatRuntimeError","_formatRuntimeError","of","tap","httpResource","jsonFn","makeHttpResourceFn","arrayBuffer","blob","text","responseType","request","options","ngDevMode","injector","HttpResourceImpl","normalizeRequest","defaultValue","parse","equal","unwrappedRequest","undefined","url","headers","params","fromObject","method","body","reportProgress","withCredentials","keepalive","cache","priority","mode","redirect","context","transferCache","credentials","timeout","client","_headers","source","extRequest","computation","_progress","_statusCode","status","debugName","progress","asReadonly","statusCode","constructor","abortSignal","sub","onAbort","unsubscribe","addEventListener","stream","value","resolve","promise","Promise","r","send","set","subscribe","next","event","type","Response","error","DownloadProgress","removeEventListener","complete","get","HTTP_TRANSFER_CACHE_ORIGIN_MAP","BODY","HEADERS","STATUS","STATUS_TEXT","REQ_URL","RESPONSE_TYPE","CACHE_OPTIONS","ALLOWED_METHODS","transferCacheInterceptorFn","req","isCacheActive","globalOptions","requestOptions","requestMethod","includePostRequests","includes","includeRequestsWithAuthHeaders","hasAuthHeaders","filter","transferState","originMap","optional","ngServerMode","requestUrl","mapRequestOriginUrl","storeKey","makeCacheKey","response","headersToInclude","includeHeaders","undecodedBody","httpHeaders","statusText","TextEncoder","encode","buffer","Blob","appendMissingHeadersDetection","event$","pipe","getFilteredHeaders","has","headersMap","key","values","getAll","sortAndConcatParams","keys","sort","map","k","join","mappedRequestUrl","encodedParams","serializedBody","serializeBody","URLSearchParams","hash","generateHash","char","Math","imul","charCodeAt","toString","withHttpTransferCache","cacheOptions","provide","useFactory","useValue","multi","appRef","cacheState","whenStable","then","warningProduced","Set","Proxy","target","prop","Reflect","methods","headerName","toLowerCase","add","truncatedUrl","console","warn","apply","origin","URL","mappedOrigin","verifyMappedOrigin","replace","pathname","ɵHTTP_ROOT_INTERCEPTOR_FNS","ɵwithHttpTransferCache","parseCookieValue","cookieStr","name","encodeURIComponent","cookie","split","eqIndex","indexOf","cookieName","cookieValue","slice","trim","decodeURIComponent","XhrFactory","i0","Injectable","NgZone","DestroyRef","PendingTasks","ɵConsole","_Console","runInInjectionContext","DOCUMENT","Inject","makeEnvironmentProviders","NgModule","concatMap","finalize","switchMap","Observable","from","normalizedNames","Map","lazyInit","lazyUpdate","forEach","line","index","addHeaderEntry","Headers","assertValidHeaders","Object","entries","setHeaderEntries","init","length","Array","append","clone","op","delete","maybeSetNormalizedName","lcName","copyFrom","update","applyUpdate","other","concat","base","push","toDelete","existing","headerValues","isArray","fn","Error","encodeKey","standardEncoding","encodeValue","decodeKey","decodeValue","paramParser","rawParams","codec","param","eqIdx","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","s","t","valueToString","encoder","updates","cloneFrom","fromString","res","appendAll","_value","eKey","idx","splice","token","mightHaveBody","isArrayBuffer","ArrayBuffer","isBlob","isFormData","FormData","isUrlSearchParams","CONTENT_TYPE_HEADER","ACCEPT_HEADER","X_REQUEST_URL_HEADER","TEXT_CONTENT_TYPE","JSON_CONTENT_TYPE","ACCEPT_HEADER_VALUE","urlWithParams","third","fourth","toUpperCase","Number","isInteger","qIdx","sep","JSON","stringify","detectContentTypeHeader","setHeaders","reduce","setParams","ok","defaultStatus","defaultStatusText","ResponseHeader","message","HTTP_STATUS_CODE_OK","HTTP_STATUS_CODE_NO_CONTENT","addBody","observe","handler","first","events$","handle","res$","head","jsonp","callbackParam","patch","post","put","ɵfac","HttpClient_Factory","__ngFactoryType__","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","XSSI_PREFIX$1","getResponseUrl$1","xRequestUrl","toLocaleLowerCase","FETCH_BACKEND","fetchImpl","FetchFactory","fetch","args","globalThis","ngZone","destroyRef","destroyed","onDestroy","observer","aborter","AbortController","doRequest","noop","timeoutId","runOutsideAngular","setTimeout","aborted","abort","DOMException","clearTimeout","_this","_asyncToGenerator","createRequestInit","fetchPromise","silenceSuperfluousUnhandledPromiseRejection","Sent","contentLength","chunks","reader","getReader","receivedLength","decoder","partialText","reqZone","Zone","current","canceled","cancel","done","read","TextDecoder","decode","total","loaded","run","chunksAll","concatChunks","contentType","parseBody","binContent","warningOptionsMessage","detectedType","totalLength","Uint8Array","position","chunk","FetchBackend_Factory","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","chainedInterceptorFn","interceptorFn","HTTP_INTERCEPTOR_FNS","providedIn","legacyInterceptorFnFactory","chain","interceptors","reduceRight","pendingTasks","contributeToStability","removeTask","fetchBackendWarningDisplayed","backend","isTestingBackend","dedupedInterceptorFns","nextSequencedFn","HttpInterceptorHandler_Factory","EnvironmentInjector","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","jsonpCallbackContext","window","callbackMap","document","resolvedPromise","nextCallback","callback","node","createElement","src","finished","data","cleanup","onLoad","onError","remove","appendChild","removeListeners","script","implementation","createHTMLDocument","adoptNode","JsonpClientBackend_Factory","jsonpInterceptorFn","JsonpInterceptor_Factory","XSSI_PREFIX","X_REQUEST_URL_REGEXP","RegExp","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","validateXhrCompatibility","unsupportedOptions","property","errorCode","xhrFactory","ɵloadImpl","build","open","setRequestHeader","reqBody","headerResponse","partialFromXhr","responseText","originalBody","onTimeout","_","sentHeaders","onDownProgress","progressEvent","lengthComputable","onUpProgress","UploadProgress","upload","readyState","DONE","HttpXhrBackend_Factory","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfCookieExtractor","doc","lastCookieString","lastToken","parseCount","getToken","cookieString","HttpXsrfCookieExtractor_Factory","xsrfInterceptorFn","lcUrl","startsWith","HttpXsrfInterceptor","HttpXsrfInterceptor_Factory","makeHttpFeature","kind","providers","ɵkind","ɵproviders","features","featureKinds","f","NoXsrfProtection","CustomXsrfConfiguration","useExisting","useClass","feature","interceptorFns","Interceptors","LEGACY_INTERCEPTOR_FN","LegacyInterceptors","JsonpSupport","RequestsMadeViaParent","handlerFromParent","skipSelf","Fetch","disable","ngModule","withOptions","HttpClientXsrfModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","HttpClientModule_Factory","HttpClientJsonpModule_Factory"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3]}