{"version":3,"file":"854.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2022/drag-drop.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { signal, Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, Injectable, RendererFactory2, InjectionToken, ElementRef, booleanAttribute, Directive, Input, ViewContainerRef, ChangeDetectorRef, EventEmitter, Injector, afterNextRender, numberAttribute, Output, TemplateRef, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader, _IdGenerator } from '@angular/cdk/a11y';\nimport { coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    _document;\n    /** Cached positions of the scrollable parent elements. */\n    positions = new Map();\n    constructor(_document) {\n        this._document = _document;\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    _document;\n    _rootElement;\n    _direction;\n    _initialDomRect;\n    _previewTemplate;\n    _previewClass;\n    _pickupPositionOnPage;\n    _initialTransform;\n    _zIndex;\n    _renderer;\n    /** Reference to the view of the preview element. */\n    _previewEmbeddedView;\n    /** Reference to the preview element. */\n    _preview;\n    get element() {\n        return this._preview;\n    }\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex, _renderer) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n        this._renderer = _renderer;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if (supportsPopover(this._preview)) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        return this._renderer.listen(this._preview, name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n            // value for `margin-right` needs to be `auto` when opened as a popover, because our\n            // positioning is always top/left based, but native popover seems to position itself\n            // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n            // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n            'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element) {\n    return 'showPopover' in element;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    _config;\n    _document;\n    _ngZone;\n    _viewportRuler;\n    _dragDropRegistry;\n    _renderer;\n    /** Element displayed next to the user's pointer while the element is dragged. */\n    _preview;\n    /** Container into which to insert the preview. */\n    _previewContainer;\n    /** Reference to the view of the placeholder element. */\n    _placeholderRef;\n    /** Element that is rendered instead of the draggable item while it is being sorted. */\n    _placeholder;\n    /** Coordinates within the element at which the user picked up the element. */\n    _pickupPositionInElement;\n    /** Coordinates on the page at which the user picked up the element. */\n    _pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     */\n    _anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n    _passiveTransform = { x: 0, y: 0 };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n    _activeTransform = { x: 0, y: 0 };\n    /** Inline `transform` value that the element had before the first dragging sequence. */\n    _initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n    _hasStartedDragging = signal(false);\n    /** Whether the element has moved since the user started dragging it. */\n    _hasMoved;\n    /** Drop container in which the DragRef resided when dragging began. */\n    _initialContainer;\n    /** Index at which the item started in its initial container. */\n    _initialIndex;\n    /** Cached positions of scrollable parent elements. */\n    _parentPositions;\n    /** Emits when the item is being moved. */\n    _moveEvents = new Subject();\n    /** Keeps track of the direction in which the user is dragging along each axis. */\n    _pointerDirectionDelta;\n    /** Pointer position at which the last change in the delta occurred. */\n    _pointerPositionAtLastDirectionChange;\n    /** Position of the pointer at the last pointer event. */\n    _lastKnownPointerPosition;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     */\n    _rootElement;\n    /**\n     * Nearest ancestor SVG, relative to which coordinates are calculated if dragging SVGElement\n     */\n    _ownerSVGElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     */\n    _rootElementTapHighlight;\n    /** Subscription to pointer movement events. */\n    _pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n    _pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n    _scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n    _resizeSubscription = Subscription.EMPTY;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     */\n    _lastTouchEventTime;\n    /** Time at which the last dragging sequence was started. */\n    _dragStartTime;\n    /** Cached reference to the boundary element. */\n    _boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n    _nativeInteractionsEnabled = true;\n    /** Client rect of the root element when the dragging sequence has started. */\n    _initialDomRect;\n    /** Cached dimensions of the preview element. Should be read via `_getPreviewRect`. */\n    _previewRect;\n    /** Cached dimensions of the boundary element. */\n    _boundaryRect;\n    /** Element that will be used as a template to create the draggable item's preview. */\n    _previewTemplate;\n    /** Template for placeholder element rendered to show where a draggable would be dropped. */\n    _placeholderTemplate;\n    /** Elements that can be used to drag the draggable item. */\n    _handles = [];\n    /** Registered handles that are currently disabled. */\n    _disabledHandles = new Set();\n    /** Droppable container that the draggable is a part of. */\n    _dropContainer;\n    /** Layout direction of the item. */\n    _direction = 'ltr';\n    /** Ref that the current drag item is nested in. */\n    _parentDragRef;\n    /**\n     * Cached shadow root that the element is placed in. `null` means that the element isn't in\n     * the shadow DOM and `undefined` means that it hasn't been resolved yet. Should be read via\n     * `_getShadowRoot`, not directly.\n     */\n    _cachedShadowRoot;\n    /** Axis along which dragging is locked. */\n    lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay = 0;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    _disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n    beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n    started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = this._moveEvents;\n    /** Arbitrary data that can be attached to the drag item. */\n    data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry, _renderer) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        this._renderer = _renderer;\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._getShadowRoot()?.removeEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /** Handler for the `mousedown`/`touchstart` events. */\n    _pointerDown = (event) => {\n        this.beforeStarted.next();\n        // Delegate the event based on whether it started from a handle or the element itself.\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                this._initializeDragSequence(targetHandle, event);\n            }\n        }\n        else if (!this.disabled) {\n            this._initializeDragSequence(this._rootElement, event);\n        }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n    _pointerMove = (event) => {\n        const pointerPosition = this._getPointerPositionOnPage(event);\n        if (!this._hasStartedDragging()) {\n            const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n            const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n            const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n            // Only start dragging after the user has moved more than the minimum distance in either\n            // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n            // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n            // per pixel of movement (e.g. if the user moves their pointer quickly).\n            if (isOverThreshold) {\n                const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                const container = this._dropContainer;\n                if (!isDelayElapsed) {\n                    this._endDragSequence(event);\n                    return;\n                }\n                // Prevent other drag sequences from starting while something in the container is still\n                // being dragged. This can happen while we're waiting for the drop animation to finish\n                // and can cause errors, because some elements might still be moving around.\n                if (!container || (!container.isDragging() && !container.isReceiving())) {\n                    // Prevent the default action as soon as the dragging sequence is considered as\n                    // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                    if (event.cancelable) {\n                        event.preventDefault();\n                    }\n                    this._hasStartedDragging.set(true);\n                    this._ngZone.run(() => this._startDragSequence(event));\n                }\n            }\n            return;\n        }\n        // We prevent the default action down here so that we know that dragging has started. This is\n        // important for touch devices where doing this too early can unnecessarily block scrolling,\n        // if there's a dragging delay.\n        if (event.cancelable) {\n            event.preventDefault();\n        }\n        const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n        this._hasMoved = true;\n        this._lastKnownPointerPosition = pointerPosition;\n        this._updatePointerDirectionDelta(constrainedPointerPosition);\n        if (this._dropContainer) {\n            this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n        }\n        else {\n            // If there's a position constraint function, we want the element's top/left to be at the\n            // specific position on the page. Use the initial position as a reference if that's the case.\n            const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n            const activeTransform = this._activeTransform;\n            activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n            activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n            this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n        }\n        // Since this event gets fired for every pixel while dragging, we only\n        // want to fire it if the consumer opted into it. Also we have to\n        // re-enter the zone because we run all of the events on the outside.\n        if (this._moveEvents.observers.length) {\n            this._ngZone.run(() => {\n                this._moveEvents.next({\n                    source: this,\n                    pointerPosition: constrainedPointerPosition,\n                    event,\n                    distance: this._getDragDistance(constrainedPointerPosition),\n                    delta: this._pointerDirectionDelta,\n                });\n            });\n        }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n    _pointerUp = (event) => {\n        this._endDragSequence(event);\n    };\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging()) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                shadowRoot.addEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor =\n                this._anchor ||\n                    this._document.createComment(typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-anchor' : ''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000, this._renderer);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasMoved = false;\n        this._hasStartedDragging.set(this._hasMoved);\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = (event) => {\n                    if (!event ||\n                        (this._preview &&\n                            _getEventTarget(event) === this._preview.element &&\n                            event.propertyName === 'transform')) {\n                        cleanupListener();\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                };\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                const cleanupListener = this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const scale = 1 / this.scale;\n        const transform = getTransform(x * scale, y * scale);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Handles a native `dragstart` event. */\n    _nativeDragStart = (event) => {\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                event.preventDefault();\n            }\n        }\n        else if (!this.disabled) {\n            // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n            // but some cases like dragging of links can slip through (see #24403).\n            event.preventDefault();\n        }\n    };\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Cache of the dimensions of all the items inside the container. */\n    _itemPositions = [];\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeDraggables;\n    /** Direction in which the list is oriented. */\n    orientation = 'vertical';\n    /** Layout direction of the drop list. */\n    direction;\n    constructor(_dragDropRegistry) {\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        delta: 0,\n        overlaps: false,\n    };\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${transformAmount}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${transformAmount}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this._element.appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables?.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        this._element = container;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nclass MixedSortStrategy {\n    _document;\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Lazily-resolved root node containing the list. Use `_getRootNode` to read this. */\n    _rootNode;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeItems;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        deltaX: 0,\n        deltaY: 0,\n        overlaps: false,\n    };\n    /**\n     * Keeps track of the relationship between a node and its next sibling. This information\n     * is used to restore the DOM to the order it was in before dragging started.\n     */\n    _relatedNodes = [];\n    constructor(_document, _dragDropRegistry) {\n        this._document = _document;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        const childNodes = this._element.childNodes;\n        this._relatedNodes = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const node = childNodes[i];\n            this._relatedNodes.push([node, node.nextSibling]);\n        }\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        const previousSwap = this._previousSwap;\n        if (newIndex === -1 || this._activeItems[newIndex] === item) {\n            return null;\n        }\n        const toSwapWith = this._activeItems[newIndex];\n        // Prevent too many swaps over the same item.\n        if (previousSwap.drag === toSwapWith &&\n            previousSwap.overlaps &&\n            previousSwap.deltaX === pointerDelta.x &&\n            previousSwap.deltaY === pointerDelta.y) {\n            return null;\n        }\n        const previousIndex = this.getItemIndex(item);\n        const current = item.getPlaceholderElement();\n        const overlapElement = toSwapWith.getRootElement();\n        if (newIndex > previousIndex) {\n            overlapElement.after(current);\n        }\n        else {\n            overlapElement.before(current);\n        }\n        moveItemInArray(this._activeItems, previousIndex, newIndex);\n        const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n        // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n        // break this functionality, because the same object is passed for all `sort` calls.\n        previousSwap.deltaX = pointerDelta.x;\n        previousSwap.deltaY = pointerDelta.y;\n        previousSwap.drag = toSwapWith;\n        previousSwap.overlaps =\n            overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n        return {\n            previousIndex,\n            currentIndex: newIndex,\n        };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        let enterIndex = index == null || index < 0\n            ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        // In some cases (e.g. when the container has padding) we might not be able to figure\n        // out which item to insert the dragged item next to, because the pointer didn't overlap\n        // with anything. In that case we find the item that's closest to the pointer.\n        if (enterIndex === -1) {\n            enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n        }\n        const targetItem = this._activeItems[enterIndex];\n        const currentIndex = this._activeItems.indexOf(item);\n        if (currentIndex > -1) {\n            this._activeItems.splice(currentIndex, 1);\n        }\n        if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n            this._activeItems.splice(enterIndex, 0, item);\n            targetItem.getRootElement().before(item.getPlaceholderElement());\n        }\n        else {\n            this._activeItems.push(item);\n            this._element.appendChild(item.getPlaceholderElement());\n        }\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeItems = items.slice();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        const root = this._element;\n        const previousSwap = this._previousSwap;\n        // Moving elements around in the DOM can break things like the `@for` loop, because it\n        // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n        // the DOM nodes in the list to their original order when the list is reset.\n        // Note that this could be simpler if we just saved all the nodes, cleared the root\n        // and then appended them in the original order. We don't do it, because it can break\n        // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n        // placeholder element which is removed after dragging.\n        for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n            const [node, nextSibling] = this._relatedNodes[i];\n            if (node.parentNode === root && node.nextSibling !== nextSibling) {\n                if (nextSibling === null) {\n                    root.appendChild(node);\n                }\n                else if (nextSibling.parentNode === root) {\n                    root.insertBefore(node, nextSibling);\n                }\n            }\n        }\n        this._relatedNodes = [];\n        this._activeItems = [];\n        previousSwap.drag = null;\n        previousSwap.deltaX = previousSwap.deltaY = 0;\n        previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeItems;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        return this._activeItems.indexOf(item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll() {\n        this._activeItems.forEach(item => {\n            if (this._dragDropRegistry.isDragging(item)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                item._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        if (container !== this._element) {\n            this._element = container;\n            this._rootNode = undefined;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY) {\n        const elementAtPoint = this._getRootNode().elementFromPoint(Math.floor(pointerX), Math.floor(pointerY));\n        const index = elementAtPoint\n            ? this._activeItems.findIndex(item => {\n                const root = item.getRootElement();\n                return elementAtPoint === root || root.contains(elementAtPoint);\n            })\n            : -1;\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n    /** Lazily resolves the list's root node. */\n    _getRootNode() {\n        // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n        if (!this._rootNode) {\n            this._rootNode = _getShadowRoot(this._element) || this._document;\n        }\n        return this._rootNode;\n    }\n    /**\n     * Finds the index of the item that's closest to the item being dragged.\n     * @param item Item being dragged.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _getClosestItemIndexToPointer(item, pointerX, pointerY) {\n        if (this._activeItems.length === 0) {\n            return -1;\n        }\n        if (this._activeItems.length === 1) {\n            return 0;\n        }\n        let minDistance = Infinity;\n        let minIndex = -1;\n        // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n        // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n        // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n        // for our purposes.\n        for (let i = 0; i < this._activeItems.length; i++) {\n            const current = this._activeItems[i];\n            if (current !== item) {\n                const { x, y } = current.getRootElement().getBoundingClientRect();\n                const distance = Math.hypot(pointerX - x, pointerY - y);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minIndex = i;\n                }\n            }\n        }\n        return minIndex;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    _dragDropRegistry;\n    _ngZone;\n    _viewportRuler;\n    /** Element that the drop list is attached to. */\n    element;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    disabled = false;\n    /** Whether sorting items within the list is disabled. */\n    sortingDisabled = false;\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n    autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Function that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n    beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n    dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new Subject();\n    /** Emits when a dragging sequence is started in a list connected to the current one. */\n    receivingStarted = new Subject();\n    /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n    receivingStopped = new Subject();\n    /** Arbitrary data that can be attached to the drop list. */\n    data;\n    /** Element that is the direct parent of the drag items. */\n    _container;\n    /** Whether an item in the list is being dragged. */\n    _isDragging = false;\n    /** Keeps track of the positions of any parent scrollable elements. */\n    _parentPositions;\n    /** Strategy being used to sort items within the list. */\n    _sortStrategy;\n    /** Cached `DOMRect` of the drop list. */\n    _domRect;\n    /** Draggable items in the container. */\n    _draggables = [];\n    /** Drop lists that are connected to the current one. */\n    _siblings = [];\n    /** Connected siblings that currently have a dragged item. */\n    _activeSiblings = new Set();\n    /** Subscription to the window being scrolled. */\n    _viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n    _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    /** Horizontal direction in which the list is currently scrolling. */\n    _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    /** Node that is being auto-scrolled. */\n    _scrollNode;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n    _stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n    _cachedShadowRoot = null;\n    /** Reference to the document. */\n    _document;\n    /** Elements that can be scrolled while the user is dragging. */\n    _scrollableElements = [];\n    /** Initial value for the element's `scroll-snap-type` style. */\n    _initialScrollSnap;\n    /** Direction of the list's layout. */\n    _direction = 'ltr';\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        const coercedElement = (this.element = coerceElement(element));\n        this._document = _document;\n        this.withOrientation('vertical').withElementContainer(coercedElement);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n            this._sortStrategy.direction = direction;\n        }\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        if (orientation === 'mixed') {\n            this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n        }\n        else {\n            const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n            strategy.direction = this._direction;\n            strategy.orientation = orientation;\n            this._sortStrategy = strategy;\n        }\n        this._sortStrategy.withElementContainer(this._container);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = this._container;\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /**\n     * Configures the drop list so that a different element is used as the container for the\n     * dragged items. This is useful for the cases when one might not have control over the\n     * full DOM that sets up the dragging.\n     * Note that the alternate container needs to be a descendant of the drop list.\n     * @param container New element container to be assigned.\n     */\n    withElementContainer(container) {\n        if (container === this._container) {\n            return this;\n        }\n        const element = coerceElement(this.element);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            container !== element &&\n            !element.contains(container)) {\n            throw new Error('Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.');\n        }\n        const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n        const newContainerIndex = this._scrollableElements.indexOf(container);\n        if (oldContainerIndex > -1) {\n            this._scrollableElements.splice(oldContainerIndex, 1);\n        }\n        if (newContainerIndex > -1) {\n            this._scrollableElements.splice(newContainerIndex, 1);\n        }\n        if (this._sortStrategy) {\n            this._sortStrategy.withElementContainer(container);\n        }\n        this._cachedShadowRoot = null;\n        this._scrollableElements.unshift(container);\n        this._container = container;\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = this._container.style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // Prevent the check from running on apps not using an alternate container. Ideally we\n            // would always run it, but introducing it at this stage would be a breaking change.\n            this._container !== coerceElement(this.element)) {\n            for (const drag of this._draggables) {\n                if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n                    throw new Error('Invalid DOM structure for drop list. All items must be placed directly inside of the element container.');\n                }\n            }\n        }\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(this._container).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = this._container.style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /** Starts the interval that'll auto-scroll the element. */\n    _startScrollInterval = () => {\n        this._stopScrolling();\n        interval(0, animationFrameScheduler)\n            .pipe(takeUntil(this._stopScrollTimers))\n            .subscribe(() => {\n            const node = this._scrollNode;\n            const scrollStep = this.autoScrollStep;\n            if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                node.scrollBy(0, -scrollStep);\n            }\n            else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                node.scrollBy(0, scrollStep);\n            }\n            if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                node.scrollBy(-scrollStep, 0);\n            }\n            else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                node.scrollBy(scrollStep, 0);\n            }\n        });\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(this._container);\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.1.3\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"] }]\n        }] });\n// TODO(crisbeto): remove generics when making breaking changes.\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\nclass DragDropRegistry {\n    _ngZone = inject(NgZone);\n    _document = inject(DOCUMENT);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    /** Registered drop container instances. */\n    _dropInstances = new Set();\n    /** Registered drag item instances. */\n    _dragInstances = new Set();\n    /** Drag item instances that are currently being dragged. */\n    _activeDragInstances = signal([]);\n    /** Keeps track of the event listeners that we've bound to the `document`. */\n    _globalListeners = new Map();\n    /**\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\n     * because it'll be called a lot and we don't want to create a new function every time.\n     */\n    _draggingPredicate = (item) => item.isDragging();\n    /**\n     * Map tracking DOM nodes and their corresponding drag directives. Note that this is different\n     * from looking through the `_dragInstances` and getting their root node, because the root node\n     * isn't necessarily the node that the directive is set on.\n     */\n    _domNodesToDirectives = null;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerMove = new Subject();\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerUp = new Subject();\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n     * @breaking-change 13.0.0\n     */\n    scroll = new Subject();\n    constructor() { }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances().indexOf(drag) > -1) {\n            return;\n        }\n        this._styleLoader.load(_ResetsLoader);\n        this._activeDragInstances.update(instances => [...instances, drag]);\n        if (this._activeDragInstances().length === 1) {\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            const isTouchEvent = event.type.startsWith('touch');\n            const endEventHandler = {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            };\n            if (isTouchEvent) {\n                this._globalListeners.set('touchend', endEventHandler);\n                this._globalListeners.set('touchcancel', endEventHandler);\n            }\n            else {\n                this._globalListeners.set('mouseup', endEventHandler);\n            }\n            this._globalListeners\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.update(instances => {\n            const index = instances.indexOf(drag);\n            if (index > -1) {\n                instances.splice(index, 1);\n                return [...instances];\n            }\n            return instances;\n        });\n        if (this._activeDragInstances().length === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances().indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances().length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    /**\n     * Tracks the DOM node which has a draggable directive.\n     * @param node Node to track.\n     * @param dragRef Drag directive set on the node.\n     */\n    registerDirectiveNode(node, dragRef) {\n        this._domNodesToDirectives ??= new WeakMap();\n        this._domNodesToDirectives.set(node, dragRef);\n    }\n    /**\n     * Stops tracking a draggable directive node.\n     * @param node Node to stop tracking.\n     */\n    removeDirectiveNode(node) {\n        this._domNodesToDirectives?.delete(node);\n    }\n    /**\n     * Gets the drag directive corresponding to a specific DOM node, if any.\n     * @param node Node for which to do the lookup.\n     */\n    getDragDirectiveForNode(node) {\n        return this._domNodesToDirectives?.get(node) || null;\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._domNodesToDirectives = null;\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * @param event Event whose default action should be prevented.\n     */\n    _preventDefaultWhileDragging = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            event.preventDefault();\n        }\n    };\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n    _persistentTouchmoveListener = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            // Note that we only want to prevent the default action after dragging has actually started.\n            // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n            // but it could be pushed back if the user has set up a drag delay or threshold.\n            if (this._activeDragInstances().some(this._draggingPredicate)) {\n                event.preventDefault();\n            }\n            this.pointerMove.next(event);\n        }\n    };\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: DragDropRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    _document = inject(DOCUMENT);\n    _ngZone = inject(NgZone);\n    _viewportRuler = inject(ViewportRuler);\n    _dragDropRegistry = inject(DragDropRegistry);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    constructor() { }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry, this._renderer);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: DragDrop, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: DragDrop, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    element = inject(ElementRef);\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    /** Emits when the state of the handle has changed. */\n    _stateChanges = new Subject();\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    _disabled = false;\n    constructor() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag?._addHandle(this);\n    }\n    ngAfterViewInit() {\n        if (!this._parentDrag) {\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const ref = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (ref) {\n                    this._parentDrag = ref;\n                    ref._addHandle(this);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkDragHandle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.1.3\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    element = inject(ElementRef);\n    dropContainer = inject(CDK_DROP_LIST, { optional: true, skipSelf: true });\n    _ngZone = inject(NgZone);\n    _viewContainerRef = inject(ViewContainerRef);\n    _dir = inject(Directionality, { optional: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _selfHandle = inject(CDK_DRAG_HANDLE, { optional: true, self: true });\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    _destroyed = new Subject();\n    _handles = new BehaviorSubject([]);\n    _previewTemplate;\n    _placeholderTemplate;\n    /** Reference to the underlying drag instance. */\n    _dragRef;\n    /** Arbitrary data to attach to this drag instance. */\n    data;\n    /** Locks the position of the dragged element along the specified axis. */\n    lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     */\n    rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     */\n    boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     */\n    freeDragPosition;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    _disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * Configures the place into which the preview of the item will be inserted. Can be configured\n     * globally through `CDK_DROP_LIST`. Possible values:\n     * - `global` - Preview will be inserted at the bottom of the `<body>`. The advantage is that\n     * you don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain\n     * its inherited styles.\n     * - `parent` - Preview will be inserted into the parent of the drag item. The advantage is that\n     * inherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be\n     * visible due to `z-index`. Furthermore, the preview is going to have an effect over selectors\n     * like `:nth-child` and some flexbox configurations.\n     * - `ElementRef<HTMLElement> | HTMLElement` - Preview will be inserted into a specific element.\n     * Same advantages and disadvantages as `parent`.\n     */\n    previewContainer;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Emits when the user starts dragging the item. */\n    started = new EventEmitter();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new EventEmitter();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new EventEmitter();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new EventEmitter();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new EventEmitter();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = new Observable((observer) => {\n        const subscription = this._dragRef.moved\n            .pipe(map(movedEvent => ({\n            source: this,\n            pointerPosition: movedEvent.pointerPosition,\n            event: movedEvent.event,\n            delta: movedEvent.delta,\n            distance: movedEvent.distance,\n        })))\n            .subscribe(observer);\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n    _injector = inject(Injector);\n    constructor() {\n        const dropContainer = this.dropContainer;\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        const dragDrop = inject(DragDrop);\n        this._dragRef = dragDrop.createDrag(this.element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        this._dragDropRegistry.registerDirectiveNode(this.element.nativeElement, this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n            // The drop container reads this so we need to sync it here.\n            dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._dragRef.scale = this.scale;\n            });\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // We need to wait until after render, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position, and then they get transferred to the portal.\n        afterNextRender(() => {\n            this._updateRootElement();\n            this._setupHandlesListener();\n            this._dragRef.scale = this.scale;\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }, { injector: this._injector });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in the `afterNextRender` queued up in the constructor.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Scale affects the free drag position so we need to sync it up here.\n        this._dragRef.scale = this.scale;\n        // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n        // constructor.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._dragDropRegistry.removeDirectiveNode(this.element.nativeElement);\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.scale = this.scale;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const parentDrag = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (parentDrag) {\n                    ref.withParent(parentDrag._dragRef);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkDrag, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.1.3\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], scale: [\"cdkDragScale\", \"scale\", numberAttribute] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': 'cdk-drag',\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], scale: [{\n                type: Input,\n                args: [{ alias: 'cdkDragScale', transform: numberAttribute }]\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    /** Drop lists registered inside the group. */\n    _items = new Set();\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    disabled = false;\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.1.3\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    element = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _scrollDispatcher = inject(ScrollDispatcher);\n    _dir = inject(Directionality, { optional: true });\n    _group = inject(CDK_DROP_LIST_GROUP, {\n        optional: true,\n        skipSelf: true,\n    });\n    /** Emits when the list has been destroyed. */\n    _destroyed = new Subject();\n    /** Whether the element's scrollable parents have been resolved. */\n    _scrollableParentsResolved;\n    /** Keeps track of the drop lists that are currently on the page. */\n    static _dropLists = [];\n    /** Reference to the underlying drop list instance. */\n    _dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     */\n    connectedTo = [];\n    /** Arbitrary data to attach to this container. */\n    data;\n    /** Direction in which the list is oriented. */\n    orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     */\n    id = inject(_IdGenerator).getId('cdk-drop-list-');\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    _disabled;\n    /** Whether sorting within this drop list is disabled. */\n    sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n    autoScrollDisabled;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep;\n    /**\n     * Selector that will be used to resolve an alternate element container for the drop list.\n     * Passing an alternate container is useful for the cases where one might not have control\n     * over the parent node of the draggable items within the list (e.g. due to content projection).\n     * This allows for usages like:\n     *\n     * ```\n     * <div cdkDropList cdkDropListElementContainer=\".inner\">\n     *   <div class=\"inner\">\n     *     <div cdkDrag></div>\n     *   </div>\n     * </div>\n     * ```\n     */\n    elementContainerSelector;\n    /** Emits when the user drops an item inside the container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new EventEmitter();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new EventEmitter();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new EventEmitter();\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     */\n    _unsortedItems = new Set();\n    constructor() {\n        const dragDrop = inject(DragDrop);\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(this.element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (this._group) {\n            this._group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            if (this.elementContainerSelector) {\n                const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n                if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throw new Error(`CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`);\n                }\n                ref.withElementContainer(container);\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkDropList, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.1.3\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"], elementContainerSelector: [\"cdkDropListElementContainer\", \"elementContainerSelector\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], elementContainerSelector: [{\n                type: Input,\n                args: ['cdkDropListElementContainer']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the preview template instance. */\n    data;\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    matchSize = false;\n    constructor() {\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkDragPreview, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.1.3\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the placeholder template instance. */\n    data;\n    constructor() {\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkDragPlaceholder, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.3\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.1.3\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n"],"names":["i0","signal","Component","ViewEncapsulation","ChangeDetectionStrategy","inject","NgZone","Injectable","RendererFactory2","InjectionToken","ElementRef","booleanAttribute","Directive","Input","ViewContainerRef","ChangeDetectorRef","EventEmitter","Injector","afterNextRender","numberAttribute","Output","TemplateRef","NgModule","DOCUMENT","ViewportRuler","ScrollDispatcher","CdkScrollableModule","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","_IdGenerator","coerceElement","coerceNumberProperty","coerceArray","_getEventTarget","normalizePassiveListenerOptions","_getShadowRoot","Subject","Subscription","interval","animationFrameScheduler","Observable","merge","BehaviorSubject","takeUntil","map","take","tap","switchMap","startWith","_CdkPrivateStyleLoader","Directionality","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","toLowerCase","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","source","type","value","name","context","getContext","drawImage","getMutableClientRect","element","rect","getBoundingClientRect","top","right","bottom","left","width","height","x","y","isInsideClientRect","clientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","positions","Map","constructor","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","contains","window","scrollY","scrollX","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","extendStyles","dest","importantProperties","key","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","enable","userSelect","style","toggleVisibility","opacity","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","getTransform","Math","round","parseCssTimeUnitsToMs","multiplier","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","getPropertyValue","split","part","trim","Set","PreviewRef","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","_renderer","_previewEmbeddedView","_preview","attach","parent","_createPreview","supportsPopover","destroy","remove","setTransform","addClass","className","classList","add","getTransitionDuration","addEventListener","handler","listen","previewConfig","previewClass","previewTemplate","template","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","setAttribute","Array","isArray","passiveEventListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_previewContainer","_placeholderRef","_placeholder","_pickupPositionInElement","_anchor","_passiveTransform","_activeTransform","_hasStartedDragging","_hasMoved","_initialContainer","_initialIndex","_parentPositions","_moveEvents","_pointerDirectionDelta","_pointerPositionAtLastDirectionChange","_lastKnownPointerPosition","_ownerSVGElement","_rootElementTapHighlight","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_lastTouchEventTime","_dragStartTime","_boundaryElement","_nativeInteractionsEnabled","_previewRect","_boundaryRect","_placeholderTemplate","_handles","_disabledHandles","_dropContainer","_parentDragRef","_cachedShadowRoot","lockAxis","dragStartDelay","scale","disabled","_disabled","_toggleNativeDragInteractions","handle","beforeStarted","started","released","ended","entered","exited","dropped","moved","data","constrainPosition","withRootElement","withParent","parentDragRef","registerDragItem","getPlaceholderElement","getRootElement","getVisibleElement","isDragging","withHandles","handles","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","_pointerDown","_nativeDragStart","undefined","SVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","dispose","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","setFreeDragPosition","_applyRootElementTransform","withPreviewContainer","_sortFromLastPointerPosition","_updateActiveDropContainer","_getConstrainedPointerPosition","removeEventListener","shadowDomSelectStart","next","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","abs","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_getDragStartDelay","_endDragSequence","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_updatePointerDirectionDelta","offset","activeTransform","observers","distance","_getDragDistance","delta","_pointerUp","stopDragging","webkitTapHighlightColor","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","shadowRoot","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","ngDevMode","insertBefore","zIndex","_getPreviewInsertionPoint","body","replaceChild","start","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","cleanupListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","min","max","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","SingleAxisSortStrategy","_element","_sortPredicate","_itemPositions","_activeDraggables","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","transformAmount","activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","push","_cacheItemPositions","withSortPredicate","predicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","withElementContainer","elementToMeasure","a","b","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","floor","MixedSortStrategy","_rootNode","_activeItems","deltaX","deltaY","_relatedNodes","childNodes","nextSibling","previousSwap","toSwapWith","current","overlapElement","after","before","newOverlapElement","_getRootNode","elementFromPoint","enterIndex","_getClosestItemIndexToPointer","targetItem","root","elementAtPoint","minDistance","Infinity","minIndex","hypot","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AutoScrollVerticalDirection","AutoScrollHorizontalDirection","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_container","_isDragging","_sortStrategy","_domRect","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","NONE","_horizontalScrollDirection","_scrollNode","_stopScrollTimers","_scrollableElements","_initialScrollSnap","coercedElement","withOrientation","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","draggedItems","filter","every","connectedTo","strategy","withScrollableParents","Error","oldContainerIndex","newContainerIndex","unshift","size","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","_startScrollInterval","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","pipe","scrollStep","UP","scrollBy","DOWN","LEFT","RIGHT","_canReceive","_startReceiving","activeSiblings","initiator","receiver","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","_ResetsLoader","ɵfac","_ResetsLoader_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","decls","vars","_ResetsLoader_Template","rf","ctx","encapsulation","changeDetection","DragDropRegistry","_styleLoader","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","_domNodesToDirectives","scroll","_persistentTouchmoveListener","load","update","instances","startsWith","endEventHandler","e","options","_preventDefaultWhileDragging","config","_clearGlobalListeners","streams","observer","eventOptions","registerDirectiveNode","dragRef","WeakMap","removeDirectiveNode","getDragDirectiveForNode","ngOnDestroy","instance","some","DragDropRegistry_Factory","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","DEFAULT_CONFIG","DragDrop","createRenderer","createDrag","createDropList","DragDrop_Factory","CDK_DRAG_PARENT","assertElementNode","CDK_DRAG_HANDLE","CdkDragHandle","_parentDrag","optional","skipSelf","_stateChanges","nativeElement","_addHandle","ngAfterViewInit","ref","_removeHandle","CdkDragHandle_Factory","ɵdir","ɵɵdefineDirective","inputs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_viewContainerRef","_dir","_changeDetectorRef","_selfHandle","self","_destroyed","_dragRef","rootElementSelector","freeDragPosition","subscription","movedEvent","_injector","dragDrop","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","_updateRootElement","_setupHandlesListener","injector","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","closest","_getBoundaryElement","boundary","dir","templateRef","parentDrag","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","handleElements","handleInstance","CdkDrag_Factory","hostVars","hostBindings","CdkDrag_HostBindings","ɵɵclassProp","outputs","exportAs","ɵɵNgOnChangesFeature","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropListGroup_Factory","CdkDropList","_scrollDispatcher","_group","_scrollableParentsResolved","_dropLists","id","getId","elementContainerSelector","_unsortedItems","_setupInputSyncSubscription","_syncItemsWithRef","getSortedItems","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","correspondingDropList","list","console","warn","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","querySelector","listAutoScrollDisabled","listOrientation","CdkDropList_Factory","CdkDropList_HostBindings","ɵɵattribute","useValue","CDK_DRAG_PREVIEW","CdkDragPreview","_drag","CdkDragPreview_Factory","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","CdkDragPlaceholder_Factory","DRAG_DROP_DIRECTIVES","DragDropModule","DragDropModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}