{"version":3,"file":"4396.js","mappings":"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","sources":["./projects/ngx-editor-js2-pop-quiz/src/lib/ngx-editor-js2-pop-quiz.service.ts","./projects/ngx-editor-js2-pop-quiz/src/lib/pop-quiz-config/steps/question.component.ts","./projects/ngx-editor-js2-pop-quiz/src/lib/pop-quiz-config/steps/responses.component.ts","./projects/ngx-editor-js2-pop-quiz/src/lib/pop-quiz-config/steps/choices.component.ts","./projects/ngx-editor-js2-pop-quiz/src/lib/pop-quiz-config/steps/answer.component.ts","./projects/ngx-editor-js2-pop-quiz/src/lib/pop-quiz-config/steps/results.component.ts","./projects/ngx-editor-js2-pop-quiz/src/lib/pop-quiz-config/pop-quiz-config.component.ts","./projects/ngx-editor-js2-pop-quiz/src/lib/ngx-editor-js2-pop-quiz.component.ts","./projects/ngx-editor-js2-pop-quiz/src/public-api.ts","./projects/ngx-editor-js2-pop-quiz/src/tmdjr-ngx-editor-js2-pop-quiz.ts"],"sourcesContent":["import { inject, Injectable } from '@angular/core';\nimport {\n  AbstractControl,\n  FormArray,\n  FormControl,\n  FormGroup,\n  NonNullableFormBuilder,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface QuizConfig {\n  question: string;\n  choices: { value: string }[];\n  answer: string;\n  correctResponse: string;\n  incorrectResponse: string;\n}\n\nexport interface QuizConfigFormRawData {\n  questionGroup: { question: string };\n  choicesOptionsGroup: { choices: { value: string }[] };\n  answerGroup: { answer: string };\n  responsesGroup: { correctResponse: string; incorrectResponse: string };\n}\n\nexport interface QuizConfigForm {\n  questionGroup: QuestionGroup;\n  choicesOptionsGroup: ChoicesOptionsGroup;\n  answerGroup: AnswerGroup;\n  responsesGroup: ResponsesGroup;\n}\n\nexport type QuestionGroup = FormGroup<{ question: FormControl<string> }>;\nexport type ChoicesOptionsGroup = FormGroup<{\n  choices: FormArray<FormControl<string>>;\n}>;\nexport type AnswerGroup = FormGroup<{ answer: FormControl<string> }>;\nexport type ResponsesGroup = FormGroup<{\n  correctResponse: FormControl<string>;\n  incorrectResponse: FormControl<string>;\n}>;\n\nfunction validateRatioOptions(): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: any } | null => {\n    const optionsArray = control as FormArray;\n    if (optionsArray.controls.length < 2) {\n      return { notEnoughOptions: true };\n    }\n    return null;\n  };\n}\n\n@Injectable()\nexport class NgxEditorJs2PopQuizService {\n  formBuilder = inject(NonNullableFormBuilder);\n\n  parentFormGroup!: FormGroup;\n  parentFormControlName!: string;\n\n  quizConfigValue = new BehaviorSubject<QuizConfig>({\n    question: '',\n    answer: '',\n    choices: [],\n    correctResponse: '',\n    incorrectResponse: '',\n  });\n  quizConfigValue$ = this.quizConfigValue.asObservable();\n\n  quizConfigForm = new BehaviorSubject<FormGroup<QuizConfigForm>>(\n    this.formBuilder.group({\n      questionGroup: this.formBuilder.group({\n        question: new FormControl<string>('', [Validators.required]),\n      }),\n      choicesOptionsGroup: this.formBuilder.group({\n        choices: this.formBuilder.array([] as FormControl<string>[], [\n          validateRatioOptions(),\n        ]),\n      }),\n      answerGroup: this.formBuilder.group({\n        answer: new FormControl<string>('', [Validators.required]),\n      }),\n      responsesGroup: this.formBuilder.group({\n        correctResponse: new FormControl<string>('', [Validators.required]),\n        incorrectResponse: new FormControl<string>('', [Validators.required]),\n      }),\n    }) as FormGroup<QuizConfigForm>\n  );\n  quizConfigForm$ = this.quizConfigForm.asObservable();\n\n  setQuizConfigValue(value: QuizConfig) {\n    this.quizConfigValue.next(value);\n    return value;\n  }\n\n  initializeQuizConfigForm(value: QuizConfig) {\n    const form = this.quizConfigForm.value;\n    const choicesArray = form.get('choicesOptionsGroup.choices') as FormArray;\n    if (!choicesArray || choicesArray.length === 0) {\n      value.choices.forEach((choice) => {\n        choicesArray.push(\n          this.formBuilder.group({\n            value: [choice.value, [Validators.required]],\n          })\n        );\n      });\n    }\n    // ! Hack because the Result component has not subscribed to the form value change yet\n    requestAnimationFrame(() => {\n      form.setValue(this.marshalFormValueIntoFormGroup(value));\n    });\n    return form;\n  }\n\n  marshalFormValueIntoFormGroup(value: any) {\n    return {\n      answerGroup: {\n        answer: value.answer,\n      },\n      choicesOptionsGroup: {\n        choices: value.choices,\n      },\n      questionGroup: {\n        question: value.question,\n      },\n      responsesGroup: {\n        correctResponse: value.correctResponse,\n        incorrectResponse: value.incorrectResponse,\n      },\n    };\n  }\n\n  updateParentFormGroupValue(value: QuizConfig) {\n    this.parentFormGroup\n      .get(this.parentFormControlName)\n      ?.setValue(JSON.stringify(value));\n  }\n\n  marshalFormGroupIntoFormValue(value: QuizConfigFormRawData): QuizConfig {\n    return {\n      question: value.questionGroup.question,\n      answer: value.answerGroup.answer,\n      choices: value.choicesOptionsGroup.choices,\n      correctResponse: value.responsesGroup.correctResponse,\n      incorrectResponse: value.responsesGroup.incorrectResponse,\n    };\n  }\n}\n","import { Component, input } from '@angular/core';\nimport { FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { MatButton } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { MatStepperNext } from '@angular/material/stepper';\n\n@Component({\n  selector: 'pop-quiz-question',\n  imports: [\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInput,\n    MatStepperNext,\n    MatButton,\n  ],\n  template: `\n    <form [formGroup]=\"questionFormGroup()\">\n      <h3>Create a Question to ask the User</h3>\n      <mat-form-field>\n        <mat-label>Create a Question to ask.</mat-label>\n        <textarea matInput [formControlName]=\"'question'\"></textarea>\n        @if(questionFormGroup().get('question')?.hasError('required')) {\n        <mat-error> Question is required </mat-error>\n        }\n      </mat-form-field>\n      <div class=\"action-group\">\n        <button mat-flat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  `,\n  styles: [\n    `\n      :host {\n        form {\n          display: flex;\n          flex-direction: column;\n          .action-group {\n            display: flex;\n            justify-content: flex-end;\n            margin-top: 1rem;\n          }\n          h3 {\n            font: var(--mat-sys-headline-small);\n            font-weight: 100;\n          }\n        }\n      }\n    `,\n  ],\n})\nexport class QuestionComponent {\n  questionFormGroup = input.required<FormGroup>();\n}\n","import { Component, input } from '@angular/core';\nimport { FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { MatButton } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { MatStepperNext, MatStepperPrevious } from '@angular/material/stepper';\n\n@Component({\n  selector: 'pop-quiz-responses',\n  imports: [\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInput,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatButton,\n  ],\n  template: `\n    <form [formGroup]=\"responsesFormGroup()\">\n      <h3>Create a Response when the User is Correct</h3>\n      <mat-form-field>\n        <mat-label>Create a Response when the User is Correct</mat-label>\n        <textarea matInput [formControlName]=\"'correctResponse'\"></textarea>\n        @if(responsesFormGroup().get('correctResponse')?.hasError('required')) {\n        <mat-error> Question is required </mat-error>\n        }\n      </mat-form-field>\n      <h3>Create a Response when the User is Incorrect</h3>\n      <mat-form-field>\n        <mat-label>Create a Response when the User is Incorrect</mat-label>\n        <textarea matInput [formControlName]=\"'incorrectResponse'\"></textarea>\n        @if(responsesFormGroup().get('incorrectResponse')?.hasError('required')) {\n        <mat-error> Question is required </mat-error>\n        }\n      </mat-form-field>\n      <div class=\"action-group\">\n        <button mat-flat-button matStepperPrevious>Previous</button>\n        <button mat-flat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  `,\n  styles: [\n    `\n      :host {\n        form {\n          display: flex;\n          flex-direction: column;\n          .action-group {\n            display: flex;\n            justify-content: space-between;\n            margin-top: 1rem;\n          }\n          h3 {\n            font: var(--mat-sys-headline-small);\n            font-weight: 100;\n          }\n        }\n      }\n    `,\n  ],\n})\nexport class ResponsesComponent {\n  responsesFormGroup = input.required<FormGroup>();\n}\n","import { AsyncPipe, NgClass } from '@angular/common';\nimport { Component, inject, input } from '@angular/core';\n\nimport {\n  FormArray,\n  FormBuilder,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDivider } from '@angular/material/divider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatInput } from '@angular/material/input';\nimport { MatStepperNext, MatStepperPrevious } from '@angular/material/stepper';\nimport { BehaviorSubject, map } from 'rxjs';\nimport { NgxEditorJs2PopQuizService } from '../../ngx-editor-js2-pop-quiz.service';\n\n@Component({\n  selector: 'pop-quiz-choices',\n  imports: [\n    AsyncPipe,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInput,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatButtonModule,\n    MatIcon,\n    MatDivider,\n    NgClass,\n  ],\n  template: `\n    <form [formGroup]=\"choicesFormGroup()\">\n      <h3>\n        Create the Possible Answers\n        <span\n          [ngClass]=\"{\n            error: this.choicesFormGroup()\n              .get('choices')\n              ?.hasError('notEnoughOptions')\n          }\"\n          >(Create at least 2 choices)</span\n        >\n      </h3>\n      <ng-container formArrayName=\"choices\">\n        @for (option of (viewModel$ | async)!.controls; track option) {\n        <ng-container [formGroupName]=\"$index\">\n          <div class=\"radio-option-container\">\n            <mat-form-field>\n              <mat-label>Option {{ $index + 1 }}</mat-label>\n              <textarea matInput formControlName=\"value\"></textarea>\n              @if((this.choicesFormGroup().get('choices'))?.get($index.toString()))\n              {\n              <mat-error> Question is required </mat-error>\n              }\n            </mat-form-field>\n            <button mat-icon-button (click)=\"removeRatioOption($index)\">\n              <mat-icon class=\"delete\">delete</mat-icon>\n            </button>\n          </div>\n        </ng-container>\n        }\n        <div class=\"answers-action-group\">\n          <button mat-button type=\"button\" (click)=\"addRatioOption()\">\n            <mat-icon>add</mat-icon>Add a Choice\n          </button>\n        </div>\n      </ng-container>\n      <mat-divider></mat-divider>\n      <div class=\"action-group\">\n        <button mat-flat-button matStepperPrevious>Previous</button>\n        <button mat-flat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  `,\n  styles: [\n    `\n      :host {\n        form {\n          display: flex;\n          flex-direction: column;\n          .error {\n            color: var(--mat-sys-error);\n          }\n          .radio-option-container {\n            display: flex;\n            align-items: center;\n            gap: 1rem;\n            mat-form-field {\n              width: 100%;\n            }\n            .delete {\n              color: var(--mat-sys-error);\n            }\n          }\n          .answers-action-group {\n            margin-bottom: 1.7rem;\n          }\n          .action-group {\n            display: flex;\n            justify-content: space-between;\n            margin-top: 1rem;\n          }\n          h3 {\n            font: var(--mat-sys-headline-small);\n            font-weight: 100;\n            span {\n              font: var(--mat-sys-body-small);\n            }\n          }\n        }\n      }\n    `,\n  ],\n})\nexport class ChoicesComponent {\n  formBuilder = inject(FormBuilder);\n  popQuizService = inject(NgxEditorJs2PopQuizService);\n  choicesFormGroup = input.required<FormGroup, FormGroup>({\n    transform: (value) => {\n      this.choicesFormGroupSub.next(value);\n      return value;\n    },\n  });\n\n  choicesFormGroupSub = new BehaviorSubject<FormGroup>(\n    this.formBuilder.group({\n      choices: this.formBuilder.array([]),\n    })\n  );\n  choicesFormGroup$ = this.choicesFormGroupSub.asObservable();\n\n  viewModel$ = this.choicesFormGroup$.pipe(\n    map((formGroup) => formGroup.get('choices') as FormArray)\n  );\n\n  addRatioOption() {\n    const choices = this.choicesFormGroup().get('choices') as FormArray;\n    choices.push(\n      this.formBuilder.group({\n        value: ['', [Validators.required]],\n      })\n    );\n    this.choicesFormGroupSub.next(this.choicesFormGroup());\n  }\n\n  removeRatioOption(index: number) {\n    const choices = this.choicesFormGroup().get('choices') as FormArray;\n    choices.removeAt(index);\n    this.choicesFormGroupSub.next(this.choicesFormGroup());\n\n    // ! better way to do this invalidation on the prefill answer\n    // ! Buggy\n    this.popQuizService.quizConfigForm.value.controls.answerGroup\n      .get('answer')\n      ?.setValue('');\n  }\n}\n","import { AsyncPipe } from '@angular/common';\nimport { Component, inject, input } from '@angular/core';\nimport { FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatButton } from '@angular/material/button';\nimport { MatOption } from '@angular/material/core';\nimport { MatFormField, MatFormFieldModule, MatLabel } from '@angular/material/form-field';\nimport { MatStepperNext, MatStepperPrevious } from '@angular/material/stepper';\nimport { NgxEditorJs2PopQuizService } from '../../ngx-editor-js2-pop-quiz.service';\nimport { map } from 'rxjs';\nimport { MatSelect } from '@angular/material/select';\n\n@Component({\n  selector: 'pop-quiz-answer',\n  imports: [\n    AsyncPipe,\n    ReactiveFormsModule,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatButton,\n    MatFormFieldModule,\n    MatOption,\n    MatLabel,\n    MatSelect,\n  ],\n  template: `\n    @if (choices$ | async; as choices) {\n    <form [formGroup]=\"answerFormGroup()\">\n      <h3>Select the Correct Answer</h3>\n      <mat-form-field>\n        <mat-label>Answer</mat-label>\n        <mat-select formControlName=\"answer\" required>\n          @for (choice of choices.controls; track $index) {\n          <mat-option [value]=\"choice.get('value')?.value\">\n            {{ choice.get('value')?.value }}\n          </mat-option>\n          }\n        </mat-select>\n        @if (answerFormGroup().get('answer')?.hasError('required')) {\n        <mat-error>Please choose an answer</mat-error>\n        }\n      </mat-form-field>\n      <div class=\"action-group\">\n        <button mat-flat-button matStepperPrevious>Previous</button>\n        <button mat-flat-button matStepperNext>Next</button>\n      </div>\n    </form>\n    }\n  `,\n  styles: [\n    `\n      :host {\n        form {\n          display: flex;\n          flex-direction: column;\n          mat-form-field {\n            margin-bottom: 1.5rem;\n          }\n          .action-group {\n            display: flex;\n            justify-content: space-between;\n          }\n          h3 {\n            font: var(--mat-sys-headline-small);\n            font-weight: 100;\n          }\n        }\n      }\n    `,\n  ],\n})\nexport class AnswerComponent {\n  answerFormGroup = input.required<FormGroup>();\n  choices$ = inject(NgxEditorJs2PopQuizService).quizConfigForm$.pipe(\n    map((form) => form.controls.choicesOptionsGroup.controls.choices)\n  );\n}\n","import { Component, inject, input } from '@angular/core';\nimport { AsyncPipe } from '@angular/common';\nimport { FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { MatButton } from '@angular/material/button';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatStepperPrevious } from '@angular/material/stepper';\nimport { MatDivider } from '@angular/material/divider';\nimport {\n  NgxEditorJs2PopQuizService,\n  QuizConfigFormRawData,\n} from '../../ngx-editor-js2-pop-quiz.service';\nimport { map, switchMap } from 'rxjs';\n\n@Component({\n  selector: 'pop-quiz-results',\n  imports: [\n    AsyncPipe,\n    ReactiveFormsModule,\n    MatStepperPrevious,\n    MatButton,\n    MatRadioModule,\n    MatDivider,\n  ],\n  template: `\n    <form [formGroup]=\"resultsFormGroup()\">\n      <h3>Preview of the Pop-Quiz</h3>\n      <mat-divider></mat-divider>\n      @if(viewModel$ | async; as formPreview) {\n      <div class=\"preview-container\">\n        <div class=\"preview\">\n          <h1>Quiz</h1>\n          <p>{{ formPreview.question }}</p>\n          <mat-radio-group [value]=\"formPreview.answer\">\n            @for(option of formPreview.choices; track $index) {\n            <mat-radio-button [value]=\"option.value\">{{\n              option.value\n            }}</mat-radio-button>\n            }\n          </mat-radio-group>\n        </div>\n        <div class=\"preview-action-group\">\n          <button mat-button type=\"button\">Submit</button>\n        </div>\n      </div>\n      }\n      <mat-divider></mat-divider>\n      <div class=\"action-group\">\n        <button mat-flat-button matStepperPrevious>Back</button>\n        <button mat-flat-button (click)=\"emitNewFormValue()\">Save</button>\n      </div>\n    </form>\n  `,\n  styles: [\n    `\n      :host {\n        form {\n          display: flex;\n          flex-direction: column;\n          .action-group {\n            display: flex;\n            justify-content: space-between;\n            margin-top: 1rem;\n          }\n          h3 {\n            font: var(--mat-sys-headline-small);\n            font-weight: 100;\n          }\n\n          .preview-container {\n            display: flex;\n            gap: 1.5rem;\n            flex-direction: column;\n            align-items: flex-end;\n            margin-bottom: 1.5rem;\n            .preview-action-group {\n              display: flex;\n              flex-direction: row-reverse;\n            }\n          }\n        }\n      }\n    `,\n  ],\n})\nexport class ResultsComponent {\n  popQuizService = inject(NgxEditorJs2PopQuizService);\n  resultsFormGroup = input.required<FormGroup>();\n\n  viewModel$ = this.popQuizService.quizConfigForm$.pipe(\n    switchMap((formGroup) => formGroup.valueChanges),\n    map((formValue) =>\n      this.popQuizService.marshalFormGroupIntoFormValue(\n        formValue as unknown as QuizConfigFormRawData\n      )\n    ),\n  );\n\n  emitNewFormValue() {\n    this.popQuizService.updateParentFormGroupValue(\n      this.resultsFormGroup().getRawValue()\n    );\n  }\n}\n","import { Component, inject, ViewChild } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatStepper, MatStepperModule } from '@angular/material/stepper';\n\nimport {\n  AnswerGroup,\n  ChoicesOptionsGroup,\n  NgxEditorJs2PopQuizService,\n  QuestionGroup,\n  ResponsesGroup,\n} from '../ngx-editor-js2-pop-quiz.service';\nimport { QuestionComponent } from './steps/question.component';\nimport { ResponsesComponent } from './steps/responses.component';\nimport { ChoicesComponent } from './steps/choices.component';\nimport { AnswerComponent } from './steps/answer.component';\nimport { ResultsComponent } from './steps/results.component';\nimport { combineLatest, map, tap } from 'rxjs';\nimport { AsyncPipe } from '@angular/common';\n\n@Component({\n  selector: 'pop-quiz-config',\n  imports: [\n    AsyncPipe,\n    ReactiveFormsModule,\n    MatStepperModule,\n    QuestionComponent,\n    ResponsesComponent,\n    ChoicesComponent,\n    AnswerComponent,\n    ResultsComponent,\n  ],\n  template: `\n      @if (viewModel$ | async; as vm) {\n    <mat-stepper class=\"mat-stepper\" linear [selectedIndex]=\"vm.selectedIndex\">\n      <mat-step [stepControl]=\"vm.questionGroup\" [completed]=\"vm.completed\">\n        <ng-template matStepLabel>Question?</ng-template>\n        <pop-quiz-question\n          [questionFormGroup]=\"vm.questionGroup\"\n        ></pop-quiz-question>\n      </mat-step>\n      <mat-step [stepControl]=\"vm.choicesOptionsGroup\" [completed]=\"vm.completed\">\n        <ng-template matStepLabel>Choices</ng-template>\n        <pop-quiz-choices\n          [choicesFormGroup]=\"vm.choicesOptionsGroup\"\n        ></pop-quiz-choices>\n      </mat-step>\n      <mat-step [stepControl]=\"vm.answerGroup\" [completed]=\"vm.completed\">\n        <ng-template matStepLabel>Answer</ng-template>\n        <pop-quiz-answer [answerFormGroup]=\"vm.answerGroup\"></pop-quiz-answer>\n      </mat-step>\n      <mat-step [stepControl]=\"vm.responsesGroup\" [completed]=\"vm.completed\">\n        <ng-template matStepLabel>Responses</ng-template>\n        <pop-quiz-responses\n          [responsesFormGroup]=\"vm.responsesGroup\"\n        ></pop-quiz-responses>\n      </mat-step>\n      <mat-step [stepControl]=\"vm.quizConfigForm\" [completed]=\"vm.completed\">\n        <ng-template matStepLabel>Results</ng-template>\n        <pop-quiz-results\n          [resultsFormGroup]=\"vm.quizConfigForm\"\n        ></pop-quiz-results>\n      </mat-step>\n    </mat-stepper>\n  }\n  `,\n  styles: [\n    `\n      :host {\n        border: 1px solid #ccc;\n        border-radius: var(\n          --mdc-outlined-card-container-shape,\n          var(--mat-sys-corner-medium)\n        );\n        pop-quiz-question {\n          padding-top: 1rem;\n        }\n        mat-stepper.mat-stepper-vertical,\n        mat-stepper.mat-stepper-horizontal {\n          background: none;\n        }\n      }\n    `,\n  ],\n})\nexport class PopQuizConfigComponent {\n  popQuizService = inject(NgxEditorJs2PopQuizService);\n\n  viewModel$ = combineLatest({\n    form: this.popQuizService.quizConfigForm$,\n    value: this.popQuizService.quizConfigValue$,\n  }).pipe(\n    map(({ value }) => ({\n      form: this.popQuizService.initializeQuizConfigForm(value),\n      value,\n    })),\n    map(({ form, value }) => ({\n      questionGroup: form.get('questionGroup') as QuestionGroup,\n      choicesOptionsGroup: form.get(\n        'choicesOptionsGroup'\n      ) as ChoicesOptionsGroup,\n      answerGroup: form.get('answerGroup') as AnswerGroup,\n      responsesGroup: form.get('responsesGroup') as ResponsesGroup,\n      quizConfigForm: form,\n      selectedIndex: value.question ? 4 : 0,\n      completed: value.question ? true : false,\n    }))\n  );\n}\n","import { Component, inject, input, signal } from '@angular/core';\nimport { FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { CdkDrag } from '@angular/cdk/drag-drop';\n\nimport {\n  AutofocusDirective,\n  BlockComponent,\n  BlockOptionAction,\n  ControlAccessorDirective,\n  ToolbarFabDirective,\n} from '@tmdjr/ngx-editor-js2';\nimport { PopQuizConfigComponent } from './pop-quiz-config/pop-quiz-config.component';\nimport { NgxEditorJs2PopQuizService } from './ngx-editor-js2-pop-quiz.service';\n\n@Component({\n  selector: 'ngx-editor-js2-pop-quiz',\n  host: { class: 'cdk-drag-animating no-toolbar-inline' },\n  hostDirectives: [CdkDrag],\n  imports: [\n    ReactiveFormsModule,\n    ControlAccessorDirective,\n    AutofocusDirective,\n    ToolbarFabDirective,\n    PopQuizConfigComponent,\n  ],\n  providers: [NgxEditorJs2PopQuizService],\n  template: `\n    <ng-container [formGroup]=\"formGroup()\">\n      <span\n        controlAccessor\n        toolbarFab\n        class=\"pop-quiz-container-overlay\"\n        [actionCallback]=\"actionCallbackBind\"\n        [autofocus]=\"autofocus()\"\n        [blockOptionActions]=\"blockOptionActions()\"\n        [formControlName]=\"formControlName()\"\n        [componentContextPositionIndex]=\"sortIndex()\"\n      ></span>\n      <pop-quiz-config></pop-quiz-config>\n    </ng-container>\n  `,\n  styles: [\n    `\n      :host {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        margin: 1.5rem 0;\n        .pop-quiz-container-overlay {\n          display: flex;\n          height: 100%;\n          width: 100%;\n          position: absolute;\n        }\n      }\n    `,\n  ],\n})\nexport class NgxEditorJs2PopQuizComponent implements BlockComponent {\n  popQuizService = inject(NgxEditorJs2PopQuizService);\n  sortIndex = input<number>(0);\n  componentInstanceName = 'NgxEditorJs2PopQuizComponent';\n  autofocus = input<boolean>(true);\n  formGroup = input.required<FormGroup, FormGroup>({\n    transform: (value) => {\n      this.popQuizService.parentFormGroup = value;\n      return value;\n    },\n  });\n  formControlName = input.required<string, string>({\n    transform: (value) => {\n      this.popQuizService.parentFormControlName = value;\n      return value;\n    },\n  });\n  blockOptionActions = input<BlockOptionAction[]>([\n    { action: 'medium', icon: 'density_small' },\n    { action: 'display-small', icon: 'density_medium' },\n    { action: 'display-large', icon: 'density_large' },\n  ]);\n\n  value = this.popQuizService.quizConfigValue$;\n  savedAction = signal<string>('display-large');\n  actionCallbackBind = this.actionCallback.bind(this);\n\n  ngOnInit() {\n    try {\n      const possibleSavedValue = this.formGroup().get(this.formControlName());\n      this.popQuizService.setQuizConfigValue(\n        possibleSavedValue?.getRawValue()\n          ? JSON.parse(possibleSavedValue.value)\n          : this.popQuizService.quizConfigValue.value\n      );\n    } catch (error) {\n      console.warn('Error parseing Quiz values', error);\n    }\n  }\n\n  actionCallback(action: string) {\n    this.savedAction.update(() => action);\n  }\n}\n","/*\n * Public API Surface of ngx-editor-js2-pop-quiz\n */\n\nexport * from './lib/ngx-editor-js2-pop-quiz.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["validateRatioOptions","control","optionsArray","controls","length","notEnoughOptions","NgxEditorJs2PopQuizService","formBuilder","inject","NonNullableFormBuilder","parentFormGroup","parentFormControlName","quizConfigValue","BehaviorSubject","question","answer","choices","correctResponse","incorrectResponse","quizConfigValue$","asObservable","quizConfigForm","group","questionGroup","FormControl","Validators","required","choicesOptionsGroup","array","answerGroup","responsesGroup","quizConfigForm$","setQuizConfigValue","value","next","initializeQuizConfigForm","form","choicesArray","get","forEach","choice","push","requestAnimationFrame","setValue","marshalFormValueIntoFormGroup","updateParentFormGroupValue","JSON","stringify","marshalFormGroupIntoFormValue","factory","ɵfac","QuestionComponent","questionFormGroup","input","ɵcmp","selectors","inputs","decls","vars","consts","template","QuestionComponent_Template","rf","ctx","ReactiveFormsModule","i1","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","MatFormFieldModule","i2","MatFormField","MatLabel","MatError","MatInput","MatStepperNext","MatButton","styles","ResponsesComponent","responsesFormGroup","ResponsesComponent_Template","MatStepperPrevious","ChoicesComponent","FormBuilder","popQuizService","choicesFormGroup","transform","choicesFormGroupSub","choicesFormGroup$","viewModel$","pipe","map","formGroup","addRatioOption","removeRatioOption","index","removeAt","ChoicesComponent_Template","AsyncPipe","FormGroupName","FormArrayName","MatButtonModule","i3","MatIconButton","MatIcon","MatDivider","NgClass","AnswerComponent","answerFormGroup","choices$","AnswerComponent_Template","RequiredValidator","MatOption","MatSelect","ResultsComponent","resultsFormGroup","switchMap","valueChanges","formValue","emitNewFormValue","getRawValue","ResultsComponent_Template","MatRadioModule","i2$1","MatRadioGroup","MatRadioButton","PopQuizConfigComponent","combineLatest","selectedIndex","completed","PopQuizConfigComponent_Template","MatStepperModule","i1$1","MatStep","MatStepLabel","MatStepper","NgxEditorJs2PopQuizComponent","sortIndex","componentInstanceName","autofocus","formControlName","blockOptionActions","action","icon","savedAction","signal","actionCallbackBind","actionCallback","bind","ngOnInit","possibleSavedValue","parse","error","console","warn","update","hostAttrs","features","i1$2","CdkDrag","NgxEditorJs2PopQuizComponent_Template","ControlAccessorDirective","AutofocusDirective","ToolbarFabDirective"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}