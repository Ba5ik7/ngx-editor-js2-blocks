{"version":3,"file":"8473.js","mappings":";;;;;;;;;;;;;AAAA;AACA,SAASA,+BAA+BA,CAACC,KAAK,EAAE;EAC5C;EACA;EACA;EACA;EACA;EACA,OAAOA,KAAK,CAACC,OAAO,KAAK,CAAC,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC;AACpD;AACA;AACA,SAASC,gCAAgCA,CAACH,KAAK,EAAE;EAC7C,MAAMI,KAAK,GAAIJ,KAAK,CAACK,OAAO,IAAIL,KAAK,CAACK,OAAO,CAAC,CAAC,CAAC,IAAML,KAAK,CAACM,cAAc,IAAIN,KAAK,CAACM,cAAc,CAAC,CAAC,CAAE;EACtG;EACA;EACA;EACA;EACA,OAAQ,CAAC,CAACF,KAAK,IACXA,KAAK,CAACG,UAAU,KAAK,CAAC,CAAC,KACtBH,KAAK,CAACI,OAAO,IAAI,IAAI,IAAIJ,KAAK,CAACI,OAAO,KAAK,CAAC,CAAC,KAC7CJ,KAAK,CAACK,OAAO,IAAI,IAAI,IAAIL,KAAK,CAACK,OAAO,KAAK,CAAC,CAAC;AACtD;;;;;;;;;;;;;;;;;ACpB6C;AAE7C,MAAMI,UAAU,CAAC;AAEjB;AACA,SAASC,YAAYA,CAACC,KAAK,EAAE;EACzB;EACA;EACA;EACA;EACA,OAAOA,KAAK,IAAI,OAAOA,KAAK,CAACC,OAAO,KAAK,UAAU,IAAI,EAAED,KAAK,YAAYH,uDAAqB,CAAC;AACpG;;;;;;;;;;;;;;;;;ACXoC;AAC4B;AACZ;;AAEpD;AACA;AACA,IAAIW,kBAAkB;AACtB;AACA;AACA;AACA;AACA;AACA,IAAI;EACAA,kBAAkB,GAAG,OAAOC,IAAI,KAAK,WAAW,IAAIA,IAAI,CAACC,eAAe;AAC5E,CAAC,CACD,MAAM;EACFF,kBAAkB,GAAG,KAAK;AAC9B;AACA;AACA;AACA;AACA;AAHA,IAIMG,QAAQ;EAAd,MAAMA,QAAQ,CAAC;IACXC,WAAW,GAAGR,qDAAM,CAACC,sDAAW,CAAC;IACjC;IACA;IACA;IACA;IACAQ,SAAS,GAAG,IAAI,CAACD,WAAW,GACtBL,kEAAiB,CAAC,IAAI,CAACK,WAAW,CAAC,GACnC,OAAOE,QAAQ,KAAK,QAAQ,IAAI,CAAC,CAACA,QAAQ;IAChD;IACAC,IAAI,GAAG,IAAI,CAACF,SAAS,IAAI,SAAS,CAACG,IAAI,CAACC,SAAS,CAACC,SAAS,CAAC;IAC5D;IACAC,OAAO,GAAG,IAAI,CAACN,SAAS,IAAI,iBAAiB,CAACG,IAAI,CAACC,SAAS,CAACC,SAAS,CAAC;IACvE;IACA;IACAE,KAAK,GAAG,IAAI,CAACP,SAAS,IAClB,CAAC,EAAEQ,MAAM,CAACC,MAAM,IAAId,kBAAkB,CAAC,IACvC,OAAOe,GAAG,KAAK,WAAW,IAC1B,CAAC,IAAI,CAACR,IAAI,IACV,CAAC,IAAI,CAACI,OAAO;IACjB;IACA;IACA;IACAK,MAAM,GAAG,IAAI,CAACX,SAAS,IACnB,cAAc,CAACG,IAAI,CAACC,SAAS,CAACC,SAAS,CAAC,IACxC,CAAC,IAAI,CAACE,KAAK,IACX,CAAC,IAAI,CAACL,IAAI,IACV,CAAC,IAAI,CAACI,OAAO;IACjB;IACAM,GAAG,GAAG,IAAI,CAACZ,SAAS,IAAI,kBAAkB,CAACG,IAAI,CAACC,SAAS,CAACC,SAAS,CAAC,IAAI,EAAE,UAAU,IAAIG,MAAM,CAAC;IAC/F;IACA;IACA;IACA;IACA;IACAK,OAAO,GAAG,IAAI,CAACb,SAAS,IAAI,sBAAsB,CAACG,IAAI,CAACC,SAAS,CAACC,SAAS,CAAC;IAC5E;IACA;IACAS,OAAO,GAAG,IAAI,CAACd,SAAS,IAAI,UAAU,CAACG,IAAI,CAACC,SAAS,CAACC,SAAS,CAAC,IAAI,CAAC,IAAI,CAACC,OAAO;IACjF;IACA;IACA;IACA;IACAS,MAAM,GAAG,IAAI,CAACf,SAAS,IAAI,SAAS,CAACG,IAAI,CAACC,SAAS,CAACC,SAAS,CAAC,IAAI,IAAI,CAACM,MAAM;IAC7EK,WAAWA,CAAA,EAAG,CAAE;IAChB,OAAOC,IAAI,YAAAC,iBAAAC,iBAAA;MAAA,YAAAA,iBAAA,IAAwFrB,QAAQ;IAAA;IAC3G,OAAOsB,KAAK,kBAD6E9B,gEAAE;MAAAgC,KAAA,EACYxB,QAAQ;MAAAyB,OAAA,EAARzB,QAAQ,CAAAmB,IAAA;MAAAO,UAAA,EAAc;IAAM;EACvI;EAAC,OA/CK1B,QAAQ;AAAA;AAgDd;EAAA,QAAA2B,SAAA,oBAAAA,SAAA;AAAA;;;;;;;;;;;;;;;;;;ACtEoC;AAC+D;;AAEnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,YAAY,gBAAG,IAAIJ,yDAAc,CAAC,aAAa,EAAE;EACnDH,UAAU,EAAE,MAAM;EAClBD,OAAO,EAAES;AACb,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAoBA,CAAA,EAAG;EAC5B,OAAOzC,qDAAM,CAACqC,mDAAQ,CAAC;AAC3B;;AAEA;AACA,MAAMK,kBAAkB,GAAG,oHAAoH;AAC/I;AACA,SAASC,sBAAsBA,CAACC,QAAQ,EAAE;EACtC,MAAMhD,KAAK,GAAGgD,QAAQ,EAAEC,WAAW,CAAC,CAAC,IAAI,EAAE;EAC3C,IAAIjD,KAAK,KAAK,MAAM,IAAI,OAAOiB,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAEiC,QAAQ,EAAE;IAC7E,OAAOJ,kBAAkB,CAAC9B,IAAI,CAACC,SAAS,CAACiC,QAAQ,CAAC,GAAG,KAAK,GAAG,KAAK;EACtE;EACA,OAAOlD,KAAK,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK;AAC1C;AACA;AACA;AACA;AACA;AAHA,IAIMmD,cAAc;EAApB,MAAMA,cAAc,CAAC;IACjB;IACA,IAAInD,KAAKA,CAAA,EAAG;MACR,OAAO,IAAI,CAACoD,WAAW,CAAC,CAAC;IAC7B;IACA;AACJ;AACA;IACIA,WAAW,GAAGV,qDAAM,CAAC,KAAK,CAAC;IAC3B;IACAW,MAAM,GAAG,IAAIV,uDAAY,CAAC,CAAC;IAC3Bd,WAAWA,CAAA,EAAG;MACV,MAAMyB,SAAS,GAAGlD,qDAAM,CAACwC,YAAY,EAAE;QAAEW,QAAQ,EAAE;MAAK,CAAC,CAAC;MAC1D,IAAID,SAAS,EAAE;QACX,MAAME,OAAO,GAAGF,SAAS,CAACG,IAAI,GAAGH,SAAS,CAACG,IAAI,CAACC,GAAG,GAAG,IAAI;QAC1D,MAAMC,OAAO,GAAGL,SAAS,CAACM,eAAe,GAAGN,SAAS,CAACM,eAAe,CAACF,GAAG,GAAG,IAAI;QAChF,IAAI,CAACN,WAAW,CAACS,GAAG,CAACd,sBAAsB,CAACS,OAAO,IAAIG,OAAO,IAAI,KAAK,CAAC,CAAC;MAC7E;IACJ;IACAG,WAAWA,CAAA,EAAG;MACV,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC;IAC1B;IACA,OAAOjC,IAAI,YAAAkC,uBAAAhC,iBAAA;MAAA,YAAAA,iBAAA,IAAwFmB,cAAc;IAAA;IACjH,OAAOlB,KAAK,kBAD6E9B,gEAAE;MAAAgC,KAAA,EACYgB,cAAc;MAAAf,OAAA,EAAde,cAAc,CAAArB,IAAA;MAAAO,UAAA,EAAc;IAAM;EAC7I;EAAC,OAxBKc,cAAc;AAAA;AAyBpB;EAAA,QAAAb,SAAA,oBAAAA,SAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtEoC;AACgT;AAChO;AAC9B;AAC4C;AAC3C;AACN;AACP;AACa;AACpB;AACC;AACJ;AACR;AACvB;AACR;AACS;AACd;AACmC;AACnB;;AAEpC;AACA,SAASuE,aAAaA,CAACC,IAAI,EAAE;EACzB,MAAMC,KAAK,GAAGD,IAAI,CAACE,SAAS,CAAC,IAAI,CAAC;EAClC,MAAMC,iBAAiB,GAAGF,KAAK,CAACG,gBAAgB,CAAC,MAAM,CAAC;EACxD,MAAMC,QAAQ,GAAGL,IAAI,CAACK,QAAQ,CAAClE,WAAW,CAAC,CAAC;EAC5C;EACA8D,KAAK,CAACK,eAAe,CAAC,IAAI,CAAC;EAC3B,KAAK,IAAIxH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqH,iBAAiB,CAACI,MAAM,EAAEzH,CAAC,EAAE,EAAE;IAC/CqH,iBAAiB,CAACrH,CAAC,CAAC,CAACwH,eAAe,CAAC,IAAI,CAAC;EAC9C;EACA,IAAID,QAAQ,KAAK,QAAQ,EAAE;IACvBG,kBAAkB,CAACR,IAAI,EAAEC,KAAK,CAAC;EACnC,CAAC,MACI,IAAII,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,UAAU,EAAE;IAC/EI,iBAAiB,CAACT,IAAI,EAAEC,KAAK,CAAC;EAClC;EACAS,YAAY,CAAC,QAAQ,EAAEV,IAAI,EAAEC,KAAK,EAAEO,kBAAkB,CAAC;EACvDE,YAAY,CAAC,yBAAyB,EAAEV,IAAI,EAAEC,KAAK,EAAEQ,iBAAiB,CAAC;EACvE,OAAOR,KAAK;AAChB;AACA;AACA,SAASS,YAAYA,CAACC,QAAQ,EAAEX,IAAI,EAAEC,KAAK,EAAEW,QAAQ,EAAE;EACnD,MAAMC,kBAAkB,GAAGb,IAAI,CAACI,gBAAgB,CAACO,QAAQ,CAAC;EAC1D,IAAIE,kBAAkB,CAACN,MAAM,EAAE;IAC3B,MAAMO,aAAa,GAAGb,KAAK,CAACG,gBAAgB,CAACO,QAAQ,CAAC;IACtD,KAAK,IAAI7H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+H,kBAAkB,CAACN,MAAM,EAAEzH,CAAC,EAAE,EAAE;MAChD8H,QAAQ,CAACC,kBAAkB,CAAC/H,CAAC,CAAC,EAAEgI,aAAa,CAAChI,CAAC,CAAC,CAAC;IACrD;EACJ;AACJ;AACA;AACA,IAAIiI,aAAa,GAAG,CAAC;AACrB;AACA,SAASN,iBAAiBA,CAACO,MAAM,EAAEf,KAAK,EAAE;EACtC;EACA,IAAIA,KAAK,CAACgB,IAAI,KAAK,MAAM,EAAE;IACvBhB,KAAK,CAAC/G,KAAK,GAAG8H,MAAM,CAAC9H,KAAK;EAC9B;EACA;EACA;EACA;EACA,IAAI+G,KAAK,CAACgB,IAAI,KAAK,OAAO,IAAIhB,KAAK,CAACiB,IAAI,EAAE;IACtCjB,KAAK,CAACiB,IAAI,GAAG,aAAajB,KAAK,CAACiB,IAAI,IAAIH,aAAa,EAAE,EAAE;EAC7D;AACJ;AACA;AACA,SAASP,kBAAkBA,CAACQ,MAAM,EAAEf,KAAK,EAAE;EACvC,MAAMkB,OAAO,GAAGlB,KAAK,CAACmB,UAAU,CAAC,IAAI,CAAC;EACtC,IAAID,OAAO,EAAE;IACT;IACA;IACA,IAAI;MACAA,OAAO,CAACE,SAAS,CAACL,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC,CACD,MAAM,CAAE;EACZ;AACJ;;AAEA;AACA,SAASM,oBAAoBA,CAACC,OAAO,EAAE;EACnC,MAAMC,IAAI,GAAGD,OAAO,CAACE,qBAAqB,CAAC,CAAC;EAC5C;EACA;EACA;EACA;EACA,OAAO;IACHC,GAAG,EAAEF,IAAI,CAACE,GAAG;IACbC,KAAK,EAAEH,IAAI,CAACG,KAAK;IACjBC,MAAM,EAAEJ,IAAI,CAACI,MAAM;IACnBC,IAAI,EAAEL,IAAI,CAACK,IAAI;IACfC,KAAK,EAAEN,IAAI,CAACM,KAAK;IACjBC,MAAM,EAAEP,IAAI,CAACO,MAAM;IACnBC,CAAC,EAAER,IAAI,CAACQ,CAAC;IACTC,CAAC,EAAET,IAAI,CAACS;EACZ,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAACC,UAAU,EAAEH,CAAC,EAAEC,CAAC,EAAE;EAC1C,MAAM;IAAEP,GAAG;IAAEE,MAAM;IAAEC,IAAI;IAAEF;EAAM,CAAC,GAAGQ,UAAU;EAC/C,OAAOF,CAAC,IAAIP,GAAG,IAAIO,CAAC,IAAIL,MAAM,IAAII,CAAC,IAAIH,IAAI,IAAIG,CAAC,IAAIL,KAAK;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,mBAAmBA,CAACC,UAAU,EAAEC,SAAS,EAAE;EAChD;EACA,MAAMC,iBAAiB,GAAGD,SAAS,CAACT,IAAI,GAAGQ,UAAU,CAACR,IAAI;EAC1D,MAAMW,kBAAkB,GAAGF,SAAS,CAACT,IAAI,GAAGS,SAAS,CAACR,KAAK,GAAGO,UAAU,CAACV,KAAK;EAC9E;EACA,MAAMc,gBAAgB,GAAGH,SAAS,CAACZ,GAAG,GAAGW,UAAU,CAACX,GAAG;EACvD,MAAMgB,mBAAmB,GAAGJ,SAAS,CAACZ,GAAG,GAAGY,SAAS,CAACP,MAAM,GAAGM,UAAU,CAACT,MAAM;EAChF,OAAOW,iBAAiB,IAAIC,kBAAkB,IAAIC,gBAAgB,IAAIC,mBAAmB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,OAAO,EAAElB,GAAG,EAAEG,IAAI,EAAE;EACvCe,OAAO,CAAClB,GAAG,IAAIA,GAAG;EAClBkB,OAAO,CAAChB,MAAM,GAAGgB,OAAO,CAAClB,GAAG,GAAGkB,OAAO,CAACb,MAAM;EAC7Ca,OAAO,CAACf,IAAI,IAAIA,IAAI;EACpBe,OAAO,CAACjB,KAAK,GAAGiB,OAAO,CAACf,IAAI,GAAGe,OAAO,CAACd,KAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASe,oBAAoBA,CAACrB,IAAI,EAAEsB,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EAC/D,MAAM;IAAEtB,GAAG;IAAEC,KAAK;IAAEC,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGP,IAAI;EACxD,MAAMyB,UAAU,GAAGnB,KAAK,GAAGgB,SAAS;EACpC,MAAMI,UAAU,GAAGnB,MAAM,GAAGe,SAAS;EACrC,OAAQE,QAAQ,GAAGtB,GAAG,GAAGwB,UAAU,IAC/BF,QAAQ,GAAGpB,MAAM,GAAGsB,UAAU,IAC9BH,QAAQ,GAAGlB,IAAI,GAAGoB,UAAU,IAC5BF,QAAQ,GAAGpB,KAAK,GAAGsB,UAAU;AACrC;;AAEA;AACA,MAAME,qBAAqB,CAAC;EACxB3G,SAAS;EACT;EACA4G,SAAS,gBAAG,IAAIC,GAAG,CAAC,CAAC;EACrBtI,WAAWA,CAACyB,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EACA;EACA8G,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACF,SAAS,CAACE,KAAK,CAAC,CAAC;EAC1B;EACA;EACAC,KAAKA,CAACC,QAAQ,EAAE;IACZ,IAAI,CAACF,KAAK,CAAC,CAAC;IACZ,IAAI,CAACF,SAAS,CAACrG,GAAG,CAAC,IAAI,CAACP,SAAS,EAAE;MAC/BiH,cAAc,EAAE,IAAI,CAACC,yBAAyB,CAAC;IACnD,CAAC,CAAC;IACFF,QAAQ,CAACG,OAAO,CAACpC,OAAO,IAAI;MACxB,IAAI,CAAC6B,SAAS,CAACrG,GAAG,CAACwE,OAAO,EAAE;QACxBkC,cAAc,EAAE;UAAE/B,GAAG,EAAEH,OAAO,CAACqC,SAAS;UAAE/B,IAAI,EAAEN,OAAO,CAACsC;QAAW,CAAC;QACpE1B,UAAU,EAAEb,oBAAoB,CAACC,OAAO;MAC5C,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA;EACAuC,YAAYA,CAAC3L,KAAK,EAAE;IAChB,MAAM4L,MAAM,GAAGnF,2DAAe,CAACzG,KAAK,CAAC;IACrC,MAAM6L,cAAc,GAAG,IAAI,CAACZ,SAAS,CAACa,GAAG,CAACF,MAAM,CAAC;IACjD,IAAI,CAACC,cAAc,EAAE;MACjB,OAAO,IAAI;IACf;IACA,MAAMP,cAAc,GAAGO,cAAc,CAACP,cAAc;IACpD,IAAIS,MAAM;IACV,IAAIC,OAAO;IACX,IAAIJ,MAAM,KAAK,IAAI,CAACvH,SAAS,EAAE;MAC3B,MAAM4H,sBAAsB,GAAG,IAAI,CAACV,yBAAyB,CAAC,CAAC;MAC/DQ,MAAM,GAAGE,sBAAsB,CAAC1C,GAAG;MACnCyC,OAAO,GAAGC,sBAAsB,CAACvC,IAAI;IACzC,CAAC,MACI;MACDqC,MAAM,GAAGH,MAAM,CAACH,SAAS;MACzBO,OAAO,GAAGJ,MAAM,CAACF,UAAU;IAC/B;IACA,MAAMQ,aAAa,GAAGZ,cAAc,CAAC/B,GAAG,GAAGwC,MAAM;IACjD,MAAMI,cAAc,GAAGb,cAAc,CAAC5B,IAAI,GAAGsC,OAAO;IACpD;IACA;IACA,IAAI,CAACf,SAAS,CAACO,OAAO,CAAC,CAACY,QAAQ,EAAEvE,IAAI,KAAK;MACvC,IAAIuE,QAAQ,CAACpC,UAAU,IAAI4B,MAAM,KAAK/D,IAAI,IAAI+D,MAAM,CAACS,QAAQ,CAACxE,IAAI,CAAC,EAAE;QACjE2C,aAAa,CAAC4B,QAAQ,CAACpC,UAAU,EAAEkC,aAAa,EAAEC,cAAc,CAAC;MACrE;IACJ,CAAC,CAAC;IACFb,cAAc,CAAC/B,GAAG,GAAGwC,MAAM;IAC3BT,cAAc,CAAC5B,IAAI,GAAGsC,OAAO;IAC7B,OAAO;MAAEzC,GAAG,EAAE2C,aAAa;MAAExC,IAAI,EAAEyC;IAAe,CAAC;EACvD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIZ,yBAAyBA,CAAA,EAAG;IACxB,OAAO;MAAEhC,GAAG,EAAEnH,MAAM,CAACkK,OAAO;MAAE5C,IAAI,EAAEtH,MAAM,CAACmK;IAAQ,CAAC;EACxD;AACJ;;AAEA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,OAAO,EAAEpI,SAAS,EAAE;EACrC,MAAMqI,SAAS,GAAGD,OAAO,CAACC,SAAS;EACnC,IAAIA,SAAS,CAACtE,MAAM,KAAK,CAAC,IAAIsE,SAAS,CAAC,CAAC,CAAC,CAACC,QAAQ,KAAKtI,SAAS,CAACuI,YAAY,EAAE;IAC5E,OAAOF,SAAS,CAAC,CAAC,CAAC;EACvB;EACA,MAAMG,OAAO,GAAGxI,SAAS,CAACyI,aAAa,CAAC,KAAK,CAAC;EAC9CJ,SAAS,CAAClB,OAAO,CAAC3D,IAAI,IAAIgF,OAAO,CAACE,WAAW,CAAClF,IAAI,CAAC,CAAC;EACpD,OAAOgF,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASG,YAAYA,CAACC,IAAI,EAAEpE,MAAM,EAAEqE,mBAAmB,EAAE;EACrD,KAAK,IAAIC,GAAG,IAAItE,MAAM,EAAE;IACpB,IAAIA,MAAM,CAACuE,cAAc,CAACD,GAAG,CAAC,EAAE;MAC5B,MAAMpM,KAAK,GAAG8H,MAAM,CAACsE,GAAG,CAAC;MACzB,IAAIpM,KAAK,EAAE;QACPkM,IAAI,CAACI,WAAW,CAACF,GAAG,EAAEpM,KAAK,EAAEmM,mBAAmB,EAAEI,GAAG,CAACH,GAAG,CAAC,GAAG,WAAW,GAAG,EAAE,CAAC;MAClF,CAAC,MACI;QACDF,IAAI,CAACM,cAAc,CAACJ,GAAG,CAAC;MAC5B;IACJ;EACJ;EACA,OAAOF,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,4BAA4BA,CAACpE,OAAO,EAAEqE,MAAM,EAAE;EACnD,MAAMC,UAAU,GAAGD,MAAM,GAAG,EAAE,GAAG,MAAM;EACvCT,YAAY,CAAC5D,OAAO,CAACuE,KAAK,EAAE;IACxB,cAAc,EAAEF,MAAM,GAAG,EAAE,GAAG,MAAM;IACpC,mBAAmB,EAAEA,MAAM,GAAG,EAAE,GAAG,MAAM;IACzC,6BAA6B,EAAEA,MAAM,GAAG,EAAE,GAAG,aAAa;IAC1D,aAAa,EAAEC,UAAU;IACzB,iBAAiB,EAAEA,UAAU;IAC7B,qBAAqB,EAAEA,UAAU;IACjC,kBAAkB,EAAEA;EACxB,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,gBAAgBA,CAACxE,OAAO,EAAEqE,MAAM,EAAEP,mBAAmB,EAAE;EAC5DF,YAAY,CAAC5D,OAAO,CAACuE,KAAK,EAAE;IACxBvB,QAAQ,EAAEqB,MAAM,GAAG,EAAE,GAAG,OAAO;IAC/BlE,GAAG,EAAEkE,MAAM,GAAG,EAAE,GAAG,GAAG;IACtBI,OAAO,EAAEJ,MAAM,GAAG,EAAE,GAAG,GAAG;IAC1B/D,IAAI,EAAE+D,MAAM,GAAG,EAAE,GAAG;EACxB,CAAC,EAAEP,mBAAmB,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA,SAASY,iBAAiBA,CAACC,SAAS,EAAEC,gBAAgB,EAAE;EACpD,OAAOA,gBAAgB,IAAIA,gBAAgB,IAAI,MAAM,GAC/CD,SAAS,GAAG,GAAG,GAAGC,gBAAgB,GAClCD,SAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,gBAAgBA,CAACrC,MAAM,EAAEsC,UAAU,EAAE;EAC1CtC,MAAM,CAAC+B,KAAK,CAAChE,KAAK,GAAG,GAAGuE,UAAU,CAACvE,KAAK,IAAI;EAC5CiC,MAAM,CAAC+B,KAAK,CAAC/D,MAAM,GAAG,GAAGsE,UAAU,CAACtE,MAAM,IAAI;EAC9CgC,MAAM,CAAC+B,KAAK,CAACI,SAAS,GAAGI,YAAY,CAACD,UAAU,CAACxE,IAAI,EAAEwE,UAAU,CAAC3E,GAAG,CAAC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4E,YAAYA,CAACtE,CAAC,EAAEC,CAAC,EAAE;EACxB;EACA;EACA,OAAO,eAAesE,IAAI,CAACC,KAAK,CAACxE,CAAC,CAAC,OAAOuE,IAAI,CAACC,KAAK,CAACvE,CAAC,CAAC,QAAQ;AACnE;;AAEA;AACA,SAASwE,qBAAqBA,CAACvN,KAAK,EAAE;EAClC;EACA,MAAMwN,UAAU,GAAGxN,KAAK,CAACiD,WAAW,CAAC,CAAC,CAACwK,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI;EACpE,OAAOC,UAAU,CAAC1N,KAAK,CAAC,GAAGwN,UAAU;AACzC;AACA;AACA,SAASG,kCAAkCA,CAACtF,OAAO,EAAE;EACjD,MAAMuF,aAAa,GAAGC,gBAAgB,CAACxF,OAAO,CAAC;EAC/C,MAAMyF,sBAAsB,GAAGC,qBAAqB,CAACH,aAAa,EAAE,qBAAqB,CAAC;EAC1F,MAAMI,QAAQ,GAAGF,sBAAsB,CAACG,IAAI,CAACC,IAAI,IAAIA,IAAI,KAAK,WAAW,IAAIA,IAAI,KAAK,KAAK,CAAC;EAC5F;EACA,IAAI,CAACF,QAAQ,EAAE;IACX,OAAO,CAAC;EACZ;EACA;EACA;EACA,MAAMG,aAAa,GAAGL,sBAAsB,CAACL,OAAO,CAACO,QAAQ,CAAC;EAC9D,MAAMI,YAAY,GAAGL,qBAAqB,CAACH,aAAa,EAAE,qBAAqB,CAAC;EAChF,MAAMS,SAAS,GAAGN,qBAAqB,CAACH,aAAa,EAAE,kBAAkB,CAAC;EAC1E,OAAQL,qBAAqB,CAACa,YAAY,CAACD,aAAa,CAAC,CAAC,GACtDZ,qBAAqB,CAACc,SAAS,CAACF,aAAa,CAAC,CAAC;AACvD;AACA;AACA,SAASJ,qBAAqBA,CAACH,aAAa,EAAE5F,IAAI,EAAE;EAChD,MAAMhI,KAAK,GAAG4N,aAAa,CAACU,gBAAgB,CAACtG,IAAI,CAAC;EAClD,OAAOhI,KAAK,CAACuO,KAAK,CAAC,GAAG,CAAC,CAACvI,GAAG,CAACwI,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;AACpD;;AAEA;AACA,MAAMtC,mBAAmB,gBAAG,IAAIuC,GAAG,CAAC;AAChC;AACA,UAAU,CACb,CAAC;AACF,MAAMC,UAAU,CAAC;EACbrL,SAAS;EACTsL,YAAY;EACZC,UAAU;EACVC,eAAe;EACfC,gBAAgB;EAChBC,aAAa;EACbC,qBAAqB;EACrBC,iBAAiB;EACjBC,OAAO;EACPC,SAAS;EACT;EACAC,oBAAoB;EACpB;EACAC,QAAQ;EACR,IAAIjH,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACiH,QAAQ;EACxB;EACAzN,WAAWA,CAACyB,SAAS,EAAEsL,YAAY,EAAEC,UAAU,EAAEC,eAAe,EAAEC,gBAAgB,EAAEC,aAAa,EAAEC,qBAAqB,EAAEC,iBAAiB,EAAEC,OAAO,EAAEC,SAAS,EAAE;IAC7J,IAAI,CAAC9L,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACsL,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;EACAG,MAAMA,CAACC,MAAM,EAAE;IACX,IAAI,CAACF,QAAQ,GAAG,IAAI,CAACG,cAAc,CAAC,CAAC;IACrCD,MAAM,CAACxD,WAAW,CAAC,IAAI,CAACsD,QAAQ,CAAC;IACjC;IACA;IACA,IAAII,eAAe,CAAC,IAAI,CAACJ,QAAQ,CAAC,EAAE;MAChC,IAAI,CAACA,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;IAClC;EACJ;EACAK,OAAOA,CAAA,EAAG;IACN,IAAI,CAACL,QAAQ,CAACM,MAAM,CAAC,CAAC;IACtB,IAAI,CAACP,oBAAoB,EAAEM,OAAO,CAAC,CAAC;IACpC,IAAI,CAACL,QAAQ,GAAG,IAAI,CAACD,oBAAoB,GAAG,IAAI;EACpD;EACAQ,YAAYA,CAAC7P,KAAK,EAAE;IAChB,IAAI,CAACsP,QAAQ,CAAC1C,KAAK,CAACI,SAAS,GAAGhN,KAAK;EACzC;EACAuI,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAAC+G,QAAQ,CAAC/G,qBAAqB,CAAC,CAAC;EAChD;EACAuH,QAAQA,CAACC,SAAS,EAAE;IAChB,IAAI,CAACT,QAAQ,CAACU,SAAS,CAACC,GAAG,CAACF,SAAS,CAAC;EAC1C;EACAG,qBAAqBA,CAAA,EAAG;IACpB,OAAOvC,kCAAkC,CAAC,IAAI,CAAC2B,QAAQ,CAAC;EAC5D;EACAa,gBAAgBA,CAACnI,IAAI,EAAEoI,OAAO,EAAE;IAC5B,OAAO,IAAI,CAAChB,SAAS,CAACiB,MAAM,CAAC,IAAI,CAACf,QAAQ,EAAEtH,IAAI,EAAEoI,OAAO,CAAC;EAC9D;EACAX,cAAcA,CAAA,EAAG;IACb,MAAMa,aAAa,GAAG,IAAI,CAACvB,gBAAgB;IAC3C,MAAMwB,YAAY,GAAG,IAAI,CAACvB,aAAa;IACvC,MAAMwB,eAAe,GAAGF,aAAa,GAAGA,aAAa,CAACG,QAAQ,GAAG,IAAI;IACrE,IAAIC,OAAO;IACX,IAAIF,eAAe,IAAIF,aAAa,EAAE;MAClC;MACA;MACA,MAAMK,QAAQ,GAAGL,aAAa,CAACM,SAAS,GAAG,IAAI,CAAC9B,eAAe,GAAG,IAAI;MACtE,MAAMpD,OAAO,GAAG4E,aAAa,CAACO,aAAa,CAACC,kBAAkB,CAACN,eAAe,EAAEF,aAAa,CAACrI,OAAO,CAAC;MACtGyD,OAAO,CAACqF,aAAa,CAAC,CAAC;MACvBL,OAAO,GAAGjF,WAAW,CAACC,OAAO,EAAE,IAAI,CAACpI,SAAS,CAAC;MAC9C,IAAI,CAAC+L,oBAAoB,GAAG3D,OAAO;MACnC,IAAI4E,aAAa,CAACM,SAAS,EAAE;QACzB1D,gBAAgB,CAACwD,OAAO,EAAEC,QAAQ,CAAC;MACvC,CAAC,MACI;QACDD,OAAO,CAAC9D,KAAK,CAACI,SAAS,GAAGI,YAAY,CAAC,IAAI,CAAC6B,qBAAqB,CAACnG,CAAC,EAAE,IAAI,CAACmG,qBAAqB,CAAClG,CAAC,CAAC;MACtG;IACJ,CAAC,MACI;MACD2H,OAAO,GAAG7J,aAAa,CAAC,IAAI,CAAC+H,YAAY,CAAC;MAC1C1B,gBAAgB,CAACwD,OAAO,EAAE,IAAI,CAAC5B,eAAe,CAAC;MAC/C,IAAI,IAAI,CAACI,iBAAiB,EAAE;QACxBwB,OAAO,CAAC9D,KAAK,CAACI,SAAS,GAAG,IAAI,CAACkC,iBAAiB;MACpD;IACJ;IACAjD,YAAY,CAACyE,OAAO,CAAC9D,KAAK,EAAE;MACxB;MACA;MACA,gBAAgB,EAAE,MAAM;MACxB;MACA;MACA;MACA;MACA;MACA,QAAQ,EAAE8C,eAAe,CAACgB,OAAO,CAAC,GAAG,YAAY,GAAG,GAAG;MACvD,UAAU,EAAE,OAAO;MACnB,KAAK,EAAE,GAAG;MACV,MAAM,EAAE,GAAG;MACX,SAAS,EAAE,IAAI,CAACvB,OAAO,GAAG;IAC9B,CAAC,EAAEhD,mBAAmB,CAAC;IACvBM,4BAA4B,CAACiE,OAAO,EAAE,KAAK,CAAC;IAC5CA,OAAO,CAACV,SAAS,CAACC,GAAG,CAAC,kBAAkB,CAAC;IACzCS,OAAO,CAACM,YAAY,CAAC,SAAS,EAAE,QAAQ,CAAC;IACzCN,OAAO,CAACM,YAAY,CAAC,KAAK,EAAE,IAAI,CAACnC,UAAU,CAAC;IAC5C,IAAI0B,YAAY,EAAE;MACd,IAAIU,KAAK,CAACC,OAAO,CAACX,YAAY,CAAC,EAAE;QAC7BA,YAAY,CAAC9F,OAAO,CAACsF,SAAS,IAAIW,OAAO,CAACV,SAAS,CAACC,GAAG,CAACF,SAAS,CAAC,CAAC;MACvE,CAAC,MACI;QACDW,OAAO,CAACV,SAAS,CAACC,GAAG,CAACM,YAAY,CAAC;MACvC;IACJ;IACA,OAAOG,OAAO;EAClB;AACJ;AACA;AACA,SAAShB,eAAeA,CAACrH,OAAO,EAAE;EAC9B,OAAO,aAAa,IAAIA,OAAO;AACnC;;AAEA;AACA,MAAM8I,2BAA2B,GAAG;EAAEC,OAAO,EAAE;AAAK,CAAC;AACrD;AACA,MAAMC,0BAA0B,GAAG;EAAED,OAAO,EAAE;AAAM,CAAC;AACrD;AACA,MAAME,6BAA6B,GAAG;EAClCF,OAAO,EAAE,KAAK;EACdG,OAAO,EAAE;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAG,GAAG;AACnC;AACA,MAAMC,iBAAiB,GAAG,sBAAsB;AAChD;AACA,MAAMC,uBAAuB,gBAAG,IAAIhD,GAAG,CAAC;AACpC;AACA,UAAU,CACb,CAAC;AACF;AACA;AACA;AACA,MAAMiD,OAAO,CAAC;EACVC,OAAO;EACPtO,SAAS;EACTuO,OAAO;EACPC,cAAc;EACdC,iBAAiB;EACjB3C,SAAS;EACT4C,oBAAoB;EACpBC,6BAA6B;EAC7B;EACA3C,QAAQ;EACR;EACA4C,iBAAiB;EACjB;EACAC,eAAe;EACf;EACAC,YAAY;EACZ;EACAC,wBAAwB;EACxB;EACApD,qBAAqB;EACrB;AACJ;AACA;AACA;EACIqD,OAAO;EACP;AACJ;AACA;EACIC,OAAO,GAAG,IAAI;EACd;AACJ;AACA;AACA;AACA;AACA;EACIC,iBAAiB,GAAG;IAAE1J,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC;EAClC;EACA0J,gBAAgB,GAAG;IAAE3J,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC;EACjC;EACAmG,iBAAiB;EACjB;AACJ;AACA;AACA;EACIwD,mBAAmB,gBAAGhQ,qDAAM,CAAC,KAAK,CAAC;EACnC;EACAiQ,SAAS;EACT;EACAC,iBAAiB;EACjB;EACAC,aAAa;EACb;EACAC,gBAAgB;EAChB;EACAC,WAAW,gBAAG,IAAI5N,yCAAO,CAAC,CAAC;EAC3B;EACA6N,sBAAsB;EACtB;EACAC,qCAAqC;EACrC;EACAC,yBAAyB;EACzB;AACJ;AACA;AACA;EACItE,YAAY;EACZ;AACJ;AACA;EACIuE,gBAAgB;EAChB;AACJ;AACA;AACA;EACIC,wBAAwB;EACxB;EACAC,wBAAwB,GAAGjO,8CAAY,CAACkO,KAAK;EAC7C;EACAC,sBAAsB,GAAGnO,8CAAY,CAACkO,KAAK;EAC3C;EACAE,mBAAmB,GAAGpO,8CAAY,CAACkO,KAAK;EACxC;EACAG,mBAAmB,GAAGrO,8CAAY,CAACkO,KAAK;EACxC;AACJ;AACA;AACA;AACA;EACII,mBAAmB;EACnB;EACAC,cAAc;EACd;EACAC,gBAAgB,GAAG,IAAI;EACvB;EACAC,0BAA0B,GAAG,IAAI;EACjC;EACA/E,eAAe;EACf;EACAgF,YAAY;EACZ;EACAC,aAAa;EACb;EACAhF,gBAAgB;EAChB;EACAiF,oBAAoB;EACpB;EACAC,QAAQ,GAAG,EAAE;EACb;EACAC,gBAAgB,gBAAG,IAAIxF,GAAG,CAAC,CAAC;EAC5B;EACAyF,cAAc;EACd;EACAtF,UAAU,GAAG,KAAK;EAClB;EACAuF,cAAc;EACd;AACJ;AACA;AACA;AACA;EACIC,iBAAiB;EACjB;EACAC,QAAQ;EACR;AACJ;AACA;AACA;EACIC,cAAc,GAAG,CAAC;EAClB;EACAhE,YAAY;EACZ;AACJ;AACA;AACA;EACIiE,KAAK,GAAG,CAAC;EACT;EACA,IAAIC,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACC,SAAS,IAAI,CAAC,EAAE,IAAI,CAACP,cAAc,IAAI,IAAI,CAACA,cAAc,CAACM,QAAQ,CAAC;EACpF;EACA,IAAIA,QAAQA,CAACzU,KAAK,EAAE;IAChB,IAAIA,KAAK,KAAK,IAAI,CAAC0U,SAAS,EAAE;MAC1B,IAAI,CAACA,SAAS,GAAG1U,KAAK;MACtB,IAAI,CAAC2U,6BAA6B,CAAC,CAAC;MACpC,IAAI,CAACV,QAAQ,CAACxJ,OAAO,CAACmK,MAAM,IAAInI,4BAA4B,CAACmI,MAAM,EAAE5U,KAAK,CAAC,CAAC;IAChF;EACJ;EACA0U,SAAS,GAAG,KAAK;EACjB;EACAG,aAAa,gBAAG,IAAI1P,yCAAO,CAAC,CAAC;EAC7B;EACA2P,OAAO,gBAAG,IAAI3P,yCAAO,CAAC,CAAC;EACvB;EACA4P,QAAQ,gBAAG,IAAI5P,yCAAO,CAAC,CAAC;EACxB;EACA6P,KAAK,gBAAG,IAAI7P,yCAAO,CAAC,CAAC;EACrB;EACA8P,OAAO,gBAAG,IAAI9P,yCAAO,CAAC,CAAC;EACvB;EACA+P,MAAM,gBAAG,IAAI/P,yCAAO,CAAC,CAAC;EACtB;EACAgQ,OAAO,gBAAG,IAAIhQ,yCAAO,CAAC,CAAC;EACvB;AACJ;AACA;AACA;EACIiQ,KAAK,GAAG,IAAI,CAACrC,WAAW;EACxB;EACAsC,IAAI;EACJ;AACJ;AACA;AACA;AACA;AACA;EACIC,iBAAiB;EACjBzT,WAAWA,CAACwG,OAAO,EAAEuJ,OAAO,EAAEtO,SAAS,EAAEuO,OAAO,EAAEC,cAAc,EAAEC,iBAAiB,EAAE3C,SAAS,EAAE;IAC5F,IAAI,CAACwC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACtO,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACuO,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAAC3C,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACmG,eAAe,CAAClN,OAAO,CAAC,CAACmN,UAAU,CAAC5D,OAAO,CAAC6D,aAAa,IAAI,IAAI,CAAC;IACvE,IAAI,CAAC3C,gBAAgB,GAAG,IAAI7I,qBAAqB,CAAC3G,SAAS,CAAC;IAC5DyO,iBAAiB,CAAC2D,gBAAgB,CAAC,IAAI,CAAC;EAC5C;EACA;AACJ;AACA;AACA;EACIC,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACvD,YAAY;EAC5B;EACA;EACAwD,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAAChH,YAAY;EAC5B;EACA;AACJ;AACA;AACA;EACIiH,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACC,UAAU,CAAC,CAAC,GAAG,IAAI,CAACH,qBAAqB,CAAC,CAAC,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;EACnF;EACA;EACAG,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAAC/B,QAAQ,GAAG+B,OAAO,CAAChQ,GAAG,CAAC4O,MAAM,IAAIhP,wDAAa,CAACgP,MAAM,CAAC,CAAC;IAC5D,IAAI,CAACX,QAAQ,CAACxJ,OAAO,CAACmK,MAAM,IAAInI,4BAA4B,CAACmI,MAAM,EAAE,IAAI,CAACH,QAAQ,CAAC,CAAC;IACpF,IAAI,CAACE,6BAA6B,CAAC,CAAC;IACpC;IACA;IACA;IACA;IACA,MAAMsB,eAAe,GAAG,IAAIvH,GAAG,CAAC,CAAC;IACjC,IAAI,CAACwF,gBAAgB,CAACzJ,OAAO,CAACmK,MAAM,IAAI;MACpC,IAAI,IAAI,CAACX,QAAQ,CAACxG,OAAO,CAACmH,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;QACpCqB,eAAe,CAAChG,GAAG,CAAC2E,MAAM,CAAC;MAC/B;IACJ,CAAC,CAAC;IACF,IAAI,CAACV,gBAAgB,GAAG+B,eAAe;IACvC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIC,mBAAmBA,CAACzF,QAAQ,EAAE;IAC1B,IAAI,CAAC1B,gBAAgB,GAAG0B,QAAQ;IAChC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACI0F,uBAAuBA,CAAC1F,QAAQ,EAAE;IAC9B,IAAI,CAACuD,oBAAoB,GAAGvD,QAAQ;IACpC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACI8E,eAAeA,CAACa,WAAW,EAAE;IACzB,MAAM/N,OAAO,GAAGzC,wDAAa,CAACwQ,WAAW,CAAC;IAC1C,IAAI/N,OAAO,KAAK,IAAI,CAACuG,YAAY,EAAE;MAC/B,IAAI,CAACyH,2BAA2B,CAAC,CAAC;MAClC,MAAMC,QAAQ,GAAG,IAAI,CAAClH,SAAS;MAC/B,IAAI,CAAC4C,oBAAoB,GAAG,IAAI,CAACH,OAAO,CAAC0E,iBAAiB,CAAC,MAAM,CAC7DD,QAAQ,CAACjG,MAAM,CAAChI,OAAO,EAAE,WAAW,EAAE,IAAI,CAACmO,YAAY,EAAEnF,0BAA0B,CAAC,EACpFiF,QAAQ,CAACjG,MAAM,CAAChI,OAAO,EAAE,YAAY,EAAE,IAAI,CAACmO,YAAY,EAAErF,2BAA2B,CAAC,EACtFmF,QAAQ,CAACjG,MAAM,CAAChI,OAAO,EAAE,WAAW,EAAE,IAAI,CAACoO,gBAAgB,EAAEpF,0BAA0B,CAAC,CAC3F,CAAC;MACF,IAAI,CAACnC,iBAAiB,GAAGwH,SAAS;MAClC,IAAI,CAAC9H,YAAY,GAAGvG,OAAO;IAC/B;IACA,IAAI,OAAOsO,UAAU,KAAK,WAAW,IAAI,IAAI,CAAC/H,YAAY,YAAY+H,UAAU,EAAE;MAC9E,IAAI,CAACxD,gBAAgB,GAAG,IAAI,CAACvE,YAAY,CAACgI,eAAe;IAC7D;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;EACIC,mBAAmBA,CAACC,eAAe,EAAE;IACjC,IAAI,CAAClD,gBAAgB,GAAGkD,eAAe,GAAGlR,wDAAa,CAACkR,eAAe,CAAC,GAAG,IAAI;IAC/E,IAAI,CAACrD,mBAAmB,CAACsD,WAAW,CAAC,CAAC;IACtC,IAAID,eAAe,EAAE;MACjB,IAAI,CAACrD,mBAAmB,GAAG,IAAI,CAAC3B,cAAc,CACzCzO,MAAM,CAAC,EAAE,CAAC,CACV2T,SAAS,CAAC,MAAM,IAAI,CAACC,8BAA8B,CAAC,CAAC,CAAC;IAC/D;IACA,OAAO,IAAI;EACf;EACA;EACAzB,UAAUA,CAAChG,MAAM,EAAE;IACf,IAAI,CAAC4E,cAAc,GAAG5E,MAAM;IAC5B,OAAO,IAAI;EACf;EACA;EACA0H,OAAOA,CAAA,EAAG;IACN,IAAI,CAACb,2BAA2B,CAAC,CAAC;IAClC;IACA;IACA,IAAI,IAAI,CAACP,UAAU,CAAC,CAAC,EAAE;MACnB;MACA;MACA,IAAI,CAAClH,YAAY,EAAEgB,MAAM,CAAC,CAAC;IAC/B;IACA,IAAI,CAAC0C,OAAO,EAAE1C,MAAM,CAAC,CAAC;IACtB,IAAI,CAACuH,eAAe,CAAC,CAAC;IACtB,IAAI,CAACC,mBAAmB,CAAC,CAAC;IAC1B,IAAI,CAACrF,iBAAiB,CAACsF,cAAc,CAAC,IAAI,CAAC;IAC3C,IAAI,CAACC,gBAAgB,CAAC,CAAC;IACvB,IAAI,CAACzC,aAAa,CAAC9Q,QAAQ,CAAC,CAAC;IAC7B,IAAI,CAAC+Q,OAAO,CAAC/Q,QAAQ,CAAC,CAAC;IACvB,IAAI,CAACgR,QAAQ,CAAChR,QAAQ,CAAC,CAAC;IACxB,IAAI,CAACiR,KAAK,CAACjR,QAAQ,CAAC,CAAC;IACrB,IAAI,CAACkR,OAAO,CAAClR,QAAQ,CAAC,CAAC;IACvB,IAAI,CAACmR,MAAM,CAACnR,QAAQ,CAAC,CAAC;IACtB,IAAI,CAACoR,OAAO,CAACpR,QAAQ,CAAC,CAAC;IACvB,IAAI,CAACgP,WAAW,CAAChP,QAAQ,CAAC,CAAC;IAC3B,IAAI,CAACkQ,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,gBAAgB,CAAC9J,KAAK,CAAC,CAAC;IAC7B,IAAI,CAAC+J,cAAc,GAAGuC,SAAS;IAC/B,IAAI,CAACjD,mBAAmB,CAACsD,WAAW,CAAC,CAAC;IACtC,IAAI,CAACjE,gBAAgB,CAAC1I,KAAK,CAAC,CAAC;IAC7B,IAAI,CAACwJ,gBAAgB,GACjB,IAAI,CAAChF,YAAY,GACb,IAAI,CAACuE,gBAAgB,GACjB,IAAI,CAACa,oBAAoB,GACrB,IAAI,CAACjF,gBAAgB,GACjB,IAAI,CAACuD,OAAO,GACR,IAAI,CAAC8B,cAAc,GACf,IAAI;EACpC;EACA;EACA0B,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACpD,mBAAmB,CAAC,CAAC,IAAI,IAAI,CAACX,iBAAiB,CAAC+D,UAAU,CAAC,IAAI,CAAC;EAChF;EACA;EACAyB,KAAKA,CAAA,EAAG;IACJ,IAAI,CAAC3I,YAAY,CAAChC,KAAK,CAACI,SAAS,GAAG,IAAI,CAACkC,iBAAiB,IAAI,EAAE;IAChE,IAAI,CAACuD,gBAAgB,GAAG;MAAE3J,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IACtC,IAAI,CAACyJ,iBAAiB,GAAG;MAAE1J,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;EAC3C;EACA;EACAyO,eAAeA,CAAA,EAAG;IACd;IACA;IACA,IAAI,CAAC5D,gBAAgB,IACjB,IAAI,CAAChF,YAAY;IACjB;IACA1F,mBAAmB,CAAC,IAAI,CAAC0K,gBAAgB,CAACrL,qBAAqB,CAAC,CAAC,EAAE,IAAI,CAACqG,YAAY,CAACrG,qBAAqB,CAAC,CAAC,CAAC,EAAE;MAC/G,MAAMY,UAAU,GAAG,IAAI,CAACyK,gBAAgB,CAACrL,qBAAqB,CAAC,CAAC;MAChE,MAAMa,SAAS,GAAG,IAAI,CAACwF,YAAY,CAACrG,qBAAqB,CAAC,CAAC;MAC3D,IAAIkP,OAAO,GAAG,CAAC;MACf,IAAIC,OAAO,GAAG,CAAC;MACf;MACA,IAAItO,SAAS,CAACT,IAAI,GAAGQ,UAAU,CAACR,IAAI,EAAE;QAClC8O,OAAO,GAAGtO,UAAU,CAACR,IAAI,GAAGS,SAAS,CAACT,IAAI;MAC9C,CAAC,MACI,IAAIS,SAAS,CAACX,KAAK,GAAGU,UAAU,CAACV,KAAK,EAAE;QACzCgP,OAAO,GAAGtO,UAAU,CAACV,KAAK,GAAGW,SAAS,CAACX,KAAK;MAChD;MACA;MACA,IAAIW,SAAS,CAACZ,GAAG,GAAGW,UAAU,CAACX,GAAG,EAAE;QAChCkP,OAAO,GAAGvO,UAAU,CAACX,GAAG,GAAGY,SAAS,CAACZ,GAAG;MAC5C,CAAC,MACI,IAAIY,SAAS,CAACV,MAAM,GAAGS,UAAU,CAACT,MAAM,EAAE;QAC3CgP,OAAO,GAAGvO,UAAU,CAACT,MAAM,GAAGU,SAAS,CAACV,MAAM;MAClD;MACA,MAAMiP,WAAW,GAAG,IAAI,CAAClF,gBAAgB,CAAC3J,CAAC;MAC3C,MAAM8O,UAAU,GAAG,IAAI,CAACnF,gBAAgB,CAAC1J,CAAC;MAC1C,IAAID,CAAC,GAAG6O,WAAW,GAAGF,OAAO;QAAE1O,CAAC,GAAG6O,UAAU,GAAGF,OAAO;MACvD,IAAI,CAAC9I,YAAY,CAAChC,KAAK,CAACI,SAAS,GAAGI,YAAY,CAACtE,CAAC,EAAEC,CAAC,CAAC;MACtD,IAAI,CAAC0J,gBAAgB,GAAG;QAAE3J,CAAC;QAAEC;MAAE,CAAC;MAChC,IAAI,CAACyJ,iBAAiB,GAAG;QAAE1J,CAAC;QAAEC;MAAE,CAAC;IACrC;EACJ;EACA;AACJ;AACA;AACA;EACI8O,aAAaA,CAACjD,MAAM,EAAE;IAClB,IAAI,CAAC,IAAI,CAACV,gBAAgB,CAAC3H,GAAG,CAACqI,MAAM,CAAC,IAAI,IAAI,CAACX,QAAQ,CAACxG,OAAO,CAACmH,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;MAC1E,IAAI,CAACV,gBAAgB,CAACjE,GAAG,CAAC2E,MAAM,CAAC;MACjCnI,4BAA4B,CAACmI,MAAM,EAAE,IAAI,CAAC;IAC9C;EACJ;EACA;AACJ;AACA;AACA;EACIkD,YAAYA,CAAClD,MAAM,EAAE;IACjB,IAAI,IAAI,CAACV,gBAAgB,CAAC3H,GAAG,CAACqI,MAAM,CAAC,EAAE;MACnC,IAAI,CAACV,gBAAgB,CAAC6D,MAAM,CAACnD,MAAM,CAAC;MACpCnI,4BAA4B,CAACmI,MAAM,EAAE,IAAI,CAACH,QAAQ,CAAC;IACvD;EACJ;EACA;EACAuD,aAAaA,CAACC,SAAS,EAAE;IACrB,IAAI,CAACpJ,UAAU,GAAGoJ,SAAS;IAC3B,OAAO,IAAI;EACf;EACA;EACAC,kBAAkBA,CAACC,SAAS,EAAE;IAC1B,IAAI,CAAChE,cAAc,GAAGgE,SAAS;EACnC;EACA;AACJ;AACA;EACIC,mBAAmBA,CAAA,EAAG;IAClB,MAAM/M,QAAQ,GAAG,IAAI,CAACyK,UAAU,CAAC,CAAC,GAAG,IAAI,CAACrD,gBAAgB,GAAG,IAAI,CAACD,iBAAiB;IACnF,OAAO;MAAE1J,CAAC,EAAEuC,QAAQ,CAACvC,CAAC;MAAEC,CAAC,EAAEsC,QAAQ,CAACtC;IAAE,CAAC;EAC3C;EACA;AACJ;AACA;AACA;EACIsP,mBAAmBA,CAACrY,KAAK,EAAE;IACvB,IAAI,CAACyS,gBAAgB,GAAG;MAAE3J,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IACtC,IAAI,CAACyJ,iBAAiB,CAAC1J,CAAC,GAAG9I,KAAK,CAAC8I,CAAC;IAClC,IAAI,CAAC0J,iBAAiB,CAACzJ,CAAC,GAAG/I,KAAK,CAAC+I,CAAC;IAClC,IAAI,CAAC,IAAI,CAACoL,cAAc,EAAE;MACtB,IAAI,CAACmE,0BAA0B,CAACtY,KAAK,CAAC8I,CAAC,EAAE9I,KAAK,CAAC+I,CAAC,CAAC;IACrD;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIwP,oBAAoBA,CAACvY,KAAK,EAAE;IACxB,IAAI,CAACkS,iBAAiB,GAAGlS,KAAK;IAC9B,OAAO,IAAI;EACf;EACA;EACAwY,4BAA4BA,CAAA,EAAG;IAC3B,MAAMnN,QAAQ,GAAG,IAAI,CAAC6H,yBAAyB;IAC/C,IAAI7H,QAAQ,IAAI,IAAI,CAAC8I,cAAc,EAAE;MACjC,IAAI,CAACsE,0BAA0B,CAAC,IAAI,CAACC,8BAA8B,CAACrN,QAAQ,CAAC,EAAEA,QAAQ,CAAC;IAC5F;EACJ;EACA;EACAiM,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAACjE,wBAAwB,CAAC0D,WAAW,CAAC,CAAC;IAC3C,IAAI,CAACxD,sBAAsB,CAACwD,WAAW,CAAC,CAAC;IACzC,IAAI,CAACvD,mBAAmB,CAACuD,WAAW,CAAC,CAAC;IACtC,IAAI,CAAC9E,6BAA6B,GAAG,CAAC;IACtC,IAAI,CAACA,6BAA6B,GAAGyE,SAAS;EAClD;EACA;EACAS,eAAeA,CAAA,EAAG;IACd,IAAI,CAAC7H,QAAQ,EAAEK,OAAO,CAAC,CAAC;IACxB,IAAI,CAACL,QAAQ,GAAG,IAAI;EACxB;EACA;EACA8H,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAAC7E,OAAO,EAAE3C,MAAM,CAAC,CAAC;IACtB,IAAI,CAACwC,YAAY,EAAExC,MAAM,CAAC,CAAC;IAC3B,IAAI,CAACuC,eAAe,EAAExC,OAAO,CAAC,CAAC;IAC/B,IAAI,CAACyC,YAAY,GAAG,IAAI,CAACG,OAAO,GAAG,IAAI,CAACJ,eAAe,GAAG,IAAI;EAClE;EACA;EACAqE,YAAY,GAAIvX,KAAK,IAAK;IACtB,IAAI,CAAC4V,aAAa,CAAC8D,IAAI,CAAC,CAAC;IACzB;IACA,IAAI,IAAI,CAAC1E,QAAQ,CAAC5M,MAAM,EAAE;MACtB,MAAMuR,YAAY,GAAG,IAAI,CAACC,gBAAgB,CAAC5Z,KAAK,CAAC;MACjD,IAAI2Z,YAAY,IAAI,CAAC,IAAI,CAAC1E,gBAAgB,CAAC3H,GAAG,CAACqM,YAAY,CAAC,IAAI,CAAC,IAAI,CAACnE,QAAQ,EAAE;QAC5E,IAAI,CAACqE,uBAAuB,CAACF,YAAY,EAAE3Z,KAAK,CAAC;MACrD;IACJ,CAAC,MACI,IAAI,CAAC,IAAI,CAACwV,QAAQ,EAAE;MACrB,IAAI,CAACqE,uBAAuB,CAAC,IAAI,CAAClK,YAAY,EAAE3P,KAAK,CAAC;IAC1D;EACJ,CAAC;EACD;EACA8Z,YAAY,GAAI9Z,KAAK,IAAK;IACtB,MAAM+Z,eAAe,GAAG,IAAI,CAACC,yBAAyB,CAACha,KAAK,CAAC;IAC7D,IAAI,CAAC,IAAI,CAACyT,mBAAmB,CAAC,CAAC,EAAE;MAC7B,MAAMwG,SAAS,GAAG7L,IAAI,CAAC8L,GAAG,CAACH,eAAe,CAAClQ,CAAC,GAAG,IAAI,CAACmG,qBAAqB,CAACnG,CAAC,CAAC;MAC5E,MAAMsQ,SAAS,GAAG/L,IAAI,CAAC8L,GAAG,CAACH,eAAe,CAACjQ,CAAC,GAAG,IAAI,CAACkG,qBAAqB,CAAClG,CAAC,CAAC;MAC5E,MAAMsQ,eAAe,GAAGH,SAAS,GAAGE,SAAS,IAAI,IAAI,CAACxH,OAAO,CAAC0H,kBAAkB;MAChF;MACA;MACA;MACA;MACA,IAAID,eAAe,EAAE;QACjB,MAAME,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC9F,cAAc,GAAG,IAAI,CAAC+F,kBAAkB,CAACza,KAAK,CAAC;QACzF,MAAMkZ,SAAS,GAAG,IAAI,CAAChE,cAAc;QACrC,IAAI,CAACoF,cAAc,EAAE;UACjB,IAAI,CAACI,gBAAgB,CAAC1a,KAAK,CAAC;UAC5B;QACJ;QACA;QACA;QACA;QACA,IAAI,CAACkZ,SAAS,IAAK,CAACA,SAAS,CAACrC,UAAU,CAAC,CAAC,IAAI,CAACqC,SAAS,CAACyB,WAAW,CAAC,CAAE,EAAE;UACrE;UACA;UACA,IAAI3a,KAAK,CAAC4a,UAAU,EAAE;YAClB5a,KAAK,CAAC6a,cAAc,CAAC,CAAC;UAC1B;UACA,IAAI,CAACpH,mBAAmB,CAAC7O,GAAG,CAAC,IAAI,CAAC;UAClC,IAAI,CAACgO,OAAO,CAACkI,GAAG,CAAC,MAAM,IAAI,CAACC,kBAAkB,CAAC/a,KAAK,CAAC,CAAC;QAC1D;MACJ;MACA;IACJ;IACA;IACA;IACA;IACA,IAAIA,KAAK,CAAC4a,UAAU,EAAE;MAClB5a,KAAK,CAAC6a,cAAc,CAAC,CAAC;IAC1B;IACA,MAAMG,0BAA0B,GAAG,IAAI,CAACvB,8BAA8B,CAACM,eAAe,CAAC;IACvF,IAAI,CAACrG,SAAS,GAAG,IAAI;IACrB,IAAI,CAACO,yBAAyB,GAAG8F,eAAe;IAChD,IAAI,CAACkB,4BAA4B,CAACD,0BAA0B,CAAC;IAC7D,IAAI,IAAI,CAAC9F,cAAc,EAAE;MACrB,IAAI,CAACsE,0BAA0B,CAACwB,0BAA0B,EAAEjB,eAAe,CAAC;IAChF,CAAC,MACI;MACD;MACA;MACA,MAAMmB,MAAM,GAAG,IAAI,CAAC7E,iBAAiB,GAAG,IAAI,CAACxG,eAAe,GAAG,IAAI,CAACG,qBAAqB;MACzF,MAAMmL,eAAe,GAAG,IAAI,CAAC3H,gBAAgB;MAC7C2H,eAAe,CAACtR,CAAC,GAAGmR,0BAA0B,CAACnR,CAAC,GAAGqR,MAAM,CAACrR,CAAC,GAAG,IAAI,CAAC0J,iBAAiB,CAAC1J,CAAC;MACtFsR,eAAe,CAACrR,CAAC,GAAGkR,0BAA0B,CAAClR,CAAC,GAAGoR,MAAM,CAACpR,CAAC,GAAG,IAAI,CAACyJ,iBAAiB,CAACzJ,CAAC;MACtF,IAAI,CAACuP,0BAA0B,CAAC8B,eAAe,CAACtR,CAAC,EAAEsR,eAAe,CAACrR,CAAC,CAAC;IACzE;IACA;IACA;IACA;IACA,IAAI,IAAI,CAACgK,WAAW,CAACsH,SAAS,CAAChT,MAAM,EAAE;MACnC,IAAI,CAACwK,OAAO,CAACkI,GAAG,CAAC,MAAM;QACnB,IAAI,CAAChH,WAAW,CAAC4F,IAAI,CAAC;UAClB7Q,MAAM,EAAE,IAAI;UACZkR,eAAe,EAAEiB,0BAA0B;UAC3Chb,KAAK;UACLqb,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAACN,0BAA0B,CAAC;UAC3DO,KAAK,EAAE,IAAI,CAACxH;QAChB,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ,CAAC;EACD;EACAyH,UAAU,GAAIxb,KAAK,IAAK;IACpB,IAAI,CAAC0a,gBAAgB,CAAC1a,KAAK,CAAC;EAChC,CAAC;EACD;AACJ;AACA;AACA;EACI0a,gBAAgBA,CAAC1a,KAAK,EAAE;IACpB;IACA;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAAC8S,iBAAiB,CAAC+D,UAAU,CAAC,IAAI,CAAC,EAAE;MAC1C;IACJ;IACA,IAAI,CAACwB,gBAAgB,CAAC,CAAC;IACvB,IAAI,CAACvF,iBAAiB,CAAC2I,YAAY,CAAC,IAAI,CAAC;IACzC,IAAI,CAAC/F,6BAA6B,CAAC,CAAC;IACpC,IAAI,IAAI,CAACV,QAAQ,EAAE;MACf,IAAI,CAACrF,YAAY,CAAChC,KAAK,CAAC+N,uBAAuB,GAC3C,IAAI,CAACvH,wBAAwB;IACrC;IACA,IAAI,CAAC,IAAI,CAACV,mBAAmB,CAAC,CAAC,EAAE;MAC7B;IACJ;IACA,IAAI,CAACqC,QAAQ,CAAC4D,IAAI,CAAC;MAAE7Q,MAAM,EAAE,IAAI;MAAE7I;IAAM,CAAC,CAAC;IAC3C,IAAI,IAAI,CAACkV,cAAc,EAAE;MACrB;MACA,IAAI,CAACA,cAAc,CAACyG,cAAc,CAAC,CAAC;MACpC,IAAI,CAACC,4BAA4B,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;QAC3C,IAAI,CAACC,qBAAqB,CAAC9b,KAAK,CAAC;QACjC,IAAI,CAAC+b,wBAAwB,CAAC,CAAC;QAC/B,IAAI,CAACjJ,iBAAiB,CAAC2I,YAAY,CAAC,IAAI,CAAC;MAC7C,CAAC,CAAC;IACN,CAAC,MACI;MACD;MACA;MACA;MACA,IAAI,CAAClI,iBAAiB,CAAC1J,CAAC,GAAG,IAAI,CAAC2J,gBAAgB,CAAC3J,CAAC;MAClD,MAAMkQ,eAAe,GAAG,IAAI,CAACC,yBAAyB,CAACha,KAAK,CAAC;MAC7D,IAAI,CAACuT,iBAAiB,CAACzJ,CAAC,GAAG,IAAI,CAAC0J,gBAAgB,CAAC1J,CAAC;MAClD,IAAI,CAAC8I,OAAO,CAACkI,GAAG,CAAC,MAAM;QACnB,IAAI,CAAC/E,KAAK,CAAC2D,IAAI,CAAC;UACZ7Q,MAAM,EAAE,IAAI;UACZwS,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAACvB,eAAe,CAAC;UAChDiC,SAAS,EAAEjC,eAAe;UAC1B/Z;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;MACF,IAAI,CAAC+b,wBAAwB,CAAC,CAAC;MAC/B,IAAI,CAACjJ,iBAAiB,CAAC2I,YAAY,CAAC,IAAI,CAAC;IAC7C;EACJ;EACA;EACAV,kBAAkBA,CAAC/a,KAAK,EAAE;IACtB,IAAIic,YAAY,CAACjc,KAAK,CAAC,EAAE;MACrB,IAAI,CAACyU,mBAAmB,GAAG8F,IAAI,CAACC,GAAG,CAAC,CAAC;IACzC;IACA,IAAI,CAAC9E,6BAA6B,CAAC,CAAC;IACpC;IACA,MAAMwG,UAAU,GAAG,IAAI,CAACxV,cAAc,CAAC,CAAC;IACxC,MAAMyV,aAAa,GAAG,IAAI,CAACjH,cAAc;IACzC,IAAIgH,UAAU,EAAE;MACZ;MACA;MACA,IAAI,CAACtJ,OAAO,CAAC0E,iBAAiB,CAAC,MAAM;QACjC,IAAI,CAACtE,6BAA6B,GAAG,IAAI,CAAC7C,SAAS,CAACiB,MAAM,CAAC8K,UAAU,EAAE,aAAa,EAAEE,oBAAoB,EAAE/J,6BAA6B,CAAC;MAC9I,CAAC,CAAC;IACN;IACA,IAAI8J,aAAa,EAAE;MACf,MAAM/S,OAAO,GAAG,IAAI,CAACuG,YAAY;MACjC,MAAMY,MAAM,GAAGnH,OAAO,CAACiT,UAAU;MACjC,MAAMC,WAAW,GAAI,IAAI,CAACnJ,YAAY,GAAG,IAAI,CAACoJ,yBAAyB,CAAC,CAAE;MAC1E,MAAMC,MAAM,GAAI,IAAI,CAACnJ,OAAO,GACxB,IAAI,CAACA,OAAO,IACR,IAAI,CAAChP,SAAS,CAACoY,aAAa,CAAC,OAAOpZ,SAAS,KAAK,WAAW,IAAIA,SAAS,GAAG,iBAAiB,GAAG,EAAE,CAAE;MAC7G;MACAkN,MAAM,CAACmM,YAAY,CAACF,MAAM,EAAEpT,OAAO,CAAC;MACpC;MACA;MACA,IAAI,CAAC6G,iBAAiB,GAAG7G,OAAO,CAACuE,KAAK,CAACI,SAAS,IAAI,EAAE;MACtD;MACA;MACA,IAAI,CAACsC,QAAQ,GAAG,IAAIX,UAAU,CAAC,IAAI,CAACrL,SAAS,EAAE,IAAI,CAACsL,YAAY,EAAE,IAAI,CAACC,UAAU,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAACC,gBAAgB,IAAI,IAAI,EAAE,IAAI,CAACwB,YAAY,IAAI,IAAI,EAAE,IAAI,CAACtB,qBAAqB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC0C,OAAO,CAACgK,MAAM,IAAI,IAAI,EAAE,IAAI,CAACxM,SAAS,CAAC;MACnQ,IAAI,CAACE,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACsM,yBAAyB,CAACrM,MAAM,EAAE2L,UAAU,CAAC,CAAC;MACxE;MACA;MACA;MACAtO,gBAAgB,CAACxE,OAAO,EAAE,KAAK,EAAEqJ,uBAAuB,CAAC;MACzD,IAAI,CAACpO,SAAS,CAACG,IAAI,CAACuI,WAAW,CAACwD,MAAM,CAACsM,YAAY,CAACP,WAAW,EAAElT,OAAO,CAAC,CAAC;MAC1E,IAAI,CAACyM,OAAO,CAAC6D,IAAI,CAAC;QAAE7Q,MAAM,EAAE,IAAI;QAAE7I;MAAM,CAAC,CAAC,CAAC,CAAC;MAC5Cmc,aAAa,CAACW,KAAK,CAAC,CAAC;MACrB,IAAI,CAACnJ,iBAAiB,GAAGwI,aAAa;MACtC,IAAI,CAACvI,aAAa,GAAGuI,aAAa,CAACY,YAAY,CAAC,IAAI,CAAC;IACzD,CAAC,MACI;MACD,IAAI,CAAClH,OAAO,CAAC6D,IAAI,CAAC;QAAE7Q,MAAM,EAAE,IAAI;QAAE7I;MAAM,CAAC,CAAC;MAC1C,IAAI,CAAC2T,iBAAiB,GAAG,IAAI,CAACC,aAAa,GAAG6D,SAAS;IAC3D;IACA;IACA;IACA,IAAI,CAAC5D,gBAAgB,CAACzI,KAAK,CAAC+Q,aAAa,GAAGA,aAAa,CAACa,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC;EAC1F;EACA;AACJ;AACA;AACA;AACA;AACA;EACInD,uBAAuBA,CAACoD,gBAAgB,EAAEjd,KAAK,EAAE;IAC7C;IACA;IACA,IAAI,IAAI,CAACmV,cAAc,EAAE;MACrBnV,KAAK,CAACkd,eAAe,CAAC,CAAC;IAC3B;IACA,MAAMrG,UAAU,GAAG,IAAI,CAACA,UAAU,CAAC,CAAC;IACpC,MAAMsG,eAAe,GAAGlB,YAAY,CAACjc,KAAK,CAAC;IAC3C,MAAMod,sBAAsB,GAAG,CAACD,eAAe,IAAInd,KAAK,CAACqd,MAAM,KAAK,CAAC;IACrE,MAAMlG,WAAW,GAAG,IAAI,CAACxH,YAAY;IACrC,MAAM/D,MAAM,GAAGnF,2DAAe,CAACzG,KAAK,CAAC;IACrC,MAAMsd,gBAAgB,GAAG,CAACH,eAAe,IACrC,IAAI,CAAC1I,mBAAmB,IACxB,IAAI,CAACA,mBAAmB,GAAGlC,uBAAuB,GAAGgI,IAAI,CAACC,GAAG,CAAC,CAAC;IACnE,MAAM+C,WAAW,GAAGJ,eAAe,GAC7Bhd,qEAAgC,CAACH,KAAK,CAAC,GACvCD,qEAA+B,CAACC,KAAK,CAAC;IAC5C;IACA;IACA;IACA;IACA;IACA;IACA,IAAI4L,MAAM,IAAIA,MAAM,CAAC4R,SAAS,IAAIxd,KAAK,CAAC8I,IAAI,KAAK,WAAW,EAAE;MAC1D9I,KAAK,CAAC6a,cAAc,CAAC,CAAC;IAC1B;IACA;IACA,IAAIhE,UAAU,IAAIuG,sBAAsB,IAAIE,gBAAgB,IAAIC,WAAW,EAAE;MACzE;IACJ;IACA;IACA;IACA;IACA,IAAI,IAAI,CAACvI,QAAQ,CAAC5M,MAAM,EAAE;MACtB,MAAMqV,UAAU,GAAGtG,WAAW,CAACxJ,KAAK;MACpC,IAAI,CAACwG,wBAAwB,GAAGsJ,UAAU,CAAC/B,uBAAuB,IAAI,EAAE;MACxE+B,UAAU,CAAC/B,uBAAuB,GAAG,aAAa;IACtD;IACA,IAAI,CAAChI,SAAS,GAAG,KAAK;IACtB,IAAI,CAACD,mBAAmB,CAAC7O,GAAG,CAAC,IAAI,CAAC8O,SAAS,CAAC;IAC5C;IACA;IACA,IAAI,CAAC2E,gBAAgB,CAAC,CAAC;IACvB,IAAI,CAACxI,eAAe,GAAG,IAAI,CAACF,YAAY,CAACrG,qBAAqB,CAAC,CAAC;IAChE,IAAI,CAAC8K,wBAAwB,GAAG,IAAI,CAACtB,iBAAiB,CAAC4K,WAAW,CAAC3F,SAAS,CAAC,IAAI,CAAC+B,YAAY,CAAC;IAC/F,IAAI,CAACxF,sBAAsB,GAAG,IAAI,CAACxB,iBAAiB,CAAC6K,SAAS,CAAC5F,SAAS,CAAC,IAAI,CAACyD,UAAU,CAAC;IACzF,IAAI,CAACjH,mBAAmB,GAAG,IAAI,CAACzB,iBAAiB,CAC5C8K,QAAQ,CAAC,IAAI,CAAClX,cAAc,CAAC,CAAC,CAAC,CAC/BqR,SAAS,CAAC8F,WAAW,IAAI,IAAI,CAACC,eAAe,CAACD,WAAW,CAAC,CAAC;IAChE,IAAI,IAAI,CAAClJ,gBAAgB,EAAE;MACvB,IAAI,CAACG,aAAa,GAAG3L,oBAAoB,CAAC,IAAI,CAACwL,gBAAgB,CAAC;IACpE;IACA;IACA;IACA;IACA,MAAMpD,eAAe,GAAG,IAAI,CAACzB,gBAAgB;IAC7C,IAAI,CAACsD,wBAAwB,GACzB7B,eAAe,IAAIA,eAAe,CAACC,QAAQ,IAAI,CAACD,eAAe,CAACI,SAAS,GACnE;MAAE9H,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC,GACd,IAAI,CAACiU,4BAA4B,CAAC,IAAI,CAAClO,eAAe,EAAEoN,gBAAgB,EAAEjd,KAAK,CAAC;IAC1F,MAAM+Z,eAAe,GAAI,IAAI,CAAC/J,qBAAqB,GAC/C,IAAI,CAACiE,yBAAyB,GAC1B,IAAI,CAAC+F,yBAAyB,CAACha,KAAK,CAAE;IAC9C,IAAI,CAAC+T,sBAAsB,GAAG;MAAElK,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IAC5C,IAAI,CAACkK,qCAAqC,GAAG;MAAEnK,CAAC,EAAEkQ,eAAe,CAAClQ,CAAC;MAAEC,CAAC,EAAEiQ,eAAe,CAACjQ;IAAE,CAAC;IAC3F,IAAI,CAAC4K,cAAc,GAAG6F,IAAI,CAACC,GAAG,CAAC,CAAC;IAChC,IAAI,CAAC1H,iBAAiB,CAACkL,aAAa,CAAC,IAAI,EAAEhe,KAAK,CAAC;EACrD;EACA;EACA8b,qBAAqBA,CAAC9b,KAAK,EAAE;IACzB;IACA;IACA;IACA;IACA4N,gBAAgB,CAAC,IAAI,CAAC+B,YAAY,EAAE,IAAI,EAAE8C,uBAAuB,CAAC;IAClE,IAAI,CAACY,OAAO,CAACgJ,UAAU,CAACQ,YAAY,CAAC,IAAI,CAAClN,YAAY,EAAE,IAAI,CAAC0D,OAAO,CAAC;IACrE,IAAI,CAAC6E,eAAe,CAAC,CAAC;IACtB,IAAI,CAACC,mBAAmB,CAAC,CAAC;IAC1B,IAAI,CAACtI,eAAe,GAChB,IAAI,CAACiF,aAAa,GACd,IAAI,CAACD,YAAY,GACb,IAAI,CAAC5E,iBAAiB,GAClBwH,SAAS;IACzB;IACA,IAAI,CAAC7E,OAAO,CAACkI,GAAG,CAAC,MAAM;MACnB,MAAM5B,SAAS,GAAG,IAAI,CAAChE,cAAc;MACrC,MAAM+I,YAAY,GAAG/E,SAAS,CAAC6D,YAAY,CAAC,IAAI,CAAC;MACjD,MAAMhD,eAAe,GAAG,IAAI,CAACC,yBAAyB,CAACha,KAAK,CAAC;MAC7D,MAAMqb,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAACvB,eAAe,CAAC;MACvD,MAAMmE,sBAAsB,GAAGhF,SAAS,CAACiF,gBAAgB,CAACpE,eAAe,CAAClQ,CAAC,EAAEkQ,eAAe,CAACjQ,CAAC,CAAC;MAC/F,IAAI,CAACiM,KAAK,CAAC2D,IAAI,CAAC;QAAE7Q,MAAM,EAAE,IAAI;QAAEwS,QAAQ;QAAEW,SAAS,EAAEjC,eAAe;QAAE/Z;MAAM,CAAC,CAAC;MAC9E,IAAI,CAACkW,OAAO,CAACwD,IAAI,CAAC;QACd0E,IAAI,EAAE,IAAI;QACVH,YAAY;QACZI,aAAa,EAAE,IAAI,CAACzK,aAAa;QACjCsF,SAAS,EAAEA,SAAS;QACpBoF,iBAAiB,EAAE,IAAI,CAAC3K,iBAAiB;QACzCuK,sBAAsB;QACtB7C,QAAQ;QACRW,SAAS,EAAEjC,eAAe;QAC1B/Z;MACJ,CAAC,CAAC;MACFkZ,SAAS,CAACqF,IAAI,CAAC,IAAI,EAAEN,YAAY,EAAE,IAAI,CAACrK,aAAa,EAAE,IAAI,CAACD,iBAAiB,EAAEuK,sBAAsB,EAAE7C,QAAQ,EAAEtB,eAAe,EAAE/Z,KAAK,CAAC;MACxI,IAAI,CAACkV,cAAc,GAAG,IAAI,CAACvB,iBAAiB;IAChD,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACI6F,0BAA0BA,CAAC;IAAE3P,CAAC;IAAEC;EAAE,CAAC,EAAE;IAAED,CAAC,EAAE2U,IAAI;IAAE1U,CAAC,EAAE2U;EAAK,CAAC,EAAE;IACvD;IACA,IAAIC,YAAY,GAAG,IAAI,CAAC/K,iBAAiB,CAACgL,gCAAgC,CAAC,IAAI,EAAE9U,CAAC,EAAEC,CAAC,CAAC;IACtF;IACA;IACA;IACA;IACA,IAAI,CAAC4U,YAAY,IACb,IAAI,CAACxJ,cAAc,KAAK,IAAI,CAACvB,iBAAiB,IAC9C,IAAI,CAACA,iBAAiB,CAACwK,gBAAgB,CAACtU,CAAC,EAAEC,CAAC,CAAC,EAAE;MAC/C4U,YAAY,GAAG,IAAI,CAAC/K,iBAAiB;IACzC;IACA,IAAI+K,YAAY,IAAIA,YAAY,KAAK,IAAI,CAACxJ,cAAc,EAAE;MACtD,IAAI,CAACtC,OAAO,CAACkI,GAAG,CAAC,MAAM;QACnB,MAAM8D,SAAS,GAAG,IAAI,CAAC1J,cAAc,CAAC6H,YAAY,CAAC,IAAI,CAAC;QACxD,MAAM8B,eAAe,GAAG,IAAI,CAAC3J,cAAc,CAAC4J,cAAc,CAACF,SAAS,GAAG,CAAC,CAAC,EAAEhI,iBAAiB,CAAC,CAAC,IAAI,IAAI;QACtG;QACA,IAAI,CAACX,MAAM,CAACyD,IAAI,CAAC;UAAE0E,IAAI,EAAE,IAAI;UAAElF,SAAS,EAAE,IAAI,CAAChE;QAAe,CAAC,CAAC;QAChE,IAAI,CAACA,cAAc,CAAC6J,IAAI,CAAC,IAAI,CAAC;QAC9B,IAAI,CAACC,0BAA0B,CAACN,YAAY,EAAE,IAAI,CAACxJ,cAAc,EAAE2J,eAAe,CAAC;QACnF;QACA,IAAI,CAAC3J,cAAc,GAAGwJ,YAAY;QAClC,IAAI,CAACxJ,cAAc,CAAC+J,KAAK,CAAC,IAAI,EAAEpV,CAAC,EAAEC,CAAC;QACpC;QACA;QACA4U,YAAY,KAAK,IAAI,CAAC/K,iBAAiB,IAAI+K,YAAY,CAACQ,eAAe,GACjE,IAAI,CAACtL,aAAa,GAClB6D,SAAS,CAAC;QAChB,IAAI,CAACzB,OAAO,CAAC0D,IAAI,CAAC;UACd0E,IAAI,EAAE,IAAI;UACVlF,SAAS,EAAEwF,YAAY;UACvBT,YAAY,EAAES,YAAY,CAAC3B,YAAY,CAAC,IAAI;QAChD,CAAC,CAAC;MACN,CAAC,CAAC;IACN;IACA;IACA,IAAI,IAAI,CAAClG,UAAU,CAAC,CAAC,EAAE;MACnB,IAAI,CAAC3B,cAAc,CAACiK,0BAA0B,CAACX,IAAI,EAAEC,IAAI,CAAC;MAC1D,IAAI,CAACvJ,cAAc,CAACkK,SAAS,CAAC,IAAI,EAAEvV,CAAC,EAAEC,CAAC,EAAE,IAAI,CAACiK,sBAAsB,CAAC;MACtE,IAAI,IAAI,CAACsC,iBAAiB,EAAE;QACxB,IAAI,CAACgJ,sBAAsB,CAACxV,CAAC,EAAEC,CAAC,CAAC;MACrC,CAAC,MACI;QACD,IAAI,CAACuV,sBAAsB,CAACxV,CAAC,GAAG,IAAI,CAACuJ,wBAAwB,CAACvJ,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACsJ,wBAAwB,CAACtJ,CAAC,CAAC;MACzG;IACJ;EACJ;EACA;AACJ;AACA;AACA;EACI8R,4BAA4BA,CAAA,EAAG;IAC3B;IACA,IAAI,CAAC,IAAI,CAAClI,SAAS,EAAE;MACjB,OAAO4L,OAAO,CAACC,OAAO,CAAC,CAAC;IAC5B;IACA,MAAMC,eAAe,GAAG,IAAI,CAACrM,YAAY,CAAC7J,qBAAqB,CAAC,CAAC;IACjE;IACA,IAAI,CAAC+G,QAAQ,CAACQ,QAAQ,CAAC,oBAAoB,CAAC;IAC5C;IACA,IAAI,CAACwO,sBAAsB,CAACG,eAAe,CAAC9V,IAAI,EAAE8V,eAAe,CAACjW,GAAG,CAAC;IACtE;IACA;IACA;IACA;IACA,MAAMkW,QAAQ,GAAG,IAAI,CAACpP,QAAQ,CAACY,qBAAqB,CAAC,CAAC;IACtD,IAAIwO,QAAQ,KAAK,CAAC,EAAE;MAChB,OAAOH,OAAO,CAACC,OAAO,CAAC,CAAC;IAC5B;IACA,OAAO,IAAI,CAAC3M,OAAO,CAAC0E,iBAAiB,CAAC,MAAM;MACxC,OAAO,IAAIgI,OAAO,CAACC,OAAO,IAAI;QAC1B,MAAMpO,OAAO,GAAInR,KAAK,IAAK;UACvB,IAAI,CAACA,KAAK,IACL,IAAI,CAACqQ,QAAQ,IACV5J,2DAAe,CAACzG,KAAK,CAAC,KAAK,IAAI,CAACqQ,QAAQ,CAACjH,OAAO,IAChDpJ,KAAK,CAAC0f,YAAY,KAAK,WAAY,EAAE;YACzCC,eAAe,CAAC,CAAC;YACjBJ,OAAO,CAAC,CAAC;YACTK,YAAY,CAACC,OAAO,CAAC;UACzB;QACJ,CAAC;QACD;QACA;QACA;QACA,MAAMA,OAAO,GAAGC,UAAU,CAAC3O,OAAO,EAAEsO,QAAQ,GAAG,GAAG,CAAC;QACnD,MAAME,eAAe,GAAG,IAAI,CAACtP,QAAQ,CAACa,gBAAgB,CAAC,eAAe,EAAEC,OAAO,CAAC;MACpF,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA;EACAoL,yBAAyBA,CAAA,EAAG;IACxB,MAAMwD,iBAAiB,GAAG,IAAI,CAAChL,oBAAoB;IACnD,MAAMiL,mBAAmB,GAAGD,iBAAiB,GAAGA,iBAAiB,CAACvO,QAAQ,GAAG,IAAI;IACjF,IAAI8K,WAAW;IACf,IAAI0D,mBAAmB,EAAE;MACrB,IAAI,CAAC9M,eAAe,GAAG6M,iBAAiB,CAACnO,aAAa,CAACC,kBAAkB,CAACmO,mBAAmB,EAAED,iBAAiB,CAAC/W,OAAO,CAAC;MACzH,IAAI,CAACkK,eAAe,CAACpB,aAAa,CAAC,CAAC;MACpCwK,WAAW,GAAG9P,WAAW,CAAC,IAAI,CAAC0G,eAAe,EAAE,IAAI,CAAC7O,SAAS,CAAC;IACnE,CAAC,MACI;MACDiY,WAAW,GAAG1U,aAAa,CAAC,IAAI,CAAC+H,YAAY,CAAC;IAClD;IACA;IACA;IACA2M,WAAW,CAAC3O,KAAK,CAACsS,aAAa,GAAG,MAAM;IACxC3D,WAAW,CAACvL,SAAS,CAACC,GAAG,CAACwB,iBAAiB,CAAC;IAC5C,OAAO8J,WAAW;EACtB;EACA;AACJ;AACA;AACA;AACA;EACIyB,4BAA4BA,CAACmC,WAAW,EAAEjD,gBAAgB,EAAEjd,KAAK,EAAE;IAC/D,MAAMmgB,aAAa,GAAGlD,gBAAgB,KAAK,IAAI,CAACtN,YAAY,GAAG,IAAI,GAAGsN,gBAAgB;IACtF,MAAMmD,aAAa,GAAGD,aAAa,GAAGA,aAAa,CAAC7W,qBAAqB,CAAC,CAAC,GAAG4W,WAAW;IACzF,MAAMG,KAAK,GAAGpE,YAAY,CAACjc,KAAK,CAAC,GAAGA,KAAK,CAACsgB,aAAa,CAAC,CAAC,CAAC,GAAGtgB,KAAK;IAClE,MAAMsL,cAAc,GAAG,IAAI,CAACiV,0BAA0B,CAAC,CAAC;IACxD,MAAM1W,CAAC,GAAGwW,KAAK,CAACG,KAAK,GAAGJ,aAAa,CAAC1W,IAAI,GAAG4B,cAAc,CAAC5B,IAAI;IAChE,MAAMI,CAAC,GAAGuW,KAAK,CAACI,KAAK,GAAGL,aAAa,CAAC7W,GAAG,GAAG+B,cAAc,CAAC/B,GAAG;IAC9D,OAAO;MACHM,CAAC,EAAEuW,aAAa,CAAC1W,IAAI,GAAGwW,WAAW,CAACxW,IAAI,GAAGG,CAAC;MAC5CC,CAAC,EAAEsW,aAAa,CAAC7W,GAAG,GAAG2W,WAAW,CAAC3W,GAAG,GAAGO;IAC7C,CAAC;EACL;EACA;EACAkQ,yBAAyBA,CAACha,KAAK,EAAE;IAC7B,MAAMsL,cAAc,GAAG,IAAI,CAACiV,0BAA0B,CAAC,CAAC;IACxD,MAAMF,KAAK,GAAGpE,YAAY,CAACjc,KAAK,CAAC;IAC3B;IACE;IACA;IACA;IACA;IACA;IACA;IACAA,KAAK,CAACK,OAAO,CAAC,CAAC,CAAC,IAAIL,KAAK,CAACM,cAAc,CAAC,CAAC,CAAC,IAAI;MAAEkgB,KAAK,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAE,CAAC,GACvEzgB,KAAK;IACX,MAAM6J,CAAC,GAAGwW,KAAK,CAACG,KAAK,GAAGlV,cAAc,CAAC5B,IAAI;IAC3C,MAAMI,CAAC,GAAGuW,KAAK,CAACI,KAAK,GAAGnV,cAAc,CAAC/B,GAAG;IAC1C;IACA;IACA,IAAI,IAAI,CAAC2K,gBAAgB,EAAE;MACvB,MAAMwM,SAAS,GAAG,IAAI,CAACxM,gBAAgB,CAACyM,YAAY,CAAC,CAAC;MACtD,IAAID,SAAS,EAAE;QACX,MAAME,QAAQ,GAAG,IAAI,CAAC1M,gBAAgB,CAAC2M,cAAc,CAAC,CAAC;QACvDD,QAAQ,CAAC/W,CAAC,GAAGA,CAAC;QACd+W,QAAQ,CAAC9W,CAAC,GAAGA,CAAC;QACd,OAAO8W,QAAQ,CAACE,eAAe,CAACJ,SAAS,CAACK,OAAO,CAAC,CAAC,CAAC;MACxD;IACJ;IACA,OAAO;MAAElX,CAAC;MAAEC;IAAE,CAAC;EACnB;EACA;EACA2P,8BAA8BA,CAAC4G,KAAK,EAAE;IAClC,MAAMW,iBAAiB,GAAG,IAAI,CAAC9L,cAAc,GAAG,IAAI,CAACA,cAAc,CAACG,QAAQ,GAAG,IAAI;IACnF,IAAI;MAAExL,CAAC;MAAEC;IAAE,CAAC,GAAG,IAAI,CAACuM,iBAAiB,GAC/B,IAAI,CAACA,iBAAiB,CAACgK,KAAK,EAAE,IAAI,EAAE,IAAI,CAACxQ,eAAe,EAAE,IAAI,CAACuD,wBAAwB,CAAC,GACxFiN,KAAK;IACX,IAAI,IAAI,CAAChL,QAAQ,KAAK,GAAG,IAAI2L,iBAAiB,KAAK,GAAG,EAAE;MACpDlX,CAAC,GACG,IAAI,CAACkG,qBAAqB,CAAClG,CAAC,IACvB,IAAI,CAACuM,iBAAiB,GAAG,IAAI,CAACjD,wBAAwB,CAACtJ,CAAC,GAAG,CAAC,CAAC;IAC1E,CAAC,MACI,IAAI,IAAI,CAACuL,QAAQ,KAAK,GAAG,IAAI2L,iBAAiB,KAAK,GAAG,EAAE;MACzDnX,CAAC,GACG,IAAI,CAACmG,qBAAqB,CAACnG,CAAC,IACvB,IAAI,CAACwM,iBAAiB,GAAG,IAAI,CAACjD,wBAAwB,CAACvJ,CAAC,GAAG,CAAC,CAAC;IAC1E;IACA,IAAI,IAAI,CAACiL,aAAa,EAAE;MACpB;MACA;MACA,MAAM;QAAEjL,CAAC,EAAEoX,OAAO;QAAEnX,CAAC,EAAEoX;MAAQ,CAAC,GAAG,CAAC,IAAI,CAAC7K,iBAAiB,GACpD,IAAI,CAACjD,wBAAwB,GAC7B;QAAEvJ,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAE,CAAC;MACpB,MAAMqX,YAAY,GAAG,IAAI,CAACrM,aAAa;MACvC,MAAM;QAAEnL,KAAK,EAAEyX,YAAY;QAAExX,MAAM,EAAEyX;MAAc,CAAC,GAAG,IAAI,CAACC,eAAe,CAAC,CAAC;MAC7E,MAAMC,IAAI,GAAGJ,YAAY,CAAC5X,GAAG,GAAG2X,OAAO;MACvC,MAAMM,IAAI,GAAGL,YAAY,CAAC1X,MAAM,IAAI4X,aAAa,GAAGH,OAAO,CAAC;MAC5D,MAAMO,IAAI,GAAGN,YAAY,CAACzX,IAAI,GAAGuX,OAAO;MACxC,MAAMS,IAAI,GAAGP,YAAY,CAAC3X,KAAK,IAAI4X,YAAY,GAAGH,OAAO,CAAC;MAC1DpX,CAAC,GAAG8X,OAAO,CAAC9X,CAAC,EAAE4X,IAAI,EAAEC,IAAI,CAAC;MAC1B5X,CAAC,GAAG6X,OAAO,CAAC7X,CAAC,EAAEyX,IAAI,EAAEC,IAAI,CAAC;IAC9B;IACA,OAAO;MAAE3X,CAAC;MAAEC;IAAE,CAAC;EACnB;EACA;EACAmR,4BAA4BA,CAAC2G,qBAAqB,EAAE;IAChD,MAAM;MAAE/X,CAAC;MAAEC;IAAE,CAAC,GAAG8X,qBAAqB;IACtC,MAAMrG,KAAK,GAAG,IAAI,CAACxH,sBAAsB;IACzC,MAAM8N,uBAAuB,GAAG,IAAI,CAAC7N,qCAAqC;IAC1E;IACA,MAAM8N,OAAO,GAAG1T,IAAI,CAAC8L,GAAG,CAACrQ,CAAC,GAAGgY,uBAAuB,CAAChY,CAAC,CAAC;IACvD,MAAMkY,OAAO,GAAG3T,IAAI,CAAC8L,GAAG,CAACpQ,CAAC,GAAG+X,uBAAuB,CAAC/X,CAAC,CAAC;IACvD;IACA;IACA;IACA;IACA,IAAIgY,OAAO,GAAG,IAAI,CAACnP,OAAO,CAACqP,+BAA+B,EAAE;MACxDzG,KAAK,CAAC1R,CAAC,GAAGA,CAAC,GAAGgY,uBAAuB,CAAChY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAChDgY,uBAAuB,CAAChY,CAAC,GAAGA,CAAC;IACjC;IACA,IAAIkY,OAAO,GAAG,IAAI,CAACpP,OAAO,CAACqP,+BAA+B,EAAE;MACxDzG,KAAK,CAACzR,CAAC,GAAGA,CAAC,GAAG+X,uBAAuB,CAAC/X,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAChD+X,uBAAuB,CAAC/X,CAAC,GAAGA,CAAC;IACjC;IACA,OAAOyR,KAAK;EAChB;EACA;EACA7F,6BAA6BA,CAAA,EAAG;IAC5B,IAAI,CAAC,IAAI,CAAC/F,YAAY,IAAI,CAAC,IAAI,CAACqF,QAAQ,EAAE;MACtC;IACJ;IACA,MAAMiN,YAAY,GAAG,IAAI,CAACjN,QAAQ,CAAC5M,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAACyO,UAAU,CAAC,CAAC;IACnE,IAAIoL,YAAY,KAAK,IAAI,CAACrN,0BAA0B,EAAE;MAClD,IAAI,CAACA,0BAA0B,GAAGqN,YAAY;MAC9CzU,4BAA4B,CAAC,IAAI,CAACmC,YAAY,EAAEsS,YAAY,CAAC;IACjE;EACJ;EACA;EACA7K,2BAA2BA,CAAA,EAAG;IAC1B,IAAI,CAACrE,oBAAoB,EAAEvH,OAAO,CAAC0W,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;IACxD,IAAI,CAACnP,oBAAoB,GAAG0E,SAAS;EACzC;EACA;AACJ;AACA;AACA;AACA;EACI4B,0BAA0BA,CAACxP,CAAC,EAAEC,CAAC,EAAE;IAC7B,MAAMyL,KAAK,GAAG,CAAC,GAAG,IAAI,CAACA,KAAK;IAC5B,MAAMxH,SAAS,GAAGI,YAAY,CAACtE,CAAC,GAAG0L,KAAK,EAAEzL,CAAC,GAAGyL,KAAK,CAAC;IACpD,MAAM4M,MAAM,GAAG,IAAI,CAACxS,YAAY,CAAChC,KAAK;IACtC;IACA;IACA;IACA,IAAI,IAAI,CAACsC,iBAAiB,IAAI,IAAI,EAAE;MAChC,IAAI,CAACA,iBAAiB,GAClBkS,MAAM,CAACpU,SAAS,IAAIoU,MAAM,CAACpU,SAAS,IAAI,MAAM,GAAGoU,MAAM,CAACpU,SAAS,GAAG,EAAE;IAC9E;IACA;IACA;IACA;IACAoU,MAAM,CAACpU,SAAS,GAAGD,iBAAiB,CAACC,SAAS,EAAE,IAAI,CAACkC,iBAAiB,CAAC;EAC3E;EACA;AACJ;AACA;AACA;AACA;EACIoP,sBAAsBA,CAACxV,CAAC,EAAEC,CAAC,EAAE;IACzB;IACA;IACA,MAAMkE,gBAAgB,GAAG,IAAI,CAAC8B,gBAAgB,EAAE0B,QAAQ,GAAGiG,SAAS,GAAG,IAAI,CAACxH,iBAAiB;IAC7F,MAAMlC,SAAS,GAAGI,YAAY,CAACtE,CAAC,EAAEC,CAAC,CAAC;IACpC,IAAI,CAACuG,QAAQ,CAACO,YAAY,CAAC9C,iBAAiB,CAACC,SAAS,EAAEC,gBAAgB,CAAC,CAAC;EAC9E;EACA;AACJ;AACA;AACA;EACIsN,gBAAgBA,CAAC8G,eAAe,EAAE;IAC9B,MAAMC,cAAc,GAAG,IAAI,CAACrS,qBAAqB;IACjD,IAAIqS,cAAc,EAAE;MAChB,OAAO;QAAExY,CAAC,EAAEuY,eAAe,CAACvY,CAAC,GAAGwY,cAAc,CAACxY,CAAC;QAAEC,CAAC,EAAEsY,eAAe,CAACtY,CAAC,GAAGuY,cAAc,CAACvY;MAAE,CAAC;IAC/F;IACA,OAAO;MAAED,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;EACzB;EACA;EACAiS,wBAAwBA,CAAA,EAAG;IACvB,IAAI,CAACjH,aAAa,GAAG,IAAI,CAACD,YAAY,GAAG4C,SAAS;IAClD,IAAI,CAAC5D,gBAAgB,CAAC1I,KAAK,CAAC,CAAC;EACjC;EACA;AACJ;AACA;AACA;EACI6M,8BAA8BA,CAAA,EAAG;IAC7B,IAAI;MAAEnO,CAAC;MAAEC;IAAE,CAAC,GAAG,IAAI,CAACyJ,iBAAiB;IACrC,IAAK1J,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAC,IAAK,IAAI,CAAC+M,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAClC,gBAAgB,EAAE;MACrE;IACJ;IACA;IACA,MAAMuL,WAAW,GAAG,IAAI,CAACvQ,YAAY,CAACrG,qBAAqB,CAAC,CAAC;IAC7D,MAAM6X,YAAY,GAAG,IAAI,CAACxM,gBAAgB,CAACrL,qBAAqB,CAAC,CAAC;IAClE;IACA;IACA,IAAK6X,YAAY,CAACxX,KAAK,KAAK,CAAC,IAAIwX,YAAY,CAACvX,MAAM,KAAK,CAAC,IACrDsW,WAAW,CAACvW,KAAK,KAAK,CAAC,IAAIuW,WAAW,CAACtW,MAAM,KAAK,CAAE,EAAE;MACvD;IACJ;IACA,MAAM0Y,YAAY,GAAGnB,YAAY,CAACzX,IAAI,GAAGwW,WAAW,CAACxW,IAAI;IACzD,MAAM6Y,aAAa,GAAGrC,WAAW,CAAC1W,KAAK,GAAG2X,YAAY,CAAC3X,KAAK;IAC5D,MAAMgZ,WAAW,GAAGrB,YAAY,CAAC5X,GAAG,GAAG2W,WAAW,CAAC3W,GAAG;IACtD,MAAMkZ,cAAc,GAAGvC,WAAW,CAACzW,MAAM,GAAG0X,YAAY,CAAC1X,MAAM;IAC/D;IACA;IACA,IAAI0X,YAAY,CAACxX,KAAK,GAAGuW,WAAW,CAACvW,KAAK,EAAE;MACxC,IAAI2Y,YAAY,GAAG,CAAC,EAAE;QAClBzY,CAAC,IAAIyY,YAAY;MACrB;MACA,IAAIC,aAAa,GAAG,CAAC,EAAE;QACnB1Y,CAAC,IAAI0Y,aAAa;MACtB;IACJ,CAAC,MACI;MACD1Y,CAAC,GAAG,CAAC;IACT;IACA;IACA;IACA,IAAIsX,YAAY,CAACvX,MAAM,GAAGsW,WAAW,CAACtW,MAAM,EAAE;MAC1C,IAAI4Y,WAAW,GAAG,CAAC,EAAE;QACjB1Y,CAAC,IAAI0Y,WAAW;MACpB;MACA,IAAIC,cAAc,GAAG,CAAC,EAAE;QACpB3Y,CAAC,IAAI2Y,cAAc;MACvB;IACJ,CAAC,MACI;MACD3Y,CAAC,GAAG,CAAC;IACT;IACA,IAAID,CAAC,KAAK,IAAI,CAAC0J,iBAAiB,CAAC1J,CAAC,IAAIC,CAAC,KAAK,IAAI,CAACyJ,iBAAiB,CAACzJ,CAAC,EAAE;MAClE,IAAI,CAACsP,mBAAmB,CAAC;QAAEtP,CAAC;QAAED;MAAE,CAAC,CAAC;IACtC;EACJ;EACA;EACA4Q,kBAAkBA,CAACza,KAAK,EAAE;IACtB,MAAMe,KAAK,GAAG,IAAI,CAACuU,cAAc;IACjC,IAAI,OAAOvU,KAAK,KAAK,QAAQ,EAAE;MAC3B,OAAOA,KAAK;IAChB,CAAC,MACI,IAAIkb,YAAY,CAACjc,KAAK,CAAC,EAAE;MAC1B,OAAOe,KAAK,CAACX,KAAK;IACtB;IACA,OAAOW,KAAK,GAAGA,KAAK,CAAC2hB,KAAK,GAAG,CAAC;EAClC;EACA;EACA5E,eAAeA,CAAC9d,KAAK,EAAE;IACnB,MAAM2iB,gBAAgB,GAAG,IAAI,CAAC9O,gBAAgB,CAAClI,YAAY,CAAC3L,KAAK,CAAC;IAClE,IAAI2iB,gBAAgB,EAAE;MAClB,MAAM/W,MAAM,GAAGnF,2DAAe,CAACzG,KAAK,CAAC;MACrC;MACA;MACA,IAAI,IAAI,CAAC8U,aAAa,IAClBlJ,MAAM,KAAK,IAAI,CAAC+I,gBAAgB,IAChC/I,MAAM,CAACS,QAAQ,CAAC,IAAI,CAACsI,gBAAgB,CAAC,EAAE;QACxCnK,aAAa,CAAC,IAAI,CAACsK,aAAa,EAAE6N,gBAAgB,CAACpZ,GAAG,EAAEoZ,gBAAgB,CAACjZ,IAAI,CAAC;MAClF;MACA,IAAI,CAACsG,qBAAqB,CAACnG,CAAC,IAAI8Y,gBAAgB,CAACjZ,IAAI;MACrD,IAAI,CAACsG,qBAAqB,CAAClG,CAAC,IAAI6Y,gBAAgB,CAACpZ,GAAG;MACpD;MACA;MACA,IAAI,CAAC,IAAI,CAAC2L,cAAc,EAAE;QACtB,IAAI,CAAC1B,gBAAgB,CAAC3J,CAAC,IAAI8Y,gBAAgB,CAACjZ,IAAI;QAChD,IAAI,CAAC8J,gBAAgB,CAAC1J,CAAC,IAAI6Y,gBAAgB,CAACpZ,GAAG;QAC/C,IAAI,CAAC8P,0BAA0B,CAAC,IAAI,CAAC7F,gBAAgB,CAAC3J,CAAC,EAAE,IAAI,CAAC2J,gBAAgB,CAAC1J,CAAC,CAAC;MACrF;IACJ;EACJ;EACA;EACAyW,0BAA0BA,CAAA,EAAG;IACzB,OAAQ,IAAI,CAAC1M,gBAAgB,CAAC5I,SAAS,CAACa,GAAG,CAAC,IAAI,CAACzH,SAAS,CAAC,EAAEiH,cAAc,IACvE,IAAI,CAACuI,gBAAgB,CAACtI,yBAAyB,CAAC,CAAC;EACzD;EACA;AACJ;AACA;AACA;AACA;AACA;EACI7E,cAAcA,CAAA,EAAG;IACb,IAAI,IAAI,CAAC0O,iBAAiB,KAAKqC,SAAS,EAAE;MACtC,IAAI,CAACrC,iBAAiB,GAAG1O,2DAAc,CAAC,IAAI,CAACiJ,YAAY,CAAC;IAC9D;IACA,OAAO,IAAI,CAACyF,iBAAiB;EACjC;EACA;EACAwH,yBAAyBA,CAACgG,aAAa,EAAE1G,UAAU,EAAE;IACjD,MAAM2G,gBAAgB,GAAG,IAAI,CAAC5P,iBAAiB,IAAI,QAAQ;IAC3D,IAAI4P,gBAAgB,KAAK,QAAQ,EAAE;MAC/B,OAAOD,aAAa;IACxB;IACA,IAAIC,gBAAgB,KAAK,QAAQ,EAAE;MAC/B,MAAMC,WAAW,GAAG,IAAI,CAACze,SAAS;MAClC;MACA;MACA;MACA,OAAQ6X,UAAU,IACd4G,WAAW,CAACC,iBAAiB,IAC7BD,WAAW,CAACE,uBAAuB,IACnCF,WAAW,CAACG,oBAAoB,IAChCH,WAAW,CAACI,mBAAmB,IAC/BJ,WAAW,CAACte,IAAI;IACxB;IACA,OAAOmC,wDAAa,CAACkc,gBAAgB,CAAC;EAC1C;EACA;EACAvB,eAAeA,CAAA,EAAG;IACd;IACA;IACA,IAAI,CAAC,IAAI,CAACzM,YAAY,IAAK,CAAC,IAAI,CAACA,YAAY,CAAClL,KAAK,IAAI,CAAC,IAAI,CAACkL,YAAY,CAACjL,MAAO,EAAE;MAC/E,IAAI,CAACiL,YAAY,GAAG,IAAI,CAACxE,QAAQ,GAC3B,IAAI,CAACA,QAAQ,CAAC/G,qBAAqB,CAAC,CAAC,GACrC,IAAI,CAACuG,eAAe;IAC9B;IACA,OAAO,IAAI,CAACgF,YAAY;EAC5B;EACA;EACA2C,gBAAgB,GAAIxX,KAAK,IAAK;IAC1B,IAAI,IAAI,CAACgV,QAAQ,CAAC5M,MAAM,EAAE;MACtB,MAAMuR,YAAY,GAAG,IAAI,CAACC,gBAAgB,CAAC5Z,KAAK,CAAC;MACjD,IAAI2Z,YAAY,IAAI,CAAC,IAAI,CAAC1E,gBAAgB,CAAC3H,GAAG,CAACqM,YAAY,CAAC,IAAI,CAAC,IAAI,CAACnE,QAAQ,EAAE;QAC5ExV,KAAK,CAAC6a,cAAc,CAAC,CAAC;MAC1B;IACJ,CAAC,MACI,IAAI,CAAC,IAAI,CAACrF,QAAQ,EAAE;MACrB;MACA;MACAxV,KAAK,CAAC6a,cAAc,CAAC,CAAC;IAC1B;EACJ,CAAC;EACD;EACAjB,gBAAgBA,CAAC5Z,KAAK,EAAE;IACpB,OAAO,IAAI,CAACgV,QAAQ,CAAChG,IAAI,CAAC2G,MAAM,IAAI;MAChC,OAAO3V,KAAK,CAAC4L,MAAM,KAAK5L,KAAK,CAAC4L,MAAM,KAAK+J,MAAM,IAAIA,MAAM,CAACtJ,QAAQ,CAACrM,KAAK,CAAC4L,MAAM,CAAC,CAAC;IACrF,CAAC,CAAC;EACN;EACA;EACAoT,0BAA0BA,CAACN,YAAY,EAAEyE,aAAa,EAAEtE,eAAe,EAAE;IACrE;IACA,IAAIH,YAAY,KAAK,IAAI,CAAC/K,iBAAiB,EAAE;MACzC,IAAI,CAACL,OAAO,EAAE3C,MAAM,CAAC,CAAC;MACtB,IAAI,CAAC2C,OAAO,GAAG,IAAI;IACvB,CAAC,MACI,IAAI6P,aAAa,KAAK,IAAI,CAACxP,iBAAiB,IAAIwP,aAAa,CAACC,SAAS,EAAE;MAC1E;MACA,MAAMC,MAAM,GAAI,IAAI,CAAC/P,OAAO,KAAK1L,aAAa,CAAC,IAAI,CAACuL,YAAY,CAAE;MAClEkQ,MAAM,CAACtS,SAAS,CAACJ,MAAM,CAAC6B,iBAAiB,CAAC;MAC1C6Q,MAAM,CAACtS,SAAS,CAACC,GAAG,CAAC,iBAAiB,CAAC;MACvC;MACAqS,MAAM,CAAC1V,KAAK,CAACI,SAAS,GAAG,EAAE;MAC3B;MACA;MACA;MACA,IAAI8Q,eAAe,EAAE;QACjBA,eAAe,CAACyE,MAAM,CAACD,MAAM,CAAC;MAClC,CAAC,MACI;QACD1c,wDAAa,CAACwc,aAAa,CAAC/Z,OAAO,CAAC,CAAC2D,WAAW,CAACsW,MAAM,CAAC;MAC5D;IACJ;EACJ;AACJ;AACA;AACA,SAAS1B,OAAOA,CAAC5gB,KAAK,EAAEwiB,GAAG,EAAEC,GAAG,EAAE;EAC9B,OAAOpV,IAAI,CAACoV,GAAG,CAACD,GAAG,EAAEnV,IAAI,CAACmV,GAAG,CAACC,GAAG,EAAEziB,KAAK,CAAC,CAAC;AAC9C;AACA;AACA,SAASkb,YAAYA,CAACjc,KAAK,EAAE;EACzB;EACA;EACA;EACA,OAAOA,KAAK,CAAC8I,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG;AAChC;AACA;AACA,SAASsT,oBAAoBA,CAACpc,KAAK,EAAE;EACjCA,KAAK,CAAC6a,cAAc,CAAC,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4I,eAAeA,CAACC,KAAK,EAAEC,SAAS,EAAEC,OAAO,EAAE;EAChD,MAAMC,IAAI,GAAGC,KAAK,CAACH,SAAS,EAAED,KAAK,CAACtb,MAAM,GAAG,CAAC,CAAC;EAC/C,MAAM2b,EAAE,GAAGD,KAAK,CAACF,OAAO,EAAEF,KAAK,CAACtb,MAAM,GAAG,CAAC,CAAC;EAC3C,IAAIyb,IAAI,KAAKE,EAAE,EAAE;IACb;EACJ;EACA,MAAMnY,MAAM,GAAG8X,KAAK,CAACG,IAAI,CAAC;EAC1B,MAAMtI,KAAK,GAAGwI,EAAE,GAAGF,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;EAChC,KAAK,IAAIljB,CAAC,GAAGkjB,IAAI,EAAEljB,CAAC,KAAKojB,EAAE,EAAEpjB,CAAC,IAAI4a,KAAK,EAAE;IACrCmI,KAAK,CAAC/iB,CAAC,CAAC,GAAG+iB,KAAK,CAAC/iB,CAAC,GAAG4a,KAAK,CAAC;EAC/B;EACAmI,KAAK,CAACK,EAAE,CAAC,GAAGnY,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoY,iBAAiBA,CAACC,YAAY,EAAEC,WAAW,EAAEjG,YAAY,EAAEkG,WAAW,EAAE;EAC7E,MAAMN,IAAI,GAAGC,KAAK,CAAC7F,YAAY,EAAEgG,YAAY,CAAC7b,MAAM,GAAG,CAAC,CAAC;EACzD,MAAM2b,EAAE,GAAGD,KAAK,CAACK,WAAW,EAAED,WAAW,CAAC9b,MAAM,CAAC;EACjD,IAAI6b,YAAY,CAAC7b,MAAM,EAAE;IACrB8b,WAAW,CAACE,MAAM,CAACL,EAAE,EAAE,CAAC,EAAEE,YAAY,CAACG,MAAM,CAACP,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,aAAaA,CAACJ,YAAY,EAAEC,WAAW,EAAEjG,YAAY,EAAEkG,WAAW,EAAE;EACzE,MAAMJ,EAAE,GAAGD,KAAK,CAACK,WAAW,EAAED,WAAW,CAAC9b,MAAM,CAAC;EACjD,IAAI6b,YAAY,CAAC7b,MAAM,EAAE;IACrB8b,WAAW,CAACE,MAAM,CAACL,EAAE,EAAE,CAAC,EAAEE,YAAY,CAAChG,YAAY,CAAC,CAAC;EACzD;AACJ;AACA;AACA,SAAS6F,KAAKA,CAAC/iB,KAAK,EAAEyiB,GAAG,EAAE;EACvB,OAAOpV,IAAI,CAACoV,GAAG,CAAC,CAAC,EAAEpV,IAAI,CAACmV,GAAG,CAACC,GAAG,EAAEziB,KAAK,CAAC,CAAC;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMujB,sBAAsB,CAAC;EACzBxR,iBAAiB;EACjB;EACAyR,QAAQ;EACR;EACAC,cAAc;EACd;EACAC,cAAc,GAAG,EAAE;EACnB;AACJ;AACA;AACA;AACA;EACIC,iBAAiB;EACjB;EACAC,WAAW,GAAG,UAAU;EACxB;EACA3L,SAAS;EACTpW,WAAWA,CAACkQ,iBAAiB,EAAE;IAC3B,IAAI,CAACA,iBAAiB,GAAGA,iBAAiB;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACI8R,aAAa,GAAG;IACZC,IAAI,EAAE,IAAI;IACVtJ,KAAK,EAAE,CAAC;IACRuJ,QAAQ,EAAE;EACd,CAAC;EACD;AACJ;AACA;AACA;EACIhI,KAAKA,CAACiI,KAAK,EAAE;IACT,IAAI,CAACC,SAAS,CAACD,KAAK,CAAC;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,IAAIA,CAAC7G,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,EAAEqa,YAAY,EAAE;IACzC,MAAMC,QAAQ,GAAG,IAAI,CAACV,cAAc;IACpC,MAAMW,QAAQ,GAAG,IAAI,CAACC,gCAAgC,CAACjH,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,EAAEqa,YAAY,CAAC;IAC9F,IAAIE,QAAQ,KAAK,CAAC,CAAC,IAAID,QAAQ,CAAC/c,MAAM,GAAG,CAAC,EAAE;MACxC,OAAO,IAAI;IACf;IACA,MAAMkd,YAAY,GAAG,IAAI,CAACX,WAAW,KAAK,YAAY;IACtD,MAAM1G,YAAY,GAAGkH,QAAQ,CAACI,SAAS,CAACC,WAAW,IAAIA,WAAW,CAACX,IAAI,KAAKzG,IAAI,CAAC;IACjF,MAAMqH,oBAAoB,GAAGN,QAAQ,CAACC,QAAQ,CAAC;IAC/C,MAAMhD,eAAe,GAAG+C,QAAQ,CAAClH,YAAY,CAAC,CAACjU,UAAU;IACzD,MAAM0b,WAAW,GAAGD,oBAAoB,CAACzb,UAAU;IACnD,MAAMuR,KAAK,GAAG0C,YAAY,GAAGmH,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9C;IACA,MAAMO,UAAU,GAAG,IAAI,CAACC,gBAAgB,CAACxD,eAAe,EAAEsD,WAAW,EAAEnK,KAAK,CAAC;IAC7E;IACA,MAAMsK,aAAa,GAAG,IAAI,CAACC,mBAAmB,CAAC7H,YAAY,EAAEkH,QAAQ,EAAE5J,KAAK,CAAC;IAC7E;IACA;IACA,MAAMwK,QAAQ,GAAGZ,QAAQ,CAACa,KAAK,CAAC,CAAC;IACjC;IACAvC,eAAe,CAAC0B,QAAQ,EAAElH,YAAY,EAAEmH,QAAQ,CAAC;IACjDD,QAAQ,CAAC3Z,OAAO,CAAC,CAACya,OAAO,EAAEC,KAAK,KAAK;MACjC;MACA,IAAIH,QAAQ,CAACG,KAAK,CAAC,KAAKD,OAAO,EAAE;QAC7B;MACJ;MACA,MAAME,aAAa,GAAGF,OAAO,CAACpB,IAAI,KAAKzG,IAAI;MAC3C,MAAMlD,MAAM,GAAGiL,aAAa,GAAGR,UAAU,GAAGE,aAAa;MACzD,MAAMO,eAAe,GAAGD,aAAa,GAC/B/H,IAAI,CAAC1H,qBAAqB,CAAC,CAAC,GAC5BuP,OAAO,CAACpB,IAAI,CAAClO,cAAc,CAAC,CAAC;MACnC;MACAsP,OAAO,CAAC/K,MAAM,IAAIA,MAAM;MACxB,MAAMmL,eAAe,GAAGjY,IAAI,CAACC,KAAK,CAAC4X,OAAO,CAAC/K,MAAM,IAAI,CAAC,GAAG+K,OAAO,CAACpB,IAAI,CAACtP,KAAK,CAAC,CAAC;MAC7E;MACA;MACA;MACA;MACA,IAAI+P,YAAY,EAAE;QACd;QACA;QACAc,eAAe,CAACzY,KAAK,CAACI,SAAS,GAAGD,iBAAiB,CAAC,eAAeuY,eAAe,WAAW,EAAEJ,OAAO,CAACjY,gBAAgB,CAAC;QACxHxD,aAAa,CAACyb,OAAO,CAACjc,UAAU,EAAE,CAAC,EAAEkR,MAAM,CAAC;MAChD,CAAC,MACI;QACDkL,eAAe,CAACzY,KAAK,CAACI,SAAS,GAAGD,iBAAiB,CAAC,kBAAkBuY,eAAe,QAAQ,EAAEJ,OAAO,CAACjY,gBAAgB,CAAC;QACxHxD,aAAa,CAACyb,OAAO,CAACjc,UAAU,EAAEkR,MAAM,EAAE,CAAC,CAAC;MAChD;IACJ,CAAC,CAAC;IACF;IACA,IAAI,CAAC0J,aAAa,CAACE,QAAQ,GAAG/a,kBAAkB,CAAC2b,WAAW,EAAE9a,QAAQ,EAAEC,QAAQ,CAAC;IACjF,IAAI,CAAC+Z,aAAa,CAACC,IAAI,GAAGY,oBAAoB,CAACZ,IAAI;IACnD,IAAI,CAACD,aAAa,CAACrJ,KAAK,GAAG+J,YAAY,GAAGJ,YAAY,CAACrb,CAAC,GAAGqb,YAAY,CAACpb,CAAC;IACzE,OAAO;MAAEuU,aAAa,EAAEJ,YAAY;MAAEA,YAAY,EAAEmH;IAAS,CAAC;EAClE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACInG,KAAKA,CAACb,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,EAAEqb,KAAK,EAAE;IACnC,MAAMd,QAAQ,GAAGc,KAAK,IAAI,IAAI,IAAIA,KAAK,GAAG,CAAC;IACrC;IACE;IACA,IAAI,CAACb,gCAAgC,CAACjH,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,CAAC,GACjEqb,KAAK;IACX,MAAMI,gBAAgB,GAAG,IAAI,CAAC5B,iBAAiB;IAC/C,MAAMzG,YAAY,GAAGqI,gBAAgB,CAAC9X,OAAO,CAAC4P,IAAI,CAAC;IACnD,MAAM9B,WAAW,GAAG8B,IAAI,CAAC1H,qBAAqB,CAAC,CAAC;IAChD,IAAI6P,oBAAoB,GAAGD,gBAAgB,CAAClB,QAAQ,CAAC;IACrD;IACA;IACA;IACA,IAAImB,oBAAoB,KAAKnI,IAAI,EAAE;MAC/BmI,oBAAoB,GAAGD,gBAAgB,CAAClB,QAAQ,GAAG,CAAC,CAAC;IACzD;IACA;IACA;IACA,IAAI,CAACmB,oBAAoB,KACpBnB,QAAQ,IAAI,IAAI,IAAIA,QAAQ,KAAK,CAAC,CAAC,IAAIA,QAAQ,GAAGkB,gBAAgB,CAACle,MAAM,GAAG,CAAC,CAAC,IAC/E,IAAI,CAACoe,wBAAwB,CAAC5b,QAAQ,EAAEC,QAAQ,CAAC,EAAE;MACnD0b,oBAAoB,GAAGD,gBAAgB,CAAC,CAAC,CAAC;IAC9C;IACA;IACA;IACA,IAAIrI,YAAY,GAAG,CAAC,CAAC,EAAE;MACnBqI,gBAAgB,CAAClC,MAAM,CAACnG,YAAY,EAAE,CAAC,CAAC;IAC5C;IACA;IACA;IACA,IAAIsI,oBAAoB,IAAI,CAAC,IAAI,CAACzT,iBAAiB,CAAC+D,UAAU,CAAC0P,oBAAoB,CAAC,EAAE;MAClF,MAAMnd,OAAO,GAAGmd,oBAAoB,CAAC5P,cAAc,CAAC,CAAC;MACrDvN,OAAO,CAACqd,aAAa,CAAC/J,YAAY,CAACJ,WAAW,EAAElT,OAAO,CAAC;MACxDkd,gBAAgB,CAAClC,MAAM,CAACgB,QAAQ,EAAE,CAAC,EAAEhH,IAAI,CAAC;IAC9C,CAAC,MACI;MACD,IAAI,CAACmG,QAAQ,CAACxX,WAAW,CAACuP,WAAW,CAAC;MACtCgK,gBAAgB,CAACI,IAAI,CAACtI,IAAI,CAAC;IAC/B;IACA;IACA9B,WAAW,CAAC3O,KAAK,CAACI,SAAS,GAAG,EAAE;IAChC;IACA;IACA;IACA,IAAI,CAAC4Y,mBAAmB,CAAC,CAAC;EAC9B;EACA;EACA3B,SAASA,CAACD,KAAK,EAAE;IACb,IAAI,CAACL,iBAAiB,GAAGK,KAAK,CAACiB,KAAK,CAAC,CAAC;IACtC,IAAI,CAACW,mBAAmB,CAAC,CAAC;EAC9B;EACA;EACAC,iBAAiBA,CAACC,SAAS,EAAE;IACzB,IAAI,CAACrC,cAAc,GAAGqC,SAAS;EACnC;EACA;EACAvO,KAAKA,CAAA,EAAG;IACJ;IACA,IAAI,CAACoM,iBAAiB,EAAElZ,OAAO,CAAC4S,IAAI,IAAI;MACpC,MAAMjH,WAAW,GAAGiH,IAAI,CAACzH,cAAc,CAAC,CAAC;MACzC,IAAIQ,WAAW,EAAE;QACb,MAAMnJ,gBAAgB,GAAG,IAAI,CAACyW,cAAc,CAACzV,IAAI,CAAC8X,CAAC,IAAIA,CAAC,CAACjC,IAAI,KAAKzG,IAAI,CAAC,EAAEpQ,gBAAgB;QACzFmJ,WAAW,CAACxJ,KAAK,CAACI,SAAS,GAAGC,gBAAgB,IAAI,EAAE;MACxD;IACJ,CAAC,CAAC;IACF,IAAI,CAACyW,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACE,aAAa,CAACC,IAAI,GAAG,IAAI;IAC9B,IAAI,CAACD,aAAa,CAACrJ,KAAK,GAAG,CAAC;IAC5B,IAAI,CAACqJ,aAAa,CAACE,QAAQ,GAAG,KAAK;EACvC;EACA;AACJ;AACA;AACA;EACIiC,sBAAsBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACrC,iBAAiB;EACjC;EACA;EACA3H,YAAYA,CAACqB,IAAI,EAAE;IACf,OAAO,IAAI,CAAC4I,uBAAuB,CAAC,CAAC,CAACzB,SAAS,CAACC,WAAW,IAAIA,WAAW,CAACX,IAAI,KAAKzG,IAAI,CAAC;EAC7F;EACA;EACAU,cAAcA,CAACoH,KAAK,EAAE;IAClB,OAAO,IAAI,CAACc,uBAAuB,CAAC,CAAC,CAACd,KAAK,CAAC,EAAErB,IAAI,IAAI,IAAI;EAC9D;EACA;EACAoC,cAAcA,CAAC/a,aAAa,EAAEC,cAAc,EAAE;IAC1C;IACA;IACA;IACA;IACA,IAAI,CAACsY,cAAc,CAACjZ,OAAO,CAAC,CAAC;MAAExB;IAAW,CAAC,KAAK;MAC5CQ,aAAa,CAACR,UAAU,EAAEkC,aAAa,EAAEC,cAAc,CAAC;IAC5D,CAAC,CAAC;IACF;IACA;IACA,IAAI,CAACsY,cAAc,CAACjZ,OAAO,CAAC,CAAC;MAAEqZ;IAAK,CAAC,KAAK;MACtC,IAAI,IAAI,CAAC/R,iBAAiB,CAAC+D,UAAU,CAACgO,IAAI,CAAC,EAAE;QACzC;QACA;QACAA,IAAI,CAACtL,4BAA4B,CAAC,CAAC;MACvC;IACJ,CAAC,CAAC;EACN;EACA2N,oBAAoBA,CAAChO,SAAS,EAAE;IAC5B,IAAI,CAACqL,QAAQ,GAAGrL,SAAS;EAC7B;EACA;EACAyN,mBAAmBA,CAAA,EAAG;IAClB,MAAMrB,YAAY,GAAG,IAAI,CAACX,WAAW,KAAK,YAAY;IACtD,IAAI,CAACF,cAAc,GAAG,IAAI,CAACC,iBAAiB,CACvC3d,GAAG,CAAC8d,IAAI,IAAI;MACb,MAAMsC,gBAAgB,GAAGtC,IAAI,CAACjO,iBAAiB,CAAC,CAAC;MACjD,OAAO;QACHiO,IAAI;QACJ3J,MAAM,EAAE,CAAC;QACTlN,gBAAgB,EAAEmZ,gBAAgB,CAACxZ,KAAK,CAACI,SAAS,IAAI,EAAE;QACxD/D,UAAU,EAAEb,oBAAoB,CAACge,gBAAgB;MACrD,CAAC;IACL,CAAC,CAAC,CACGlC,IAAI,CAAC,CAACvkB,CAAC,EAAE0mB,CAAC,KAAK;MAChB,OAAO9B,YAAY,GACb5kB,CAAC,CAACsJ,UAAU,CAACN,IAAI,GAAG0d,CAAC,CAACpd,UAAU,CAACN,IAAI,GACrChJ,CAAC,CAACsJ,UAAU,CAACT,GAAG,GAAG6d,CAAC,CAACpd,UAAU,CAACT,GAAG;IAC7C,CAAC,CAAC;EACN;EACAyd,uBAAuBA,CAAA,EAAG;IACtB;IACA;IACA;IACA,OAAO,IAAI,CAACrC,WAAW,KAAK,YAAY,IAAI,IAAI,CAAC3L,SAAS,KAAK,KAAK,GAC9D,IAAI,CAACyL,cAAc,CAACuB,KAAK,CAAC,CAAC,CAACqB,OAAO,CAAC,CAAC,GACrC,IAAI,CAAC5C,cAAc;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;EACImB,gBAAgBA,CAACxD,eAAe,EAAEsD,WAAW,EAAEnK,KAAK,EAAE;IAClD,MAAM+J,YAAY,GAAG,IAAI,CAACX,WAAW,KAAK,YAAY;IACtD,IAAIgB,UAAU,GAAGL,YAAY,GACvBI,WAAW,CAAChc,IAAI,GAAG0Y,eAAe,CAAC1Y,IAAI,GACvCgc,WAAW,CAACnc,GAAG,GAAG6Y,eAAe,CAAC7Y,GAAG;IAC3C;IACA,IAAIgS,KAAK,KAAK,CAAC,CAAC,EAAE;MACdoK,UAAU,IAAIL,YAAY,GACpBI,WAAW,CAAC/b,KAAK,GAAGyY,eAAe,CAACzY,KAAK,GACzC+b,WAAW,CAAC9b,MAAM,GAAGwY,eAAe,CAACxY,MAAM;IACrD;IACA,OAAO+b,UAAU;EACrB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIG,mBAAmBA,CAAC7H,YAAY,EAAEkH,QAAQ,EAAE5J,KAAK,EAAE;IAC/C,MAAM+J,YAAY,GAAG,IAAI,CAACX,WAAW,KAAK,YAAY;IACtD,MAAMvC,eAAe,GAAG+C,QAAQ,CAAClH,YAAY,CAAC,CAACjU,UAAU;IACzD,MAAMsd,gBAAgB,GAAGnC,QAAQ,CAAClH,YAAY,GAAG1C,KAAK,GAAG,CAAC,CAAC,CAAC;IAC5D,IAAIsK,aAAa,GAAGzD,eAAe,CAACkD,YAAY,GAAG,OAAO,GAAG,QAAQ,CAAC,GAAG/J,KAAK;IAC9E,IAAI+L,gBAAgB,EAAE;MAClB,MAAMxK,KAAK,GAAGwI,YAAY,GAAG,MAAM,GAAG,KAAK;MAC3C,MAAMiC,GAAG,GAAGjC,YAAY,GAAG,OAAO,GAAG,QAAQ;MAC7C;MACA;MACA;MACA;MACA,IAAI/J,KAAK,KAAK,CAAC,CAAC,EAAE;QACdsK,aAAa,IAAIyB,gBAAgB,CAACtd,UAAU,CAAC8S,KAAK,CAAC,GAAGsF,eAAe,CAACmF,GAAG,CAAC;MAC9E,CAAC,MACI;QACD1B,aAAa,IAAIzD,eAAe,CAACtF,KAAK,CAAC,GAAGwK,gBAAgB,CAACtd,UAAU,CAACud,GAAG,CAAC;MAC9E;IACJ;IACA,OAAO1B,aAAa;EACxB;EACA;AACJ;AACA;AACA;AACA;EACIW,wBAAwBA,CAAC5b,QAAQ,EAAEC,QAAQ,EAAE;IACzC,IAAI,CAAC,IAAI,CAAC6Z,iBAAiB,CAACtc,MAAM,EAAE;MAChC,OAAO,KAAK;IAChB;IACA,MAAMof,aAAa,GAAG,IAAI,CAAC/C,cAAc;IACzC,MAAMa,YAAY,GAAG,IAAI,CAACX,WAAW,KAAK,YAAY;IACtD;IACA;IACA,MAAM8C,QAAQ,GAAGD,aAAa,CAAC,CAAC,CAAC,CAAC3C,IAAI,KAAK,IAAI,CAACH,iBAAiB,CAAC,CAAC,CAAC;IACpE,IAAI+C,QAAQ,EAAE;MACV,MAAMC,YAAY,GAAGF,aAAa,CAACA,aAAa,CAACpf,MAAM,GAAG,CAAC,CAAC,CAAC4B,UAAU;MACvE,OAAOsb,YAAY,GAAG1a,QAAQ,IAAI8c,YAAY,CAACle,KAAK,GAAGqB,QAAQ,IAAI6c,YAAY,CAACje,MAAM;IAC1F,CAAC,MACI;MACD,MAAMke,aAAa,GAAGH,aAAa,CAAC,CAAC,CAAC,CAACxd,UAAU;MACjD,OAAOsb,YAAY,GAAG1a,QAAQ,IAAI+c,aAAa,CAACje,IAAI,GAAGmB,QAAQ,IAAI8c,aAAa,CAACpe,GAAG;IACxF;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI8b,gCAAgCA,CAACjH,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,EAAE0Q,KAAK,EAAE;IAC9D,MAAM+J,YAAY,GAAG,IAAI,CAACX,WAAW,KAAK,YAAY;IACtD,MAAMuB,KAAK,GAAG,IAAI,CAACzB,cAAc,CAACc,SAAS,CAAC,CAAC;MAAEV,IAAI;MAAE7a;IAAW,CAAC,KAAK;MAClE;MACA,IAAI6a,IAAI,KAAKzG,IAAI,EAAE;QACf,OAAO,KAAK;MAChB;MACA,IAAI7C,KAAK,EAAE;QACP,MAAMvC,SAAS,GAAGsM,YAAY,GAAG/J,KAAK,CAAC1R,CAAC,GAAG0R,KAAK,CAACzR,CAAC;QAClD;QACA;QACA;QACA,IAAI+a,IAAI,KAAK,IAAI,CAACD,aAAa,CAACC,IAAI,IAChC,IAAI,CAACD,aAAa,CAACE,QAAQ,IAC3B9L,SAAS,KAAK,IAAI,CAAC4L,aAAa,CAACrJ,KAAK,EAAE;UACxC,OAAO,KAAK;QAChB;MACJ;MACA,OAAO+J,YAAY;MACb;MACE;MACA1a,QAAQ,IAAIwD,IAAI,CAACwZ,KAAK,CAAC5d,UAAU,CAACN,IAAI,CAAC,IAAIkB,QAAQ,GAAGwD,IAAI,CAACwZ,KAAK,CAAC5d,UAAU,CAACR,KAAK,CAAC,GACpFqB,QAAQ,IAAIuD,IAAI,CAACwZ,KAAK,CAAC5d,UAAU,CAACT,GAAG,CAAC,IAAIsB,QAAQ,GAAGuD,IAAI,CAACwZ,KAAK,CAAC5d,UAAU,CAACP,MAAM,CAAC;IAC5F,CAAC,CAAC;IACF,OAAOyc,KAAK,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC1B,cAAc,CAAC0B,KAAK,EAAE9H,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG8H,KAAK;EACzE;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM2B,iBAAiB,CAAC;EACpBxjB,SAAS;EACTyO,iBAAiB;EACjB;EACAyR,QAAQ;EACR;EACAC,cAAc;EACd;EACAsD,SAAS;EACT;AACJ;AACA;AACA;AACA;EACIC,YAAY;EACZ;AACJ;AACA;AACA;AACA;EACInD,aAAa,GAAG;IACZC,IAAI,EAAE,IAAI;IACVmD,MAAM,EAAE,CAAC;IACTC,MAAM,EAAE,CAAC;IACTnD,QAAQ,EAAE;EACd,CAAC;EACD;AACJ;AACA;AACA;EACIoD,aAAa,GAAG,EAAE;EAClBtlB,WAAWA,CAACyB,SAAS,EAAEyO,iBAAiB,EAAE;IACtC,IAAI,CAACzO,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACyO,iBAAiB,GAAGA,iBAAiB;EAC9C;EACA;AACJ;AACA;AACA;EACIgK,KAAKA,CAACiI,KAAK,EAAE;IACT,MAAMoD,UAAU,GAAG,IAAI,CAAC5D,QAAQ,CAAC4D,UAAU;IAC3C,IAAI,CAACD,aAAa,GAAG,EAAE;IACvB,KAAK,IAAIvnB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwnB,UAAU,CAAC/f,MAAM,EAAEzH,CAAC,EAAE,EAAE;MACxC,MAAMkH,IAAI,GAAGsgB,UAAU,CAACxnB,CAAC,CAAC;MAC1B,IAAI,CAACunB,aAAa,CAACxB,IAAI,CAAC,CAAC7e,IAAI,EAAEA,IAAI,CAACugB,WAAW,CAAC,CAAC;IACrD;IACA,IAAI,CAACpD,SAAS,CAACD,KAAK,CAAC;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,IAAIA,CAAC7G,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,EAAEqa,YAAY,EAAE;IACzC,MAAME,QAAQ,GAAG,IAAI,CAACC,gCAAgC,CAACjH,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,CAAC;IAChF,MAAMwd,YAAY,GAAG,IAAI,CAACzD,aAAa;IACvC,IAAIQ,QAAQ,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC2C,YAAY,CAAC3C,QAAQ,CAAC,KAAKhH,IAAI,EAAE;MACzD,OAAO,IAAI;IACf;IACA,MAAMkK,UAAU,GAAG,IAAI,CAACP,YAAY,CAAC3C,QAAQ,CAAC;IAC9C;IACA,IAAIiD,YAAY,CAACxD,IAAI,KAAKyD,UAAU,IAChCD,YAAY,CAACvD,QAAQ,IACrBuD,YAAY,CAACL,MAAM,KAAK9C,YAAY,CAACrb,CAAC,IACtCwe,YAAY,CAACJ,MAAM,KAAK/C,YAAY,CAACpb,CAAC,EAAE;MACxC,OAAO,IAAI;IACf;IACA,MAAMuU,aAAa,GAAG,IAAI,CAACtB,YAAY,CAACqB,IAAI,CAAC;IAC7C,MAAMmK,OAAO,GAAGnK,IAAI,CAAC1H,qBAAqB,CAAC,CAAC;IAC5C,MAAM8R,cAAc,GAAGF,UAAU,CAAC3R,cAAc,CAAC,CAAC;IAClD,IAAIyO,QAAQ,GAAG/G,aAAa,EAAE;MAC1BmK,cAAc,CAACC,KAAK,CAACF,OAAO,CAAC;IACjC,CAAC,MACI;MACDC,cAAc,CAAClF,MAAM,CAACiF,OAAO,CAAC;IAClC;IACA9E,eAAe,CAAC,IAAI,CAACsE,YAAY,EAAE1J,aAAa,EAAE+G,QAAQ,CAAC;IAC3D,MAAMsD,iBAAiB,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC,CAACC,gBAAgB,CAAChe,QAAQ,EAAEC,QAAQ,CAAC;IAClF;IACA;IACAwd,YAAY,CAACL,MAAM,GAAG9C,YAAY,CAACrb,CAAC;IACpCwe,YAAY,CAACJ,MAAM,GAAG/C,YAAY,CAACpb,CAAC;IACpCue,YAAY,CAACxD,IAAI,GAAGyD,UAAU;IAC9BD,YAAY,CAACvD,QAAQ,GACjB0D,cAAc,KAAKE,iBAAiB,IAAIF,cAAc,CAACnc,QAAQ,CAACqc,iBAAiB,CAAC;IACtF,OAAO;MACHrK,aAAa;MACbJ,YAAY,EAAEmH;IAClB,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACInG,KAAKA,CAACb,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,EAAEqb,KAAK,EAAE;IACnC,IAAI2C,UAAU,GAAG3C,KAAK,IAAI,IAAI,IAAIA,KAAK,GAAG,CAAC,GACrC,IAAI,CAACb,gCAAgC,CAACjH,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,CAAC,GAC/Dqb,KAAK;IACX;IACA;IACA;IACA,IAAI2C,UAAU,KAAK,CAAC,CAAC,EAAE;MACnBA,UAAU,GAAG,IAAI,CAACC,6BAA6B,CAAC1K,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,CAAC;IAC7E;IACA,MAAMke,UAAU,GAAG,IAAI,CAAChB,YAAY,CAACc,UAAU,CAAC;IAChD,MAAM5K,YAAY,GAAG,IAAI,CAAC8J,YAAY,CAACvZ,OAAO,CAAC4P,IAAI,CAAC;IACpD,IAAIH,YAAY,GAAG,CAAC,CAAC,EAAE;MACnB,IAAI,CAAC8J,YAAY,CAAC3D,MAAM,CAACnG,YAAY,EAAE,CAAC,CAAC;IAC7C;IACA,IAAI8K,UAAU,IAAI,CAAC,IAAI,CAACjW,iBAAiB,CAAC+D,UAAU,CAACkS,UAAU,CAAC,EAAE;MAC9D,IAAI,CAAChB,YAAY,CAAC3D,MAAM,CAACyE,UAAU,EAAE,CAAC,EAAEzK,IAAI,CAAC;MAC7C2K,UAAU,CAACpS,cAAc,CAAC,CAAC,CAAC2M,MAAM,CAAClF,IAAI,CAAC1H,qBAAqB,CAAC,CAAC,CAAC;IACpE,CAAC,MACI;MACD,IAAI,CAACqR,YAAY,CAACrB,IAAI,CAACtI,IAAI,CAAC;MAC5B,IAAI,CAACmG,QAAQ,CAACxX,WAAW,CAACqR,IAAI,CAAC1H,qBAAqB,CAAC,CAAC,CAAC;IAC3D;EACJ;EACA;EACAsO,SAASA,CAACD,KAAK,EAAE;IACb,IAAI,CAACgD,YAAY,GAAGhD,KAAK,CAACiB,KAAK,CAAC,CAAC;EACrC;EACA;EACAY,iBAAiBA,CAACC,SAAS,EAAE;IACzB,IAAI,CAACrC,cAAc,GAAGqC,SAAS;EACnC;EACA;EACAvO,KAAKA,CAAA,EAAG;IACJ,MAAM0Q,IAAI,GAAG,IAAI,CAACzE,QAAQ;IAC1B,MAAM8D,YAAY,GAAG,IAAI,CAACzD,aAAa;IACvC;IACA;IACA;IACA;IACA;IACA;IACA;IACA,KAAK,IAAIjkB,CAAC,GAAG,IAAI,CAACunB,aAAa,CAAC9f,MAAM,GAAG,CAAC,EAAEzH,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;MACrD,MAAM,CAACkH,IAAI,EAAEugB,WAAW,CAAC,GAAG,IAAI,CAACF,aAAa,CAACvnB,CAAC,CAAC;MACjD,IAAIkH,IAAI,CAACwU,UAAU,KAAK2M,IAAI,IAAInhB,IAAI,CAACugB,WAAW,KAAKA,WAAW,EAAE;QAC9D,IAAIA,WAAW,KAAK,IAAI,EAAE;UACtBY,IAAI,CAACjc,WAAW,CAAClF,IAAI,CAAC;QAC1B,CAAC,MACI,IAAIugB,WAAW,CAAC/L,UAAU,KAAK2M,IAAI,EAAE;UACtCA,IAAI,CAACtM,YAAY,CAAC7U,IAAI,EAAEugB,WAAW,CAAC;QACxC;MACJ;IACJ;IACA,IAAI,CAACF,aAAa,GAAG,EAAE;IACvB,IAAI,CAACH,YAAY,GAAG,EAAE;IACtBM,YAAY,CAACxD,IAAI,GAAG,IAAI;IACxBwD,YAAY,CAACL,MAAM,GAAGK,YAAY,CAACJ,MAAM,GAAG,CAAC;IAC7CI,YAAY,CAACvD,QAAQ,GAAG,KAAK;EACjC;EACA;AACJ;AACA;AACA;EACIiC,sBAAsBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACgB,YAAY;EAC5B;EACA;EACAhL,YAAYA,CAACqB,IAAI,EAAE;IACf,OAAO,IAAI,CAAC2J,YAAY,CAACvZ,OAAO,CAAC4P,IAAI,CAAC;EAC1C;EACA;EACAU,cAAcA,CAACoH,KAAK,EAAE;IAClB,OAAO,IAAI,CAAC6B,YAAY,CAAC7B,KAAK,CAAC,IAAI,IAAI;EAC3C;EACA;EACAe,cAAcA,CAAA,EAAG;IACb,IAAI,CAACc,YAAY,CAACvc,OAAO,CAAC4S,IAAI,IAAI;MAC9B,IAAI,IAAI,CAACtL,iBAAiB,CAAC+D,UAAU,CAACuH,IAAI,CAAC,EAAE;QACzC;QACA;QACAA,IAAI,CAAC7E,4BAA4B,CAAC,CAAC;MACvC;IACJ,CAAC,CAAC;EACN;EACA2N,oBAAoBA,CAAChO,SAAS,EAAE;IAC5B,IAAIA,SAAS,KAAK,IAAI,CAACqL,QAAQ,EAAE;MAC7B,IAAI,CAACA,QAAQ,GAAGrL,SAAS;MACzB,IAAI,CAAC4O,SAAS,GAAGrQ,SAAS;IAC9B;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI4N,gCAAgCA,CAACjH,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,EAAE;IACvD,MAAMoe,cAAc,GAAG,IAAI,CAACN,YAAY,CAAC,CAAC,CAACC,gBAAgB,CAACxa,IAAI,CAACwZ,KAAK,CAAChd,QAAQ,CAAC,EAAEwD,IAAI,CAACwZ,KAAK,CAAC/c,QAAQ,CAAC,CAAC;IACvG,MAAMqb,KAAK,GAAG+C,cAAc,GACtB,IAAI,CAAClB,YAAY,CAACxC,SAAS,CAACnH,IAAI,IAAI;MAClC,MAAM4K,IAAI,GAAG5K,IAAI,CAACzH,cAAc,CAAC,CAAC;MAClC,OAAOsS,cAAc,KAAKD,IAAI,IAAIA,IAAI,CAAC3c,QAAQ,CAAC4c,cAAc,CAAC;IACnE,CAAC,CAAC,GACA,CAAC,CAAC;IACR,OAAO/C,KAAK,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC1B,cAAc,CAAC0B,KAAK,EAAE9H,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG8H,KAAK;EACzE;EACA;EACAyC,YAAYA,CAAA,EAAG;IACX;IACA,IAAI,CAAC,IAAI,CAACb,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAGphB,2DAAc,CAAC,IAAI,CAAC6d,QAAQ,CAAC,IAAI,IAAI,CAAClgB,SAAS;IACpE;IACA,OAAO,IAAI,CAACyjB,SAAS;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIgB,6BAA6BA,CAAC1K,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,EAAE;IACpD,IAAI,IAAI,CAACkd,YAAY,CAAC3f,MAAM,KAAK,CAAC,EAAE;MAChC,OAAO,CAAC,CAAC;IACb;IACA,IAAI,IAAI,CAAC2f,YAAY,CAAC3f,MAAM,KAAK,CAAC,EAAE;MAChC,OAAO,CAAC;IACZ;IACA,IAAI8gB,WAAW,GAAGC,QAAQ;IAC1B,IAAIC,QAAQ,GAAG,CAAC,CAAC;IACjB;IACA;IACA;IACA;IACA,KAAK,IAAIzoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAConB,YAAY,CAAC3f,MAAM,EAAEzH,CAAC,EAAE,EAAE;MAC/C,MAAM4nB,OAAO,GAAG,IAAI,CAACR,YAAY,CAACpnB,CAAC,CAAC;MACpC,IAAI4nB,OAAO,KAAKnK,IAAI,EAAE;QAClB,MAAM;UAAEvU,CAAC;UAAEC;QAAE,CAAC,GAAGye,OAAO,CAAC5R,cAAc,CAAC,CAAC,CAACrN,qBAAqB,CAAC,CAAC;QACjE,MAAM+R,QAAQ,GAAGjN,IAAI,CAACib,KAAK,CAACze,QAAQ,GAAGf,CAAC,EAAEgB,QAAQ,GAAGf,CAAC,CAAC;QACvD,IAAIuR,QAAQ,GAAG6N,WAAW,EAAE;UACxBA,WAAW,GAAG7N,QAAQ;UACtB+N,QAAQ,GAAGzoB,CAAC;QAChB;MACJ;IACJ;IACA,OAAOyoB,QAAQ;EACnB;AACJ;;AAEA;AACA;AACA;AACA;AACA,MAAME,wBAAwB,GAAG,IAAI;AACrC;AACA;AACA;AACA;AACA,MAAMC,0BAA0B,GAAG,IAAI;AACvC;AACA,IAAIC,2BAA2B,gBAC9B,UAAUA,2BAA2B,EAAE;EACpCA,2BAA2B,CAACA,2BAA2B,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EAC7EA,2BAA2B,CAACA,2BAA2B,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI;EACzEA,2BAA2B,CAACA,2BAA2B,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EAAC,OAHvEA,2BAA2B;AAItC,CAAC,CAAEA,2BAA2B,IAAmC,CAAC,CAAE,CALrC;AAM/B;AACA,IAAIC,6BAA6B,gBAChC,UAAUA,6BAA6B,EAAE;EACtCA,6BAA6B,CAACA,6BAA6B,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACjFA,6BAA6B,CAACA,6BAA6B,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACjFA,6BAA6B,CAACA,6BAA6B,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EAAC,OAH7EA,6BAA6B;AAIxC,CAAC,CAAEA,6BAA6B,IAAqC,CAAC,CAAE,CALvC;AAMjC;AACA;AACA;AACA,MAAMC,WAAW,CAAC;EACd5W,iBAAiB;EACjBF,OAAO;EACPC,cAAc;EACd;EACAzJ,OAAO;EACP;EACAoM,QAAQ,GAAG,KAAK;EAChB;EACA0J,eAAe,GAAG,KAAK;EACvB;EACA7J,QAAQ;EACR;AACJ;AACA;AACA;EACIsU,kBAAkB,GAAG,KAAK;EAC1B;EACAC,cAAc,GAAG,CAAC;EAClB;AACJ;AACA;EACIxG,SAAS,GAAG,KAAK;EACjB;AACJ;AACA;AACA;EACIyG,cAAc,GAAGA,CAAA,KAAM,IAAI;EAC3B;EACAC,aAAa,GAAGA,CAAA,KAAM,IAAI;EAC1B;EACAlU,aAAa,gBAAG,IAAI1P,yCAAO,CAAC,CAAC;EAC7B;AACJ;AACA;EACI8P,OAAO,gBAAG,IAAI9P,yCAAO,CAAC,CAAC;EACvB;AACJ;AACA;AACA;EACI+P,MAAM,gBAAG,IAAI/P,yCAAO,CAAC,CAAC;EACtB;EACAgQ,OAAO,gBAAG,IAAIhQ,yCAAO,CAAC,CAAC;EACvB;EACA6jB,MAAM,gBAAG,IAAI7jB,yCAAO,CAAC,CAAC;EACtB;EACA8jB,gBAAgB,gBAAG,IAAI9jB,yCAAO,CAAC,CAAC;EAChC;EACA+jB,gBAAgB,gBAAG,IAAI/jB,yCAAO,CAAC,CAAC;EAChC;EACAkQ,IAAI;EACJ;EACA8T,UAAU;EACV;EACAC,WAAW,GAAG,KAAK;EACnB;EACAtW,gBAAgB;EAChB;EACAuW,aAAa;EACb;EACAC,QAAQ;EACR;EACAC,WAAW,GAAG,EAAE;EAChB;EACAC,SAAS,GAAG,EAAE;EACd;EACAC,eAAe,gBAAG,IAAI/a,GAAG,CAAC,CAAC;EAC3B;EACAgb,2BAA2B,GAAGtkB,8CAAY,CAACkO,KAAK;EAChD;EACAqW,wBAAwB,GAAGlB,2BAA2B,CAACmB,IAAI;EAC3D;EACAC,0BAA0B,GAAGnB,6BAA6B,CAACkB,IAAI;EAC/D;EACAE,WAAW;EACX;EACAC,iBAAiB,gBAAG,IAAI5kB,yCAAO,CAAC,CAAC;EACjC;EACAkP,iBAAiB,GAAG,IAAI;EACxB;EACA/Q,SAAS;EACT;EACA0mB,mBAAmB,GAAG,EAAE;EACxB;EACAC,kBAAkB;EAClB;EACApb,UAAU,GAAG,KAAK;EAClBhN,WAAWA,CAACwG,OAAO,EAAE0J,iBAAiB,EAAEzO,SAAS,EAAEuO,OAAO,EAAEC,cAAc,EAAE;IACxE,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,MAAMoY,cAAc,GAAI,IAAI,CAAC7hB,OAAO,GAAGzC,wDAAa,CAACyC,OAAO,CAAE;IAC9D,IAAI,CAAC/E,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAAC6mB,eAAe,CAAC,UAAU,CAAC,CAAChE,oBAAoB,CAAC+D,cAAc,CAAC;IACrEnY,iBAAiB,CAACqY,qBAAqB,CAAC,IAAI,CAAC;IAC7C,IAAI,CAACtX,gBAAgB,GAAG,IAAI7I,qBAAqB,CAAC3G,SAAS,CAAC;EAChE;EACA;EACA4T,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC0D,cAAc,CAAC,CAAC;IACrB,IAAI,CAACmP,iBAAiB,CAAChmB,QAAQ,CAAC,CAAC;IACjC,IAAI,CAAC2lB,2BAA2B,CAAC3S,WAAW,CAAC,CAAC;IAC9C,IAAI,CAAClC,aAAa,CAAC9Q,QAAQ,CAAC,CAAC;IAC7B,IAAI,CAACkR,OAAO,CAAClR,QAAQ,CAAC,CAAC;IACvB,IAAI,CAACmR,MAAM,CAACnR,QAAQ,CAAC,CAAC;IACtB,IAAI,CAACoR,OAAO,CAACpR,QAAQ,CAAC,CAAC;IACvB,IAAI,CAACilB,MAAM,CAACjlB,QAAQ,CAAC,CAAC;IACtB,IAAI,CAACklB,gBAAgB,CAACllB,QAAQ,CAAC,CAAC;IAChC,IAAI,CAACmlB,gBAAgB,CAACnlB,QAAQ,CAAC,CAAC;IAChC,IAAI,CAAC0lB,eAAe,CAACrf,KAAK,CAAC,CAAC;IAC5B,IAAI,CAAC0f,WAAW,GAAG,IAAI;IACvB,IAAI,CAAChX,gBAAgB,CAAC1I,KAAK,CAAC,CAAC;IAC7B,IAAI,CAAC2H,iBAAiB,CAACsY,mBAAmB,CAAC,IAAI,CAAC;EACpD;EACA;EACAvU,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACsT,WAAW;EAC3B;EACA;EACArN,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACuO,gBAAgB,CAAC,CAAC;IACvB,IAAI,CAACC,wBAAwB,CAAC,CAAC;EACnC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIrM,KAAKA,CAACb,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,EAAEqb,KAAK,EAAE;IACnC,IAAI,CAACmF,gBAAgB,CAAC,CAAC;IACvB;IACA;IACA,IAAInF,KAAK,IAAI,IAAI,IAAI,IAAI,CAAChH,eAAe,EAAE;MACvCgH,KAAK,GAAG,IAAI,CAACoE,WAAW,CAAC9b,OAAO,CAAC4P,IAAI,CAAC;IAC1C;IACA,IAAI,CAACgM,aAAa,CAACnL,KAAK,CAACb,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,EAAEqb,KAAK,CAAC;IACzD;IACA;IACA,IAAI,CAACqF,qBAAqB,CAAC,CAAC;IAC5B;IACA,IAAI,CAACD,wBAAwB,CAAC,CAAC;IAC/B,IAAI,CAACtV,OAAO,CAAC0D,IAAI,CAAC;MAAE0E,IAAI;MAAElF,SAAS,EAAE,IAAI;MAAE+E,YAAY,EAAE,IAAI,CAAClB,YAAY,CAACqB,IAAI;IAAE,CAAC,CAAC;EACvF;EACA;AACJ;AACA;AACA;EACIW,IAAIA,CAACX,IAAI,EAAE;IACP,IAAI,CAACoN,MAAM,CAAC,CAAC;IACb,IAAI,CAACvV,MAAM,CAACyD,IAAI,CAAC;MAAE0E,IAAI;MAAElF,SAAS,EAAE;IAAK,CAAC,CAAC;EAC/C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIqF,IAAIA,CAACH,IAAI,EAAEH,YAAY,EAAEI,aAAa,EAAEC,iBAAiB,EAAEJ,sBAAsB,EAAE7C,QAAQ,EAAEW,SAAS,EAAEhc,KAAK,GAAG,CAAC,CAAC,EAAE;IAChH,IAAI,CAACwrB,MAAM,CAAC,CAAC;IACb,IAAI,CAACtV,OAAO,CAACwD,IAAI,CAAC;MACd0E,IAAI;MACJH,YAAY;MACZI,aAAa;MACbnF,SAAS,EAAE,IAAI;MACfoF,iBAAiB;MACjBJ,sBAAsB;MACtB7C,QAAQ;MACRW,SAAS;MACThc;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACIglB,SAASA,CAACD,KAAK,EAAE;IACb,MAAM0G,aAAa,GAAG,IAAI,CAACnB,WAAW;IACtC,IAAI,CAACA,WAAW,GAAGvF,KAAK;IACxBA,KAAK,CAACvZ,OAAO,CAAC4S,IAAI,IAAIA,IAAI,CAACnF,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACpD,IAAI,IAAI,CAACpC,UAAU,CAAC,CAAC,EAAE;MACnB,MAAM6U,YAAY,GAAGD,aAAa,CAACE,MAAM,CAACvN,IAAI,IAAIA,IAAI,CAACvH,UAAU,CAAC,CAAC,CAAC;MACpE;MACA;MACA,IAAI6U,YAAY,CAACE,KAAK,CAACxN,IAAI,IAAI2G,KAAK,CAACvW,OAAO,CAAC4P,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;QACxD,IAAI,CAACoN,MAAM,CAAC,CAAC;MACjB,CAAC,MACI;QACD,IAAI,CAACpB,aAAa,CAACpF,SAAS,CAAC,IAAI,CAACsF,WAAW,CAAC;MAClD;IACJ;IACA,OAAO,IAAI;EACf;EACA;EACAvR,aAAaA,CAACC,SAAS,EAAE;IACrB,IAAI,CAACpJ,UAAU,GAAGoJ,SAAS;IAC3B,IAAI,IAAI,CAACoR,aAAa,YAAY9F,sBAAsB,EAAE;MACtD,IAAI,CAAC8F,aAAa,CAACpR,SAAS,GAAGA,SAAS;IAC5C;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACI6S,WAAWA,CAACA,WAAW,EAAE;IACrB,IAAI,CAACtB,SAAS,GAAGsB,WAAW,CAAC7F,KAAK,CAAC,CAAC;IACpC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIkF,eAAeA,CAACvG,WAAW,EAAE;IACzB,IAAIA,WAAW,KAAK,OAAO,EAAE;MACzB,IAAI,CAACyF,aAAa,GAAG,IAAIvC,iBAAiB,CAAC,IAAI,CAACxjB,SAAS,EAAE,IAAI,CAACyO,iBAAiB,CAAC;IACtF,CAAC,MACI;MACD,MAAMgZ,QAAQ,GAAG,IAAIxH,sBAAsB,CAAC,IAAI,CAACxR,iBAAiB,CAAC;MACnEgZ,QAAQ,CAAC9S,SAAS,GAAG,IAAI,CAACpJ,UAAU;MACpCkc,QAAQ,CAACnH,WAAW,GAAGA,WAAW;MAClC,IAAI,CAACyF,aAAa,GAAG0B,QAAQ;IACjC;IACA,IAAI,CAAC1B,aAAa,CAAClD,oBAAoB,CAAC,IAAI,CAACgD,UAAU,CAAC;IACxD,IAAI,CAACE,aAAa,CAACxD,iBAAiB,CAAC,CAACV,KAAK,EAAE9H,IAAI,KAAK,IAAI,CAAC0L,aAAa,CAAC5D,KAAK,EAAE9H,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5F,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACI2N,qBAAqBA,CAAC1gB,QAAQ,EAAE;IAC5B,MAAMjC,OAAO,GAAG,IAAI,CAAC8gB,UAAU;IAC/B;IACA;IACA,IAAI,CAACa,mBAAmB,GACpB1f,QAAQ,CAACmD,OAAO,CAACpF,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAACA,OAAO,EAAE,GAAGiC,QAAQ,CAAC,GAAGA,QAAQ,CAAC2a,KAAK,CAAC,CAAC;IAChF,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIkB,oBAAoBA,CAAChO,SAAS,EAAE;IAC5B,IAAIA,SAAS,KAAK,IAAI,CAACgR,UAAU,EAAE;MAC/B,OAAO,IAAI;IACf;IACA,MAAM9gB,OAAO,GAAGzC,wDAAa,CAAC,IAAI,CAACyC,OAAO,CAAC;IAC3C,IAAI,CAAC,OAAO/F,SAAS,KAAK,WAAW,IAAIA,SAAS,KAC9C6V,SAAS,KAAK9P,OAAO,IACrB,CAACA,OAAO,CAACiD,QAAQ,CAAC6M,SAAS,CAAC,EAAE;MAC9B,MAAM,IAAI8S,KAAK,CAAC,yGAAyG,CAAC;IAC9H;IACA,MAAMC,iBAAiB,GAAG,IAAI,CAAClB,mBAAmB,CAACvc,OAAO,CAAC,IAAI,CAAC0b,UAAU,CAAC;IAC3E,MAAMgC,iBAAiB,GAAG,IAAI,CAACnB,mBAAmB,CAACvc,OAAO,CAAC0K,SAAS,CAAC;IACrE,IAAI+S,iBAAiB,GAAG,CAAC,CAAC,EAAE;MACxB,IAAI,CAAClB,mBAAmB,CAAC3G,MAAM,CAAC6H,iBAAiB,EAAE,CAAC,CAAC;IACzD;IACA,IAAIC,iBAAiB,GAAG,CAAC,CAAC,EAAE;MACxB,IAAI,CAACnB,mBAAmB,CAAC3G,MAAM,CAAC8H,iBAAiB,EAAE,CAAC,CAAC;IACzD;IACA,IAAI,IAAI,CAAC9B,aAAa,EAAE;MACpB,IAAI,CAACA,aAAa,CAAClD,oBAAoB,CAAChO,SAAS,CAAC;IACtD;IACA,IAAI,CAAC9D,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAAC2V,mBAAmB,CAACoB,OAAO,CAACjT,SAAS,CAAC;IAC3C,IAAI,CAACgR,UAAU,GAAGhR,SAAS;IAC3B,OAAO,IAAI;EACf;EACA;EACA8D,oBAAoBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAAC+N,mBAAmB;EACnC;EACA;AACJ;AACA;AACA;EACIhO,YAAYA,CAACqB,IAAI,EAAE;IACf,OAAO,IAAI,CAAC+L,WAAW,GACjB,IAAI,CAACC,aAAa,CAACrN,YAAY,CAACqB,IAAI,CAAC,GACrC,IAAI,CAACkM,WAAW,CAAC9b,OAAO,CAAC4P,IAAI,CAAC;EACxC;EACA;AACJ;AACA;AACA;EACIU,cAAcA,CAACoH,KAAK,EAAE;IAClB,OAAO,IAAI,CAACiE,WAAW,GACjB,IAAI,CAACC,aAAa,CAACtL,cAAc,CAACoH,KAAK,CAAC,GACxC,IAAI,CAACoE,WAAW,CAACpE,KAAK,CAAC,IAAI,IAAI;EACzC;EACA;AACJ;AACA;AACA;EACIvL,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC6P,eAAe,CAAC4B,IAAI,GAAG,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIhN,SAASA,CAAChB,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,EAAEqa,YAAY,EAAE;IAC9C;IACA,IAAI,IAAI,CAAChG,eAAe,IACpB,CAAC,IAAI,CAACmL,QAAQ,IACd,CAAC3f,oBAAoB,CAAC,IAAI,CAAC2f,QAAQ,EAAEf,wBAAwB,EAAE1e,QAAQ,EAAEC,QAAQ,CAAC,EAAE;MACpF;IACJ;IACA,MAAMwhB,MAAM,GAAG,IAAI,CAACjC,aAAa,CAACnF,IAAI,CAAC7G,IAAI,EAAExT,QAAQ,EAAEC,QAAQ,EAAEqa,YAAY,CAAC;IAC9E,IAAImH,MAAM,EAAE;MACR,IAAI,CAACtC,MAAM,CAACrQ,IAAI,CAAC;QACb2E,aAAa,EAAEgO,MAAM,CAAChO,aAAa;QACnCJ,YAAY,EAAEoO,MAAM,CAACpO,YAAY;QACjC/E,SAAS,EAAE,IAAI;QACfkF;MACJ,CAAC,CAAC;IACN;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIe,0BAA0BA,CAACvU,QAAQ,EAAEC,QAAQ,EAAE;IAC3C,IAAI,IAAI,CAAC8e,kBAAkB,EAAE;MACzB;IACJ;IACA,IAAI2C,UAAU;IACd,IAAIC,uBAAuB,GAAG/C,2BAA2B,CAACmB,IAAI;IAC9D,IAAI6B,yBAAyB,GAAG/C,6BAA6B,CAACkB,IAAI;IAClE;IACA,IAAI,CAAC9W,gBAAgB,CAAC5I,SAAS,CAACO,OAAO,CAAC,CAACY,QAAQ,EAAEhD,OAAO,KAAK;MAC3D;MACA;MACA,IAAIA,OAAO,KAAK,IAAI,CAAC/E,SAAS,IAAI,CAAC+H,QAAQ,CAACpC,UAAU,IAAIsiB,UAAU,EAAE;QAClE;MACJ;MACA,IAAI5hB,oBAAoB,CAAC0B,QAAQ,CAACpC,UAAU,EAAEsf,wBAAwB,EAAE1e,QAAQ,EAAEC,QAAQ,CAAC,EAAE;QACzF,CAAC0hB,uBAAuB,EAAEC,yBAAyB,CAAC,GAAGC,0BAA0B,CAACrjB,OAAO,EAAEgD,QAAQ,CAACpC,UAAU,EAAE,IAAI,CAAC4F,UAAU,EAAEhF,QAAQ,EAAEC,QAAQ,CAAC;QACpJ,IAAI0hB,uBAAuB,IAAIC,yBAAyB,EAAE;UACtDF,UAAU,GAAGljB,OAAO;QACxB;MACJ;IACJ,CAAC,CAAC;IACF;IACA,IAAI,CAACmjB,uBAAuB,IAAI,CAACC,yBAAyB,EAAE;MACxD,MAAM;QAAE7iB,KAAK;QAAEC;MAAO,CAAC,GAAG,IAAI,CAACiJ,cAAc,CAAC6Z,eAAe,CAAC,CAAC;MAC/D,MAAMjiB,OAAO,GAAG;QACZd,KAAK;QACLC,MAAM;QACNL,GAAG,EAAE,CAAC;QACNC,KAAK,EAAEG,KAAK;QACZF,MAAM,EAAEG,MAAM;QACdF,IAAI,EAAE;MACV,CAAC;MACD6iB,uBAAuB,GAAGI,0BAA0B,CAACliB,OAAO,EAAEI,QAAQ,CAAC;MACvE2hB,yBAAyB,GAAGI,4BAA4B,CAACniB,OAAO,EAAEG,QAAQ,CAAC;MAC3E0hB,UAAU,GAAGlqB,MAAM;IACvB;IACA,IAAIkqB,UAAU,KACTC,uBAAuB,KAAK,IAAI,CAAC7B,wBAAwB,IACtD8B,yBAAyB,KAAK,IAAI,CAAC5B,0BAA0B,IAC7D0B,UAAU,KAAK,IAAI,CAACzB,WAAW,CAAC,EAAE;MACtC,IAAI,CAACH,wBAAwB,GAAG6B,uBAAuB;MACvD,IAAI,CAAC3B,0BAA0B,GAAG4B,yBAAyB;MAC3D,IAAI,CAAC3B,WAAW,GAAGyB,UAAU;MAC7B,IAAI,CAACC,uBAAuB,IAAIC,yBAAyB,KAAKF,UAAU,EAAE;QACtE,IAAI,CAAC1Z,OAAO,CAAC0E,iBAAiB,CAAC,IAAI,CAACuV,oBAAoB,CAAC;MAC7D,CAAC,MACI;QACD,IAAI,CAAClR,cAAc,CAAC,CAAC;MACzB;IACJ;EACJ;EACA;EACAA,cAAcA,CAAA,EAAG;IACb,IAAI,CAACmP,iBAAiB,CAACpR,IAAI,CAAC,CAAC;EACjC;EACA;EACA2R,gBAAgBA,CAAA,EAAG;IACf,MAAMlJ,MAAM,GAAG,IAAI,CAAC+H,UAAU,CAACvc,KAAK;IACpC,IAAI,CAACiI,aAAa,CAAC8D,IAAI,CAAC,CAAC;IACzB,IAAI,CAACyQ,WAAW,GAAG,IAAI;IACvB,IAAI,CAAC,OAAO9mB,SAAS,KAAK,WAAW,IAAIA,SAAS;IAC9C;IACA;IACA,IAAI,CAAC6mB,UAAU,KAAKvjB,wDAAa,CAAC,IAAI,CAACyC,OAAO,CAAC,EAAE;MACjD,KAAK,MAAMyb,IAAI,IAAI,IAAI,CAACyF,WAAW,EAAE;QACjC,IAAI,CAACzF,IAAI,CAAChO,UAAU,CAAC,CAAC,IAAIgO,IAAI,CAACjO,iBAAiB,CAAC,CAAC,CAACyF,UAAU,KAAK,IAAI,CAAC6N,UAAU,EAAE;UAC/E,MAAM,IAAI8B,KAAK,CAAC,yGAAyG,CAAC;QAC9H;MACJ;IACJ;IACA;IACA;IACA;IACA,IAAI,CAAChB,kBAAkB,GAAG7I,MAAM,CAAC2K,gBAAgB,IAAI3K,MAAM,CAAC4K,cAAc,IAAI,EAAE;IAChF5K,MAAM,CAAC4K,cAAc,GAAG5K,MAAM,CAAC2K,gBAAgB,GAAG,MAAM;IACxD,IAAI,CAAC1C,aAAa,CAACtN,KAAK,CAAC,IAAI,CAACwN,WAAW,CAAC;IAC1C,IAAI,CAACiB,qBAAqB,CAAC,CAAC;IAC5B,IAAI,CAACd,2BAA2B,CAAC3S,WAAW,CAAC,CAAC;IAC9C,IAAI,CAACkV,qBAAqB,CAAC,CAAC;EAChC;EACA;EACAzB,qBAAqBA,CAAA,EAAG;IACpB,IAAI,CAAC1X,gBAAgB,CAACzI,KAAK,CAAC,IAAI,CAAC2f,mBAAmB,CAAC;IACrD;IACA;IACA,IAAI,CAACV,QAAQ,GAAG,IAAI,CAACxW,gBAAgB,CAAC5I,SAAS,CAACa,GAAG,CAAC,IAAI,CAACoe,UAAU,CAAC,CAAClgB,UAAU;EACnF;EACA;EACAwhB,MAAMA,CAAA,EAAG;IACL,IAAI,CAACrB,WAAW,GAAG,KAAK;IACxB,MAAMhI,MAAM,GAAG,IAAI,CAAC+H,UAAU,CAACvc,KAAK;IACpCwU,MAAM,CAAC4K,cAAc,GAAG5K,MAAM,CAAC2K,gBAAgB,GAAG,IAAI,CAAC9B,kBAAkB;IACzE,IAAI,CAACT,SAAS,CAAC/e,OAAO,CAACya,OAAO,IAAIA,OAAO,CAACgH,cAAc,CAAC,IAAI,CAAC,CAAC;IAC/D,IAAI,CAAC7C,aAAa,CAAC9R,KAAK,CAAC,CAAC;IAC1B,IAAI,CAACqD,cAAc,CAAC,CAAC;IACrB,IAAI,CAAC8O,2BAA2B,CAAC3S,WAAW,CAAC,CAAC;IAC9C,IAAI,CAACjE,gBAAgB,CAAC1I,KAAK,CAAC,CAAC;EACjC;EACA;EACA0hB,oBAAoB,GAAGA,CAAA,KAAM;IACzB,IAAI,CAAClR,cAAc,CAAC,CAAC;IACrBvV,8CAAQ,CAAC,CAAC,EAAEC,yDAAuB,CAAC,CAC/B6mB,IAAI,CAACpmB,yDAAS,CAAC,IAAI,CAACgkB,iBAAiB,CAAC,CAAC,CACvC/S,SAAS,CAAC,MAAM;MACjB,MAAMlQ,IAAI,GAAG,IAAI,CAACgjB,WAAW;MAC7B,MAAMsC,UAAU,GAAG,IAAI,CAACvD,cAAc;MACtC,IAAI,IAAI,CAACc,wBAAwB,KAAKlB,2BAA2B,CAAC4D,EAAE,EAAE;QAClEvlB,IAAI,CAACwlB,QAAQ,CAAC,CAAC,EAAE,CAACF,UAAU,CAAC;MACjC,CAAC,MACI,IAAI,IAAI,CAACzC,wBAAwB,KAAKlB,2BAA2B,CAAC8D,IAAI,EAAE;QACzEzlB,IAAI,CAACwlB,QAAQ,CAAC,CAAC,EAAEF,UAAU,CAAC;MAChC;MACA,IAAI,IAAI,CAACvC,0BAA0B,KAAKnB,6BAA6B,CAAC8D,IAAI,EAAE;QACxE1lB,IAAI,CAACwlB,QAAQ,CAAC,CAACF,UAAU,EAAE,CAAC,CAAC;MACjC,CAAC,MACI,IAAI,IAAI,CAACvC,0BAA0B,KAAKnB,6BAA6B,CAAC+D,KAAK,EAAE;QAC9E3lB,IAAI,CAACwlB,QAAQ,CAACF,UAAU,EAAE,CAAC,CAAC;MAChC;IACJ,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIhP,gBAAgBA,CAACtU,CAAC,EAAEC,CAAC,EAAE;IACnB,OAAO,IAAI,CAACugB,QAAQ,IAAI,IAAI,IAAItgB,kBAAkB,CAAC,IAAI,CAACsgB,QAAQ,EAAExgB,CAAC,EAAEC,CAAC,CAAC;EAC3E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI6U,gCAAgCA,CAACP,IAAI,EAAEvU,CAAC,EAAEC,CAAC,EAAE;IACzC,OAAO,IAAI,CAACygB,SAAS,CAACvb,IAAI,CAACiX,OAAO,IAAIA,OAAO,CAACwH,WAAW,CAACrP,IAAI,EAAEvU,CAAC,EAAEC,CAAC,CAAC,CAAC;EAC1E;EACA;AACJ;AACA;AACA;AACA;AACA;EACI2jB,WAAWA,CAACrP,IAAI,EAAEvU,CAAC,EAAEC,CAAC,EAAE;IACpB,IAAI,CAAC,IAAI,CAACugB,QAAQ,IACd,CAACtgB,kBAAkB,CAAC,IAAI,CAACsgB,QAAQ,EAAExgB,CAAC,EAAEC,CAAC,CAAC,IACxC,CAAC,IAAI,CAAC+f,cAAc,CAACzL,IAAI,EAAE,IAAI,CAAC,EAAE;MAClC,OAAO,KAAK;IAChB;IACA,MAAMwK,gBAAgB,GAAG,IAAI,CAACliB,cAAc,CAAC,CAAC,CAACkiB,gBAAgB,CAAC/e,CAAC,EAAEC,CAAC,CAAC;IACrE;IACA;IACA,IAAI,CAAC8e,gBAAgB,EAAE;MACnB,OAAO,KAAK;IAChB;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAOA,gBAAgB,KAAK,IAAI,CAACsB,UAAU,IAAI,IAAI,CAACA,UAAU,CAAC7d,QAAQ,CAACuc,gBAAgB,CAAC;EAC7F;EACA;AACJ;AACA;AACA;EACI8E,eAAeA,CAACzH,OAAO,EAAElB,KAAK,EAAE;IAC5B,MAAM4I,cAAc,GAAG,IAAI,CAACnD,eAAe;IAC3C,IAAI,CAACmD,cAAc,CAACrgB,GAAG,CAAC2Y,OAAO,CAAC,IAC5BlB,KAAK,CAAC6G,KAAK,CAACxN,IAAI,IAAI;MAChB;MACA;MACA;MACA;MACA,OAAO,IAAI,CAACyL,cAAc,CAACzL,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,CAACkM,WAAW,CAAC9b,OAAO,CAAC4P,IAAI,CAAC,GAAG,CAAC,CAAC;IACjF,CAAC,CAAC,EAAE;MACJuP,cAAc,CAAC3c,GAAG,CAACiV,OAAO,CAAC;MAC3B,IAAI,CAACsF,qBAAqB,CAAC,CAAC;MAC5B,IAAI,CAACyB,qBAAqB,CAAC,CAAC;MAC5B,IAAI,CAAChD,gBAAgB,CAACtQ,IAAI,CAAC;QACvBkU,SAAS,EAAE3H,OAAO;QAClB4H,QAAQ,EAAE,IAAI;QACd9I;MACJ,CAAC,CAAC;IACN;EACJ;EACA;AACJ;AACA;AACA;EACIkI,cAAcA,CAAChH,OAAO,EAAE;IACpB,IAAI,CAACuE,eAAe,CAAC1R,MAAM,CAACmN,OAAO,CAAC;IACpC,IAAI,CAACwE,2BAA2B,CAAC3S,WAAW,CAAC,CAAC;IAC9C,IAAI,CAACmS,gBAAgB,CAACvQ,IAAI,CAAC;MAAEkU,SAAS,EAAE3H,OAAO;MAAE4H,QAAQ,EAAE;IAAK,CAAC,CAAC;EACtE;EACA;AACJ;AACA;AACA;EACIb,qBAAqBA,CAAA,EAAG;IACpB,IAAI,CAACvC,2BAA2B,GAAG,IAAI,CAAC3X,iBAAiB,CACpD8K,QAAQ,CAAC,IAAI,CAAClX,cAAc,CAAC,CAAC,CAAC,CAC/BqR,SAAS,CAAC/X,KAAK,IAAI;MACpB,IAAI,IAAI,CAAC6W,UAAU,CAAC,CAAC,EAAE;QACnB,MAAM8L,gBAAgB,GAAG,IAAI,CAAC9O,gBAAgB,CAAClI,YAAY,CAAC3L,KAAK,CAAC;QAClE,IAAI2iB,gBAAgB,EAAE;UAClB,IAAI,CAACyH,aAAa,CAACnD,cAAc,CAACtE,gBAAgB,CAACpZ,GAAG,EAAEoZ,gBAAgB,CAACjZ,IAAI,CAAC;QAClF;MACJ,CAAC,MACI,IAAI,IAAI,CAACiR,WAAW,CAAC,CAAC,EAAE;QACzB,IAAI,CAAC4Q,qBAAqB,CAAC,CAAC;MAChC;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;EACI7kB,cAAcA,CAAA,EAAG;IACb,IAAI,CAAC,IAAI,CAAC0O,iBAAiB,EAAE;MACzB,MAAM8G,UAAU,GAAGxV,2DAAc,CAAC,IAAI,CAACwjB,UAAU,CAAC;MAClD,IAAI,CAAC9U,iBAAiB,GAAG8G,UAAU,IAAI,IAAI,CAAC7X,SAAS;IACzD;IACA,OAAO,IAAI,CAAC+Q,iBAAiB;EACjC;EACA;EACAkW,wBAAwBA,CAAA,EAAG;IACvB,MAAMI,YAAY,GAAG,IAAI,CAACtB,aAAa,CAClCrD,sBAAsB,CAAC,CAAC,CACxB4E,MAAM,CAACvN,IAAI,IAAIA,IAAI,CAACvH,UAAU,CAAC,CAAC,CAAC;IACtC,IAAI,CAAC0T,SAAS,CAAC/e,OAAO,CAACya,OAAO,IAAIA,OAAO,CAACyH,eAAe,CAAC,IAAI,EAAEhC,YAAY,CAAC,CAAC;EAClF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,0BAA0BA,CAAC3iB,UAAU,EAAEa,QAAQ,EAAE;EACtD,MAAM;IAAEtB,GAAG;IAAEE,MAAM;IAAEG;EAAO,CAAC,GAAGI,UAAU;EAC1C,MAAMe,UAAU,GAAGnB,MAAM,GAAG2f,0BAA0B;EACtD,IAAI1e,QAAQ,IAAItB,GAAG,GAAGwB,UAAU,IAAIF,QAAQ,IAAItB,GAAG,GAAGwB,UAAU,EAAE;IAC9D,OAAOye,2BAA2B,CAAC4D,EAAE;EACzC,CAAC,MACI,IAAIviB,QAAQ,IAAIpB,MAAM,GAAGsB,UAAU,IAAIF,QAAQ,IAAIpB,MAAM,GAAGsB,UAAU,EAAE;IACzE,OAAOye,2BAA2B,CAAC8D,IAAI;EAC3C;EACA,OAAO9D,2BAA2B,CAACmB,IAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAASiC,4BAA4BA,CAAC5iB,UAAU,EAAEY,QAAQ,EAAE;EACxD,MAAM;IAAElB,IAAI;IAAEF,KAAK;IAAEG;EAAM,CAAC,GAAGK,UAAU;EACzC,MAAMc,UAAU,GAAGnB,KAAK,GAAG4f,0BAA0B;EACrD,IAAI3e,QAAQ,IAAIlB,IAAI,GAAGoB,UAAU,IAAIF,QAAQ,IAAIlB,IAAI,GAAGoB,UAAU,EAAE;IAChE,OAAO2e,6BAA6B,CAAC8D,IAAI;EAC7C,CAAC,MACI,IAAI3iB,QAAQ,IAAIpB,KAAK,GAAGsB,UAAU,IAAIF,QAAQ,IAAIpB,KAAK,GAAGsB,UAAU,EAAE;IACvE,OAAO2e,6BAA6B,CAAC+D,KAAK;EAC9C;EACA,OAAO/D,6BAA6B,CAACkB,IAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8B,0BAA0BA,CAACrjB,OAAO,EAAEY,UAAU,EAAEgP,SAAS,EAAEpO,QAAQ,EAAEC,QAAQ,EAAE;EACpF,MAAMijB,gBAAgB,GAAGnB,0BAA0B,CAAC3iB,UAAU,EAAEa,QAAQ,CAAC;EACzE,MAAMkjB,kBAAkB,GAAGnB,4BAA4B,CAAC5iB,UAAU,EAAEY,QAAQ,CAAC;EAC7E,IAAI2hB,uBAAuB,GAAG/C,2BAA2B,CAACmB,IAAI;EAC9D,IAAI6B,yBAAyB,GAAG/C,6BAA6B,CAACkB,IAAI;EAClE;EACA;EACA;EACA;EACA,IAAImD,gBAAgB,EAAE;IAClB,MAAMriB,SAAS,GAAGrC,OAAO,CAACqC,SAAS;IACnC,IAAIqiB,gBAAgB,KAAKtE,2BAA2B,CAAC4D,EAAE,EAAE;MACrD,IAAI3hB,SAAS,GAAG,CAAC,EAAE;QACf8gB,uBAAuB,GAAG/C,2BAA2B,CAAC4D,EAAE;MAC5D;IACJ,CAAC,MACI,IAAIhkB,OAAO,CAAC4kB,YAAY,GAAGviB,SAAS,GAAGrC,OAAO,CAAC6kB,YAAY,EAAE;MAC9D1B,uBAAuB,GAAG/C,2BAA2B,CAAC8D,IAAI;IAC9D;EACJ;EACA,IAAIS,kBAAkB,EAAE;IACpB,MAAMriB,UAAU,GAAGtC,OAAO,CAACsC,UAAU;IACrC,IAAIsN,SAAS,KAAK,KAAK,EAAE;MACrB,IAAI+U,kBAAkB,KAAKtE,6BAA6B,CAAC+D,KAAK,EAAE;QAC5D;QACA,IAAI9hB,UAAU,GAAG,CAAC,EAAE;UAChB8gB,yBAAyB,GAAG/C,6BAA6B,CAAC+D,KAAK;QACnE;MACJ,CAAC,MACI,IAAIpkB,OAAO,CAAC8kB,WAAW,GAAGxiB,UAAU,GAAGtC,OAAO,CAAC+kB,WAAW,EAAE;QAC7D3B,yBAAyB,GAAG/C,6BAA6B,CAAC8D,IAAI;MAClE;IACJ,CAAC,MACI;MACD,IAAIQ,kBAAkB,KAAKtE,6BAA6B,CAAC8D,IAAI,EAAE;QAC3D,IAAI7hB,UAAU,GAAG,CAAC,EAAE;UAChB8gB,yBAAyB,GAAG/C,6BAA6B,CAAC8D,IAAI;QAClE;MACJ,CAAC,MACI,IAAInkB,OAAO,CAAC8kB,WAAW,GAAGxiB,UAAU,GAAGtC,OAAO,CAAC+kB,WAAW,EAAE;QAC7D3B,yBAAyB,GAAG/C,6BAA6B,CAAC+D,KAAK;MACnE;IACJ;EACJ;EACA,OAAO,CAACjB,uBAAuB,EAAEC,yBAAyB,CAAC;AAC/D;;AAEA;AACA,MAAM4B,qBAAqB,GAAG;EAC1B9b,OAAO,EAAE;AACb,CAAC;AACD;AACA,MAAM+b,2BAA2B,GAAG;EAChClc,OAAO,EAAE,KAAK;EACdG,OAAO,EAAE;AACb,CAAC;AACD;AACA;AACA;AACA;AAHA,IAIMgc,aAAa;EAAnB,MAAMA,aAAa,CAAC;IAChB,OAAOzrB,IAAI,YAAA0rB,sBAAAxrB,iBAAA;MAAA,YAAAA,iBAAA,IAAwFurB,aAAa;IAAA;IAChH,OAAOE,IAAI,kBAD8EttB,+DAAE;MAAA4H,IAAA,EACJwlB,aAAa;MAAAI,SAAA;MAAAC,SAAA,gCAAmG,EAAE;MAAAC,KAAA;MAAAC,IAAA;MAAArd,QAAA,WAAAsd,uBAAAC,EAAA,EAAAC,GAAA;MAAA7M,MAAA;MAAA8M,aAAA;MAAAC,eAAA;IAAA;EAC7M;EAAC,OAHKZ,aAAa;AAAA;AAInB;EAAA,QAAAjrB,SAAA,oBAAAA,SAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAJA,IAKM8rB,gBAAgB;EAAtB,MAAMA,gBAAgB,CAAC;IACnBvc,OAAO,GAAGzR,qDAAM,CAACiE,iDAAM,CAAC;IACxBf,SAAS,GAAGlD,qDAAM,CAACqC,mDAAQ,CAAC;IAC5B4rB,YAAY,GAAGjuB,qDAAM,CAACiG,yDAAsB,CAAC;IAC7C+I,SAAS,GAAGhP,qDAAM,CAACkE,2DAAgB,CAAC,CAACgqB,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC;IAC/DC,yBAAyB;IACzBC,OAAO,GAAG,IAAIrpB,yCAAO,CAAC,CAAC;IACvB;IACAspB,cAAc,GAAG,IAAI/f,GAAG,CAAC,CAAC;IAC1B;IACAggB,cAAc,GAAG,IAAIhgB,GAAG,CAAC,CAAC;IAC1B;IACAigB,oBAAoB,GAAGjsB,qDAAM,CAAC,EAAE,CAAC;IACjC;IACAksB,gBAAgB;IAChB;AACJ;AACA;AACA;IACIC,kBAAkB,GAAIxR,IAAI,IAAKA,IAAI,CAACvH,UAAU,CAAC,CAAC;IAChD;AACJ;AACA;AACA;AACA;IACIgZ,qBAAqB,GAAG,IAAI;IAC5B;AACJ;AACA;AACA;IACInS,WAAW,GAAG,IAAIxX,yCAAO,CAAC,CAAC;IAC3B;AACJ;AACA;AACA;IACIyX,SAAS,GAAG,IAAIzX,yCAAO,CAAC,CAAC;IACzBtD,WAAWA,CAAA,EAAG,CAAE;IAChB;IACAuoB,qBAAqBA,CAAC5M,IAAI,EAAE;MACxB,IAAI,CAAC,IAAI,CAACiR,cAAc,CAACliB,GAAG,CAACiR,IAAI,CAAC,EAAE;QAChC,IAAI,CAACiR,cAAc,CAACxe,GAAG,CAACuN,IAAI,CAAC;MACjC;IACJ;IACA;IACA9H,gBAAgBA,CAACoO,IAAI,EAAE;MACnB,IAAI,CAAC4K,cAAc,CAACze,GAAG,CAAC6T,IAAI,CAAC;MAC7B;MACA;MACA;MACA,IAAI,IAAI,CAAC4K,cAAc,CAACrD,IAAI,KAAK,CAAC,EAAE;QAChC,IAAI,CAACxZ,OAAO,CAAC0E,iBAAiB,CAAC,MAAM;UACjC;UACA;UACA,IAAI,CAACgY,yBAAyB,GAAG,CAAC;UAClC,IAAI,CAACA,yBAAyB,GAAG,IAAI,CAACnf,SAAS,CAACiB,MAAM,CAAC,IAAI,CAAC/M,SAAS,EAAE,WAAW,EAAE,IAAI,CAACyrB,4BAA4B,EAAEzB,2BAA2B,CAAC;QACvJ,CAAC,CAAC;MACN;IACJ;IACA;IACAjD,mBAAmBA,CAAC7M,IAAI,EAAE;MACtB,IAAI,CAACiR,cAAc,CAAC1W,MAAM,CAACyF,IAAI,CAAC;IACpC;IACA;IACAnG,cAAcA,CAACyM,IAAI,EAAE;MACjB,IAAI,CAAC4K,cAAc,CAAC3W,MAAM,CAAC+L,IAAI,CAAC;MAChC,IAAI,CAACpJ,YAAY,CAACoJ,IAAI,CAAC;MACvB,IAAI,IAAI,CAAC4K,cAAc,CAACrD,IAAI,KAAK,CAAC,EAAE;QAChC,IAAI,CAACkD,yBAAyB,GAAG,CAAC;MACtC;IACJ;IACA;AACJ;AACA;AACA;AACA;IACItR,aAAaA,CAAC6G,IAAI,EAAE7kB,KAAK,EAAE;MACvB;MACA,IAAI,IAAI,CAAC0vB,oBAAoB,CAAC,CAAC,CAAClhB,OAAO,CAACqW,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;QAChD;MACJ;MACA,IAAI,CAACuK,YAAY,CAACW,IAAI,CAACzB,aAAa,CAAC;MACrC,IAAI,CAACoB,oBAAoB,CAACM,MAAM,CAACC,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAEpL,IAAI,CAAC,CAAC;MACnE,IAAI,IAAI,CAAC6K,oBAAoB,CAAC,CAAC,CAACtnB,MAAM,KAAK,CAAC,EAAE;QAC1C;QACA;QACA;QACA,MAAM6T,YAAY,GAAGjc,KAAK,CAAC8I,IAAI,CAAConB,UAAU,CAAC,OAAO,CAAC;QACnD,MAAMC,eAAe,GAAIC,CAAC,IAAK,IAAI,CAACzS,SAAS,CAACjE,IAAI,CAAC0W,CAAC,CAAC;QACrD,MAAMC,MAAM,GAAG;QACX;QACA;QACA,CAAC,QAAQ,EAAGD,CAAC,IAAK,IAAI,CAACb,OAAO,CAAC7V,IAAI,CAAC0W,CAAC,CAAC,EAAEhC,qBAAqB,CAAC;QAC9D;QACA;QACA;QACA;QACA,CAAC,aAAa,EAAE,IAAI,CAACkC,4BAA4B,EAAEjC,2BAA2B,CAAC,CAClF;QACD,IAAIpS,YAAY,EAAE;UACdoU,MAAM,CAAC3J,IAAI,CAAC,CAAC,UAAU,EAAEyJ,eAAe,EAAE/B,qBAAqB,CAAC,EAAE,CAAC,aAAa,EAAE+B,eAAe,EAAE/B,qBAAqB,CAAC,CAAC;QAC9H,CAAC,MACI;UACDiC,MAAM,CAAC3J,IAAI,CAAC,CAAC,SAAS,EAAEyJ,eAAe,EAAE/B,qBAAqB,CAAC,CAAC;QACpE;QACA;QACA;QACA,IAAI,CAACnS,YAAY,EAAE;UACfoU,MAAM,CAAC3J,IAAI,CAAC,CACR,WAAW,EACV0J,CAAC,IAAK,IAAI,CAAC1S,WAAW,CAAChE,IAAI,CAAC0W,CAAC,CAAC,EAC/B/B,2BAA2B,CAC9B,CAAC;QACN;QACA,IAAI,CAACzb,OAAO,CAAC0E,iBAAiB,CAAC,MAAM;UACjC,IAAI,CAACqY,gBAAgB,GAAGU,MAAM,CAACtpB,GAAG,CAAC,CAAC,CAACgC,IAAI,EAAEoI,OAAO,EAAEof,OAAO,CAAC,KAAK,IAAI,CAACpgB,SAAS,CAACiB,MAAM,CAAC,IAAI,CAAC/M,SAAS,EAAE0E,IAAI,EAAEoI,OAAO,EAAEof,OAAO,CAAC,CAAC;QACnI,CAAC,CAAC;MACN;IACJ;IACA;IACA9U,YAAYA,CAACoJ,IAAI,EAAE;MACf,IAAI,CAAC6K,oBAAoB,CAACM,MAAM,CAACC,SAAS,IAAI;QAC1C,MAAM/J,KAAK,GAAG+J,SAAS,CAACzhB,OAAO,CAACqW,IAAI,CAAC;QACrC,IAAIqB,KAAK,GAAG,CAAC,CAAC,EAAE;UACZ+J,SAAS,CAAC7L,MAAM,CAAC8B,KAAK,EAAE,CAAC,CAAC;UAC1B,OAAO,CAAC,GAAG+J,SAAS,CAAC;QACzB;QACA,OAAOA,SAAS;MACpB,CAAC,CAAC;MACF,IAAI,IAAI,CAACP,oBAAoB,CAAC,CAAC,CAACtnB,MAAM,KAAK,CAAC,EAAE;QAC1C,IAAI,CAACooB,qBAAqB,CAAC,CAAC;MAChC;IACJ;IACA;IACA3Z,UAAUA,CAACgO,IAAI,EAAE;MACb,OAAO,IAAI,CAAC6K,oBAAoB,CAAC,CAAC,CAAClhB,OAAO,CAACqW,IAAI,CAAC,GAAG,CAAC,CAAC;IACzD;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;IACIjH,QAAQA,CAAC1B,UAAU,EAAE;MACjB,MAAMuU,OAAO,GAAG,CAAC,IAAI,CAAClB,OAAO,CAAC;MAC9B,IAAIrT,UAAU,IAAIA,UAAU,KAAK,IAAI,CAAC7X,SAAS,EAAE;QAC7C;QACA;QACA;QACAosB,OAAO,CAAC/J,IAAI,CAAC,IAAIpgB,4CAAU,CAAEoqB,QAAQ,IAAK;UACtC,OAAO,IAAI,CAAC9d,OAAO,CAAC0E,iBAAiB,CAAC,MAAM;YACxC,MAAM4K,OAAO,GAAG,IAAI,CAAC/R,SAAS,CAACiB,MAAM,CAAC8K,UAAU,EAAE,QAAQ,EAAGlc,KAAK,IAAK;cACnE,IAAI,IAAI,CAAC0vB,oBAAoB,CAAC,CAAC,CAACtnB,MAAM,EAAE;gBACpCsoB,QAAQ,CAAChX,IAAI,CAAC1Z,KAAK,CAAC;cACxB;YACJ,CAAC,EAAEouB,qBAAqB,CAAC;YACzB,OAAO,MAAM;cACTlM,OAAO,CAAC,CAAC;YACb,CAAC;UACL,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;MACP;MACA,OAAO3b,2CAAK,CAAC,GAAGkqB,OAAO,CAAC;IAC5B;IACA;AACJ;AACA;AACA;AACA;IACIE,qBAAqBA,CAAC9oB,IAAI,EAAE+oB,OAAO,EAAE;MACjC,IAAI,CAACf,qBAAqB,KAAK,IAAIgB,OAAO,CAAC,CAAC;MAC5C,IAAI,CAAChB,qBAAqB,CAACjrB,GAAG,CAACiD,IAAI,EAAE+oB,OAAO,CAAC;IACjD;IACA;AACJ;AACA;AACA;IACIE,mBAAmBA,CAACjpB,IAAI,EAAE;MACtB,IAAI,CAACgoB,qBAAqB,EAAE/W,MAAM,CAACjR,IAAI,CAAC;IAC5C;IACA;AACJ;AACA;AACA;IACIkpB,uBAAuBA,CAAClpB,IAAI,EAAE;MAC1B,OAAO,IAAI,CAACgoB,qBAAqB,EAAE/jB,GAAG,CAACjE,IAAI,CAAC,IAAI,IAAI;IACxD;IACAhD,WAAWA,CAAA,EAAG;MACV,IAAI,CAAC4qB,cAAc,CAACjkB,OAAO,CAACwlB,QAAQ,IAAI,IAAI,CAAC5Y,cAAc,CAAC4Y,QAAQ,CAAC,CAAC;MACtE,IAAI,CAACxB,cAAc,CAAChkB,OAAO,CAACwlB,QAAQ,IAAI,IAAI,CAAC5F,mBAAmB,CAAC4F,QAAQ,CAAC,CAAC;MAC3E,IAAI,CAACnB,qBAAqB,GAAG,IAAI;MACjC,IAAI,CAACW,qBAAqB,CAAC,CAAC;MAC5B,IAAI,CAAC9S,WAAW,CAAC5Y,QAAQ,CAAC,CAAC;MAC3B,IAAI,CAAC6Y,SAAS,CAAC7Y,QAAQ,CAAC,CAAC;IAC7B;IACA;AACJ;AACA;AACA;IACIwrB,4BAA4B,GAAItwB,KAAK,IAAK;MACtC,IAAI,IAAI,CAAC0vB,oBAAoB,CAAC,CAAC,CAACtnB,MAAM,GAAG,CAAC,EAAE;QACxCpI,KAAK,CAAC6a,cAAc,CAAC,CAAC;MAC1B;IACJ,CAAC;IACD;IACAiV,4BAA4B,GAAI9vB,KAAK,IAAK;MACtC,IAAI,IAAI,CAAC0vB,oBAAoB,CAAC,CAAC,CAACtnB,MAAM,GAAG,CAAC,EAAE;QACxC;QACA;QACA;QACA,IAAI,IAAI,CAACsnB,oBAAoB,CAAC,CAAC,CAACuB,IAAI,CAAC,IAAI,CAACrB,kBAAkB,CAAC,EAAE;UAC3D5vB,KAAK,CAAC6a,cAAc,CAAC,CAAC;QAC1B;QACA,IAAI,CAAC6C,WAAW,CAAChE,IAAI,CAAC1Z,KAAK,CAAC;MAChC;IACJ,CAAC;IACD;IACAwwB,qBAAqBA,CAAA,EAAG;MACpB,IAAI,CAACb,gBAAgB,EAAEnkB,OAAO,CAAC0W,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;MACpD,IAAI,CAACyN,gBAAgB,GAAGlY,SAAS;IACrC;IACA,OAAO5U,IAAI,YAAAquB,yBAAAnuB,iBAAA;MAAA,YAAAA,iBAAA,IAAwFosB,gBAAgB;IAAA;IACnH,OAAOnsB,KAAK,kBA1O6E9B,gEAAE;MAAAgC,KAAA,EA0OYisB,gBAAgB;MAAAhsB,OAAA,EAAhBgsB,gBAAgB,CAAAtsB,IAAA;MAAAO,UAAA,EAAc;IAAM;EAC/I;EAAC,OA/NK+rB,gBAAgB;AAAA;AAgOtB;EAAA,QAAA9rB,SAAA,oBAAAA,SAAA;AAAA;;AAKA;AACA,MAAM8tB,cAAc,GAAG;EACnB9W,kBAAkB,EAAE,CAAC;EACrB2H,+BAA+B,EAAE;AACrC,CAAC;AACD;AACA;AACA;AAFA,IAGMoP,QAAQ;EAAd,MAAMA,QAAQ,CAAC;IACX/sB,SAAS,GAAGlD,qDAAM,CAACqC,mDAAQ,CAAC;IAC5BoP,OAAO,GAAGzR,qDAAM,CAACiE,iDAAM,CAAC;IACxByN,cAAc,GAAG1R,qDAAM,CAACkG,yDAAa,CAAC;IACtCyL,iBAAiB,GAAG3R,qDAAM,CAACguB,gBAAgB,CAAC;IAC5Chf,SAAS,GAAGhP,qDAAM,CAACkE,2DAAgB,CAAC,CAACgqB,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC;IAC/DzsB,WAAWA,CAAA,EAAG,CAAE;IAChB;AACJ;AACA;AACA;AACA;IACIyuB,UAAUA,CAACjoB,OAAO,EAAEkoB,MAAM,GAAGH,cAAc,EAAE;MACzC,OAAO,IAAIze,OAAO,CAACtJ,OAAO,EAAEkoB,MAAM,EAAE,IAAI,CAACjtB,SAAS,EAAE,IAAI,CAACuO,OAAO,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC3C,SAAS,CAAC;IAClI;IACA;AACJ;AACA;AACA;IACIohB,cAAcA,CAACnoB,OAAO,EAAE;MACpB,OAAO,IAAIsgB,WAAW,CAACtgB,OAAO,EAAE,IAAI,CAAC0J,iBAAiB,EAAE,IAAI,CAACzO,SAAS,EAAE,IAAI,CAACuO,OAAO,EAAE,IAAI,CAACC,cAAc,CAAC;IAC9G;IACA,OAAOhQ,IAAI,YAAA2uB,iBAAAzuB,iBAAA;MAAA,YAAAA,iBAAA,IAAwFquB,QAAQ;IAAA;IAC3G,OAAOpuB,KAAK,kBAhR6E9B,gEAAE;MAAAgC,KAAA,EAgRYkuB,QAAQ;MAAAjuB,OAAA,EAARiuB,QAAQ,CAAAvuB,IAAA;MAAAO,UAAA,EAAc;IAAM;EACvI;EAAC,OAxBKguB,QAAQ;AAAA;AAyBd;EAAA,QAAA/tB,SAAA,oBAAAA,SAAA;AAAA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMouB,eAAe,gBAAG,IAAIluB,yDAAc,CAAC,iBAAiB,CAAC;;AAE7D;AACA;AACA;AACA;AACA;AACA,SAASmuB,iBAAiBA,CAAC7pB,IAAI,EAAEkB,IAAI,EAAE;EACnC,IAAIlB,IAAI,CAAC8E,QAAQ,KAAK,CAAC,EAAE;IACrB,MAAMqf,KAAK,CAAC,GAAGjjB,IAAI,wCAAwC,GAAG,0BAA0BlB,IAAI,CAACK,QAAQ,IAAI,CAAC;EAC9G;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMypB,eAAe,gBAAG,IAAIpuB,yDAAc,CAAC,eAAe,CAAC;AAC3D;AAAA,IACMquB,aAAa;EAAnB,MAAMA,aAAa,CAAC;IAChBxoB,OAAO,GAAGjI,qDAAM,CAACmE,qDAAU,CAAC;IAC5BusB,WAAW,GAAG1wB,qDAAM,CAACswB,eAAe,EAAE;MAAEntB,QAAQ,EAAE,IAAI;MAAEwtB,QAAQ,EAAE;IAAK,CAAC,CAAC;IACzEhf,iBAAiB,GAAG3R,qDAAM,CAACguB,gBAAgB,CAAC;IAC5C;IACA4C,aAAa,GAAG,IAAI7rB,yCAAO,CAAC,CAAC;IAC7B;IACA,IAAIsP,QAAQA,CAAA,EAAG;MACX,OAAO,IAAI,CAACC,SAAS;IACzB;IACA,IAAID,QAAQA,CAACzU,KAAK,EAAE;MAChB,IAAI,CAAC0U,SAAS,GAAG1U,KAAK;MACtB,IAAI,CAACgxB,aAAa,CAACrY,IAAI,CAAC,IAAI,CAAC;IACjC;IACAjE,SAAS,GAAG,KAAK;IACjB7S,WAAWA,CAAA,EAAG;MACV,IAAI,OAAOS,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;QAC/CquB,iBAAiB,CAAC,IAAI,CAACtoB,OAAO,CAAC4oB,aAAa,EAAE,eAAe,CAAC;MAClE;MACA,IAAI,CAACH,WAAW,EAAEI,UAAU,CAAC,IAAI,CAAC;IACtC;IACAC,eAAeA,CAAA,EAAG;MACd,IAAI,CAAC,IAAI,CAACL,WAAW,EAAE;QACnB,IAAIthB,MAAM,GAAG,IAAI,CAACnH,OAAO,CAAC4oB,aAAa,CAACvL,aAAa;QACrD,OAAOlW,MAAM,EAAE;UACX,MAAM4hB,GAAG,GAAG,IAAI,CAACrf,iBAAiB,CAACie,uBAAuB,CAACxgB,MAAM,CAAC;UAClE,IAAI4hB,GAAG,EAAE;YACL,IAAI,CAACN,WAAW,GAAGM,GAAG;YACtBA,GAAG,CAACF,UAAU,CAAC,IAAI,CAAC;YACpB;UACJ;UACA1hB,MAAM,GAAGA,MAAM,CAACkW,aAAa;QACjC;MACJ;IACJ;IACA5hB,WAAWA,CAAA,EAAG;MACV,IAAI,CAACgtB,WAAW,EAAEO,aAAa,CAAC,IAAI,CAAC;MACrC,IAAI,CAACL,aAAa,CAACjtB,QAAQ,CAAC,CAAC;IACjC;IACA,OAAOjC,IAAI,YAAAwvB,sBAAAtvB,iBAAA;MAAA,YAAAA,iBAAA,IAAwF6uB,aAAa;IAAA;IAChH,OAAOU,IAAI,kBAzV8EpxB,+DAAE;MAAA4H,IAAA,EAyVJ8oB,aAAa;MAAAlD,SAAA;MAAAC,SAAA;MAAA6D,MAAA;QAAAhd,QAAA,2CAA6GjQ,2DAAgB;MAAA;MAAAktB,QAAA,GAzVxIvxB,gEAAE,CAyVmM,CAAC;QAAEyxB,OAAO,EAAEhB,eAAe;QAAEiB,WAAW,EAAEhB;MAAc,CAAC,CAAC;IAAA;EAC5V;EAAC,OAzCKA,aAAa;AAAA;AA0CnB;EAAA,QAAAvuB,SAAA,oBAAAA,SAAA;AAAA;;AAcA;AACA;AACA;AACA;AACA,MAAMwvB,eAAe,gBAAG,IAAItvB,yDAAc,CAAC,iBAAiB,CAAC;;AAE7D;AACA;AACA;AACA;AACA;AACA,MAAMuvB,aAAa,gBAAG,IAAIvvB,yDAAc,CAAC,aAAa,CAAC;AACvD;AAAA,IACMwvB,OAAO;EAAb,MAAMA,OAAO,CAAC;IACV3pB,OAAO,GAAGjI,qDAAM,CAACmE,qDAAU,CAAC;IAC5B6W,aAAa,GAAGhb,qDAAM,CAAC2xB,aAAa,EAAE;MAAExuB,QAAQ,EAAE,IAAI;MAAEwtB,QAAQ,EAAE;IAAK,CAAC,CAAC;IACzElf,OAAO,GAAGzR,qDAAM,CAACiE,iDAAM,CAAC;IACxB4tB,iBAAiB,GAAG7xB,qDAAM,CAACuE,2DAAgB,CAAC;IAC5CutB,IAAI,GAAG9xB,qDAAM,CAAC+C,2DAAc,EAAE;MAAEI,QAAQ,EAAE;IAAK,CAAC,CAAC;IACjD4uB,kBAAkB,GAAG/xB,qDAAM,CAACwE,4DAAiB,CAAC;IAC9CwtB,WAAW,GAAGhyB,qDAAM,CAACwwB,eAAe,EAAE;MAAErtB,QAAQ,EAAE,IAAI;MAAE8uB,IAAI,EAAE;IAAK,CAAC,CAAC;IACrEvB,WAAW,GAAG1wB,qDAAM,CAACswB,eAAe,EAAE;MAAEntB,QAAQ,EAAE,IAAI;MAAEwtB,QAAQ,EAAE;IAAK,CAAC,CAAC;IACzEhf,iBAAiB,GAAG3R,qDAAM,CAACguB,gBAAgB,CAAC;IAC5CkE,UAAU,GAAG,IAAIntB,yCAAO,CAAC,CAAC;IAC1B8O,QAAQ,GAAG,IAAIxO,iDAAe,CAAC,EAAE,CAAC;IAClCsJ,gBAAgB;IAChBiF,oBAAoB;IACpB;IACAue,QAAQ;IACR;IACAld,IAAI;IACJ;IACAf,QAAQ;IACR;AACJ;AACA;AACA;AACA;IACIke,mBAAmB;IACnB;AACJ;AACA;AACA;AACA;AACA;IACI1b,eAAe;IACf;AACJ;AACA;AACA;IACIvC,cAAc;IACd;AACJ;AACA;AACA;IACIke,gBAAgB;IAChB;IACA,IAAIhe,QAAQA,CAAA,EAAG;MACX,OAAO,IAAI,CAACC,SAAS,IAAI,CAAC,EAAE,IAAI,CAAC0G,aAAa,IAAI,IAAI,CAACA,aAAa,CAAC3G,QAAQ,CAAC;IAClF;IACA,IAAIA,QAAQA,CAACzU,KAAK,EAAE;MAChB,IAAI,CAAC0U,SAAS,GAAG1U,KAAK;MACtB,IAAI,CAACuyB,QAAQ,CAAC9d,QAAQ,GAAG,IAAI,CAACC,SAAS;IAC3C;IACAA,SAAS;IACT;AACJ;AACA;AACA;AACA;AACA;IACIY,iBAAiB;IACjB;IACA/E,YAAY;IACZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIuR,gBAAgB;IAChB;AACJ;AACA;AACA;IACItN,KAAK,GAAG,CAAC;IACT;IACAM,OAAO,GAAG,IAAInS,uDAAY,CAAC,CAAC;IAC5B;IACAoS,QAAQ,GAAG,IAAIpS,uDAAY,CAAC,CAAC;IAC7B;IACAqS,KAAK,GAAG,IAAIrS,uDAAY,CAAC,CAAC;IAC1B;IACAsS,OAAO,GAAG,IAAItS,uDAAY,CAAC,CAAC;IAC5B;IACAuS,MAAM,GAAG,IAAIvS,uDAAY,CAAC,CAAC;IAC3B;IACAwS,OAAO,GAAG,IAAIxS,uDAAY,CAAC,CAAC;IAC5B;AACJ;AACA;AACA;IACIyS,KAAK,GAAG,IAAI7P,4CAAU,CAAEoqB,QAAQ,IAAK;MACjC,MAAM+C,YAAY,GAAG,IAAI,CAACH,QAAQ,CAACnd,KAAK,CACnC+W,IAAI,CAACnmB,mDAAG,CAAC2sB,UAAU,KAAK;QACzB7qB,MAAM,EAAE,IAAI;QACZkR,eAAe,EAAE2Z,UAAU,CAAC3Z,eAAe;QAC3C/Z,KAAK,EAAE0zB,UAAU,CAAC1zB,KAAK;QACvBub,KAAK,EAAEmY,UAAU,CAACnY,KAAK;QACvBF,QAAQ,EAAEqY,UAAU,CAACrY;MACzB,CAAC,CAAC,CAAC,CAAC,CACCtD,SAAS,CAAC2Y,QAAQ,CAAC;MACxB,OAAO,MAAM;QACT+C,YAAY,CAAC3b,WAAW,CAAC,CAAC;MAC9B,CAAC;IACL,CAAC,CAAC;IACF6b,SAAS,GAAGxyB,qDAAM,CAACyE,mDAAQ,CAAC;IAC5BhD,WAAWA,CAAA,EAAG;MACV,MAAMuZ,aAAa,GAAG,IAAI,CAACA,aAAa;MACxC,MAAMmV,MAAM,GAAGnwB,qDAAM,CAAC0xB,eAAe,EAAE;QAAEvuB,QAAQ,EAAE;MAAK,CAAC,CAAC;MAC1D,MAAMsvB,QAAQ,GAAGzyB,qDAAM,CAACiwB,QAAQ,CAAC;MACjC,IAAI,CAACkC,QAAQ,GAAGM,QAAQ,CAACvC,UAAU,CAAC,IAAI,CAACjoB,OAAO,EAAE;QAC9CiR,kBAAkB,EAAEiX,MAAM,IAAIA,MAAM,CAACjX,kBAAkB,IAAI,IAAI,GAAGiX,MAAM,CAACjX,kBAAkB,GAAG,CAAC;QAC/F2H,+BAA+B,EAAEsP,MAAM,IAAIA,MAAM,CAACtP,+BAA+B,IAAI,IAAI,GACnFsP,MAAM,CAACtP,+BAA+B,GACtC,CAAC;QACPrF,MAAM,EAAE2U,MAAM,EAAE3U;MACpB,CAAC,CAAC;MACF,IAAI,CAAC2W,QAAQ,CAACld,IAAI,GAAG,IAAI;MACzB,IAAI,CAACtD,iBAAiB,CAAC6d,qBAAqB,CAAC,IAAI,CAACvnB,OAAO,CAAC4oB,aAAa,EAAE,IAAI,CAAC;MAC9E,IAAIV,MAAM,EAAE;QACR,IAAI,CAACuC,eAAe,CAACvC,MAAM,CAAC;MAChC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAInV,aAAa,EAAE;QACf,IAAI,CAACmX,QAAQ,CAACra,kBAAkB,CAACkD,aAAa,CAAC2X,YAAY,CAAC;QAC5D3X,aAAa,CAAC4X,OAAO,CAAC,IAAI,CAAC;QAC3B;QACA5X,aAAa,CAAC2X,YAAY,CAACle,aAAa,CAACsX,IAAI,CAACpmB,yDAAS,CAAC,IAAI,CAACusB,UAAU,CAAC,CAAC,CAACtb,SAAS,CAAC,MAAM;UACtF,IAAI,CAACub,QAAQ,CAAC/d,KAAK,GAAG,IAAI,CAACA,KAAK;QACpC,CAAC,CAAC;MACN;MACA,IAAI,CAACye,WAAW,CAAC,IAAI,CAACV,QAAQ,CAAC;MAC/B,IAAI,CAACW,aAAa,CAAC,IAAI,CAACX,QAAQ,CAAC;IACrC;IACA;AACJ;AACA;AACA;IACI5c,qBAAqBA,CAAA,EAAG;MACpB,OAAO,IAAI,CAAC4c,QAAQ,CAAC5c,qBAAqB,CAAC,CAAC;IAChD;IACA;IACAC,cAAcA,CAAA,EAAG;MACb,OAAO,IAAI,CAAC2c,QAAQ,CAAC3c,cAAc,CAAC,CAAC;IACzC;IACA;IACA2B,KAAKA,CAAA,EAAG;MACJ,IAAI,CAACgb,QAAQ,CAAChb,KAAK,CAAC,CAAC;IACzB;IACA;IACAC,eAAeA,CAAA,EAAG;MACd,IAAI,CAAC+a,QAAQ,CAAC/a,eAAe,CAAC,CAAC;IACnC;IACA;AACJ;AACA;IACIY,mBAAmBA,CAAA,EAAG;MAClB,OAAO,IAAI,CAACma,QAAQ,CAACna,mBAAmB,CAAC,CAAC;IAC9C;IACA;AACJ;AACA;AACA;IACIC,mBAAmBA,CAACrY,KAAK,EAAE;MACvB,IAAI,CAACuyB,QAAQ,CAACla,mBAAmB,CAACrY,KAAK,CAAC;IAC5C;IACAmxB,eAAeA,CAAA,EAAG;MACd;MACA;MACA;MACA;MACArsB,8DAAe,CAAC,MAAM;QAClB,IAAI,CAACquB,kBAAkB,CAAC,CAAC;QACzB,IAAI,CAACC,qBAAqB,CAAC,CAAC;QAC5B,IAAI,CAACb,QAAQ,CAAC/d,KAAK,GAAG,IAAI,CAACA,KAAK;QAChC,IAAI,IAAI,CAACie,gBAAgB,EAAE;UACvB,IAAI,CAACF,QAAQ,CAACla,mBAAmB,CAAC,IAAI,CAACoa,gBAAgB,CAAC;QAC5D;MACJ,CAAC,EAAE;QAAEY,QAAQ,EAAE,IAAI,CAACT;MAAU,CAAC,CAAC;IACpC;IACAU,WAAWA,CAACC,OAAO,EAAE;MACjB,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;MACzD,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAkB,CAAC;MAClD;MACA;MACA,IAAIC,kBAAkB,IAAI,CAACA,kBAAkB,CAACE,WAAW,EAAE;QACvD,IAAI,CAACP,kBAAkB,CAAC,CAAC;MAC7B;MACA;MACA,IAAI,CAACZ,QAAQ,CAAC/d,KAAK,GAAG,IAAI,CAACA,KAAK;MAChC;MACA;MACA,IAAIif,cAAc,IAAI,CAACA,cAAc,CAACC,WAAW,IAAI,IAAI,CAACjB,gBAAgB,EAAE;QACxE,IAAI,CAACF,QAAQ,CAACla,mBAAmB,CAAC,IAAI,CAACoa,gBAAgB,CAAC;MAC5D;IACJ;IACA3uB,WAAWA,CAAA,EAAG;MACV,IAAI,IAAI,CAACsX,aAAa,EAAE;QACpB,IAAI,CAACA,aAAa,CAACuY,UAAU,CAAC,IAAI,CAAC;MACvC;MACA,IAAI,CAAC5hB,iBAAiB,CAACge,mBAAmB,CAAC,IAAI,CAAC1nB,OAAO,CAAC4oB,aAAa,CAAC;MACtE;MACA,IAAI,CAACpf,OAAO,CAAC0E,iBAAiB,CAAC,MAAM;QACjC,IAAI,CAACtC,QAAQ,CAAClQ,QAAQ,CAAC,CAAC;QACxB,IAAI,CAACuuB,UAAU,CAAC3Z,IAAI,CAAC,CAAC;QACtB,IAAI,CAAC2Z,UAAU,CAACvuB,QAAQ,CAAC,CAAC;QAC1B,IAAI,CAACwuB,QAAQ,CAACrb,OAAO,CAAC,CAAC;MAC3B,CAAC,CAAC;IACN;IACAga,UAAUA,CAACtc,MAAM,EAAE;MACf,MAAMoB,OAAO,GAAG,IAAI,CAAC/B,QAAQ,CAAC2f,QAAQ,CAAC,CAAC;MACxC5d,OAAO,CAAC2P,IAAI,CAAC/Q,MAAM,CAAC;MACpB,IAAI,CAACX,QAAQ,CAAC0E,IAAI,CAAC3C,OAAO,CAAC;IAC/B;IACAqb,aAAaA,CAACzc,MAAM,EAAE;MAClB,MAAMoB,OAAO,GAAG,IAAI,CAAC/B,QAAQ,CAAC2f,QAAQ,CAAC,CAAC;MACxC,MAAMzO,KAAK,GAAGnP,OAAO,CAACvI,OAAO,CAACmH,MAAM,CAAC;MACrC,IAAIuQ,KAAK,GAAG,CAAC,CAAC,EAAE;QACZnP,OAAO,CAACqN,MAAM,CAAC8B,KAAK,EAAE,CAAC,CAAC;QACxB,IAAI,CAAClR,QAAQ,CAAC0E,IAAI,CAAC3C,OAAO,CAAC;MAC/B;IACJ;IACA6d,mBAAmBA,CAACnjB,OAAO,EAAE;MACzB,IAAI,CAAC3B,gBAAgB,GAAG2B,OAAO;IACnC;IACAojB,qBAAqBA,CAACpjB,OAAO,EAAE;MAC3B,IAAIA,OAAO,KAAK,IAAI,CAAC3B,gBAAgB,EAAE;QACnC,IAAI,CAACA,gBAAgB,GAAG,IAAI;MAChC;IACJ;IACAglB,uBAAuBA,CAACxY,WAAW,EAAE;MACjC,IAAI,CAACvH,oBAAoB,GAAGuH,WAAW;IAC3C;IACAyY,yBAAyBA,CAACzY,WAAW,EAAE;MACnC,IAAIA,WAAW,KAAK,IAAI,CAACvH,oBAAoB,EAAE;QAC3C,IAAI,CAACA,oBAAoB,GAAG,IAAI;MACpC;IACJ;IACA;IACAmf,kBAAkBA,CAAA,EAAG;MACjB,MAAM9qB,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC4oB,aAAa;MAC1C,IAAI7a,WAAW,GAAG/N,OAAO;MACzB,IAAI,IAAI,CAACmqB,mBAAmB,EAAE;QAC1Bpc,WAAW,GACP/N,OAAO,CAAC4rB,OAAO,KAAKvd,SAAS,GACvBrO,OAAO,CAAC4rB,OAAO,CAAC,IAAI,CAACzB,mBAAmB,CAAC;QACzC;QACEnqB,OAAO,CAACqd,aAAa,EAAEuO,OAAO,CAAC,IAAI,CAACzB,mBAAmB,CAAC;MACxE;MACA,IAAIpc,WAAW,KAAK,OAAO9T,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;QAChEquB,iBAAiB,CAACva,WAAW,EAAE,SAAS,CAAC;MAC7C;MACA,IAAI,CAACmc,QAAQ,CAAChd,eAAe,CAACa,WAAW,IAAI/N,OAAO,CAAC;IACzD;IACA;IACA6rB,mBAAmBA,CAAA,EAAG;MAClB,MAAMC,QAAQ,GAAG,IAAI,CAACrd,eAAe;MACrC,IAAI,CAACqd,QAAQ,EAAE;QACX,OAAO,IAAI;MACf;MACA,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;QAC9B,OAAO,IAAI,CAAC9rB,OAAO,CAAC4oB,aAAa,CAACgD,OAAO,CAACE,QAAQ,CAAC;MACvD;MACA,OAAOvuB,wDAAa,CAACuuB,QAAQ,CAAC;IAClC;IACA;IACAlB,WAAWA,CAAC7B,GAAG,EAAE;MACbA,GAAG,CAACvc,aAAa,CAACmC,SAAS,CAAC,MAAM;QAC9B,IAAI,CAACoa,GAAG,CAACtb,UAAU,CAAC,CAAC,EAAE;UACnB,MAAMpS,GAAG,GAAG,IAAI,CAACwuB,IAAI;UACrB,MAAM3d,cAAc,GAAG,IAAI,CAACA,cAAc;UAC1C,MAAMgH,WAAW,GAAG,IAAI,CAACvH,oBAAoB,GACvC;YACEvD,QAAQ,EAAE,IAAI,CAACuD,oBAAoB,CAACogB,WAAW;YAC/CnsB,OAAO,EAAE,IAAI,CAAC+L,oBAAoB,CAACqB,IAAI;YACvCxE,aAAa,EAAE,IAAI,CAACohB;UACxB,CAAC,GACC,IAAI;UACV,MAAMvhB,OAAO,GAAG,IAAI,CAAC3B,gBAAgB,GAC/B;YACE0B,QAAQ,EAAE,IAAI,CAAC1B,gBAAgB,CAACqlB,WAAW;YAC3CnsB,OAAO,EAAE,IAAI,CAAC8G,gBAAgB,CAACsG,IAAI;YACnCzE,SAAS,EAAE,IAAI,CAAC7B,gBAAgB,CAAC6B,SAAS;YAC1CC,aAAa,EAAE,IAAI,CAACohB;UACxB,CAAC,GACC,IAAI;UACVb,GAAG,CAAC3c,QAAQ,GAAG,IAAI,CAACA,QAAQ;UAC5B2c,GAAG,CAAC9c,QAAQ,GAAG,IAAI,CAACA,QAAQ;UAC5B8c,GAAG,CAAC5c,KAAK,GAAG,IAAI,CAACA,KAAK;UACtB4c,GAAG,CAAC7c,cAAc,GACd,OAAOA,cAAc,KAAK,QAAQ,IAAIA,cAAc,GAC9CA,cAAc,GACdzO,wDAAoB,CAACyO,cAAc,CAAC;UAC9C6c,GAAG,CAAC9b,iBAAiB,GAAG,IAAI,CAACA,iBAAiB;UAC9C8b,GAAG,CAAC7gB,YAAY,GAAG,IAAI,CAACA,YAAY;UACpC6gB,GAAG,CACEva,mBAAmB,CAAC,IAAI,CAACqd,mBAAmB,CAAC,CAAC,CAAC,CAC/C/d,uBAAuB,CAACoF,WAAW,CAAC,CACpCrF,mBAAmB,CAACxF,OAAO,CAAC,CAC5B6H,oBAAoB,CAAC,IAAI,CAACuJ,gBAAgB,IAAI,QAAQ,CAAC;UAC5D,IAAIpe,GAAG,EAAE;YACL0tB,GAAG,CAACpZ,aAAa,CAACtU,GAAG,CAAC1D,KAAK,CAAC;UAChC;QACJ;MACJ,CAAC,CAAC;MACF;MACAoxB,GAAG,CAACvc,aAAa,CAACsX,IAAI,CAAClmB,oDAAI,CAAC,CAAC,CAAC,CAAC,CAAC+Q,SAAS,CAAC,MAAM;QAC5C;QACA,IAAI,IAAI,CAAC8Z,WAAW,EAAE;UAClBM,GAAG,CAAC5b,UAAU,CAAC,IAAI,CAACsb,WAAW,CAACyB,QAAQ,CAAC;UACzC;QACJ;QACA;QACA;QACA,IAAI/iB,MAAM,GAAG,IAAI,CAACnH,OAAO,CAAC4oB,aAAa,CAACvL,aAAa;QACrD,OAAOlW,MAAM,EAAE;UACX,MAAM6kB,UAAU,GAAG,IAAI,CAACtiB,iBAAiB,CAACie,uBAAuB,CAACxgB,MAAM,CAAC;UACzE,IAAI6kB,UAAU,EAAE;YACZjD,GAAG,CAAC5b,UAAU,CAAC6e,UAAU,CAAC9B,QAAQ,CAAC;YACnC;UACJ;UACA/iB,MAAM,GAAGA,MAAM,CAACkW,aAAa;QACjC;MACJ,CAAC,CAAC;IACN;IACA;IACAwN,aAAaA,CAAC9B,GAAG,EAAE;MACfA,GAAG,CAACtc,OAAO,CAACkC,SAAS,CAACsd,UAAU,IAAI;QAChC,IAAI,CAACxf,OAAO,CAACyf,IAAI,CAAC;UAAEzsB,MAAM,EAAE,IAAI;UAAE7I,KAAK,EAAEq1B,UAAU,CAACr1B;QAAM,CAAC,CAAC;QAC5D;QACA;QACA,IAAI,CAACkzB,kBAAkB,CAACqC,YAAY,CAAC,CAAC;MAC1C,CAAC,CAAC;MACFpD,GAAG,CAACrc,QAAQ,CAACiC,SAAS,CAACyd,YAAY,IAAI;QACnC,IAAI,CAAC1f,QAAQ,CAACwf,IAAI,CAAC;UAAEzsB,MAAM,EAAE,IAAI;UAAE7I,KAAK,EAAEw1B,YAAY,CAACx1B;QAAM,CAAC,CAAC;MACnE,CAAC,CAAC;MACFmyB,GAAG,CAACpc,KAAK,CAACgC,SAAS,CAAC0d,QAAQ,IAAI;QAC5B,IAAI,CAAC1f,KAAK,CAACuf,IAAI,CAAC;UACZzsB,MAAM,EAAE,IAAI;UACZwS,QAAQ,EAAEoa,QAAQ,CAACpa,QAAQ;UAC3BW,SAAS,EAAEyZ,QAAQ,CAACzZ,SAAS;UAC7Bhc,KAAK,EAAEy1B,QAAQ,CAACz1B;QACpB,CAAC,CAAC;QACF;QACA;QACA,IAAI,CAACkzB,kBAAkB,CAACqC,YAAY,CAAC,CAAC;MAC1C,CAAC,CAAC;MACFpD,GAAG,CAACnc,OAAO,CAAC+B,SAAS,CAAC2d,UAAU,IAAI;QAChC,IAAI,CAAC1f,OAAO,CAACsf,IAAI,CAAC;UACdpc,SAAS,EAAEwc,UAAU,CAACxc,SAAS,CAAC9C,IAAI;UACpCgI,IAAI,EAAE,IAAI;UACVH,YAAY,EAAEyX,UAAU,CAACzX;QAC7B,CAAC,CAAC;MACN,CAAC,CAAC;MACFkU,GAAG,CAAClc,MAAM,CAAC8B,SAAS,CAAC4d,SAAS,IAAI;QAC9B,IAAI,CAAC1f,MAAM,CAACqf,IAAI,CAAC;UACbpc,SAAS,EAAEyc,SAAS,CAACzc,SAAS,CAAC9C,IAAI;UACnCgI,IAAI,EAAE;QACV,CAAC,CAAC;MACN,CAAC,CAAC;MACF+T,GAAG,CAACjc,OAAO,CAAC6B,SAAS,CAAC6d,SAAS,IAAI;QAC/B,IAAI,CAAC1f,OAAO,CAACof,IAAI,CAAC;UACdjX,aAAa,EAAEuX,SAAS,CAACvX,aAAa;UACtCJ,YAAY,EAAE2X,SAAS,CAAC3X,YAAY;UACpCK,iBAAiB,EAAEsX,SAAS,CAACtX,iBAAiB,CAAClI,IAAI;UACnD8C,SAAS,EAAE0c,SAAS,CAAC1c,SAAS,CAAC9C,IAAI;UACnC8H,sBAAsB,EAAE0X,SAAS,CAAC1X,sBAAsB;UACxDE,IAAI,EAAE,IAAI;UACV/C,QAAQ,EAAEua,SAAS,CAACva,QAAQ;UAC5BW,SAAS,EAAE4Z,SAAS,CAAC5Z,SAAS;UAC9Bhc,KAAK,EAAE41B,SAAS,CAAC51B;QACrB,CAAC,CAAC;MACN,CAAC,CAAC;IACN;IACA;IACA6zB,eAAeA,CAACvC,MAAM,EAAE;MACpB,MAAM;QAAEjc,QAAQ;QAAEC,cAAc;QAAEe,iBAAiB;QAAE/E,YAAY;QAAEuG,eAAe;QAAEge,gBAAgB;QAAEtC,mBAAmB;QAAE1Q;MAAkB,CAAC,GAAGyO,MAAM;MACvJ,IAAI,CAAC9b,QAAQ,GAAGqgB,gBAAgB,IAAI,IAAI,GAAG,KAAK,GAAGA,gBAAgB;MACnE,IAAI,CAACvgB,cAAc,GAAGA,cAAc,IAAI,CAAC;MACzC,IAAID,QAAQ,EAAE;QACV,IAAI,CAACA,QAAQ,GAAGA,QAAQ;MAC5B;MACA,IAAIgB,iBAAiB,EAAE;QACnB,IAAI,CAACA,iBAAiB,GAAGA,iBAAiB;MAC9C;MACA,IAAI/E,YAAY,EAAE;QACd,IAAI,CAACA,YAAY,GAAGA,YAAY;MACpC;MACA,IAAIuG,eAAe,EAAE;QACjB,IAAI,CAACA,eAAe,GAAGA,eAAe;MAC1C;MACA,IAAI0b,mBAAmB,EAAE;QACrB,IAAI,CAACA,mBAAmB,GAAGA,mBAAmB;MAClD;MACA,IAAI1Q,gBAAgB,EAAE;QAClB,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB;MAC5C;IACJ;IACA;IACAsR,qBAAqBA,CAAA,EAAG;MACpB;MACA,IAAI,CAACnf,QAAQ,CACRkY,IAAI;MACT;MACAjmB,mDAAG,CAAC8P,OAAO,IAAI;QACX,MAAM+e,cAAc,GAAG/e,OAAO,CAAChQ,GAAG,CAAC4O,MAAM,IAAIA,MAAM,CAACvM,OAAO,CAAC;QAC5D;QACA;QACA;QACA,IAAI,IAAI,CAAC+pB,WAAW,IAAI,IAAI,CAACI,mBAAmB,EAAE;UAC9CuC,cAAc,CAACpP,IAAI,CAAC,IAAI,CAACtd,OAAO,CAAC;QACrC;QACA,IAAI,CAACkqB,QAAQ,CAACxc,WAAW,CAACgf,cAAc,CAAC;MAC7C,CAAC,CAAC;MACF;MACA5uB,yDAAS,CAAE6P,OAAO,IAAK;QACnB,OAAOxQ,2CAAK,CAAC,GAAGwQ,OAAO,CAAChQ,GAAG,CAACqX,IAAI,IAAIA,IAAI,CAAC2T,aAAa,CAAC7E,IAAI,CAAC/lB,yDAAS,CAACiX,IAAI,CAAC,CAAC,CAAC,CAAC;MAClF,CAAC,CAAC,EAAEtX,yDAAS,CAAC,IAAI,CAACusB,UAAU,CAAC,CAAC,CAC1Btb,SAAS,CAACge,cAAc,IAAI;QAC7B;QACA,MAAMnF,OAAO,GAAG,IAAI,CAAC0C,QAAQ;QAC7B,MAAM3d,MAAM,GAAGogB,cAAc,CAAC3sB,OAAO,CAAC4oB,aAAa;QACnD+D,cAAc,CAACvgB,QAAQ,GAAGob,OAAO,CAAChY,aAAa,CAACjD,MAAM,CAAC,GAAGib,OAAO,CAAC/X,YAAY,CAAClD,MAAM,CAAC;MAC1F,CAAC,CAAC;IACN;IACA,OAAO9S,IAAI,YAAAmzB,gBAAAjzB,iBAAA;MAAA,YAAAA,iBAAA,IAAwFgwB,OAAO;IAAA;IAC1G,OAAOT,IAAI,kBA3yB8EpxB,+DAAE;MAAA4H,IAAA,EA2yBJiqB,OAAO;MAAArE,SAAA;MAAAC,SAAA;MAAAsH,QAAA;MAAAC,YAAA,WAAAC,qBAAApH,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UA3yBL7tB,yDAAE,sBAAA8tB,GAAA,CAAAxZ,QA2yBE,CAAC,sBAAPwZ,GAAA,CAAAsE,QAAA,CAAAzc,UAAA,CAAoB,CAAd,CAAC;QAAA;MAAA;MAAA2b,MAAA;QAAApc,IAAA;QAAAf,QAAA;QAAAke,mBAAA;QAAA1b,eAAA;QAAAvC,cAAA;QAAAke,gBAAA;QAAAhe,QAAA,qCAAoajQ,2DAAgB;QAAA8Q,iBAAA;QAAA/E,YAAA;QAAAuR,gBAAA;QAAAtN,KAAA,+BAAoOzP,0DAAe;MAAA;MAAAuwB,OAAA;QAAAxgB,OAAA;QAAAC,QAAA;QAAAC,KAAA;QAAAC,OAAA;QAAAC,MAAA;QAAAC,OAAA;QAAAC,KAAA;MAAA;MAAAmgB,QAAA;MAAA7D,QAAA,GA3yB5qBvxB,gEAAE,CA2yB6gC,CAAC;QAAEyxB,OAAO,EAAElB,eAAe;QAAEmB,WAAW,EAAEG;MAAQ,CAAC,CAAC,GA3yBnkC7xB,kEAAE;IAAA;EA4yB/F;EAAC,OAtbK6xB,OAAO;AAAA;AAubb;EAAA,QAAA1vB,SAAA,oBAAAA,SAAA;AAAA;;AAoEA;AACA;AACA;AACA;AACA;AACA,MAAMmzB,mBAAmB,gBAAG,IAAIjzB,yDAAc,CAAC,kBAAkB,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA;AALA,IAMMkzB,gBAAgB;EAAtB,MAAMA,gBAAgB,CAAC;IACnB;IACAC,MAAM,GAAG,IAAIjnB,GAAG,CAAC,CAAC;IAClB;IACA+F,QAAQ,GAAG,KAAK;IAChB3Q,WAAWA,CAAA,EAAG;MACV,IAAI,CAAC6xB,MAAM,CAACvrB,KAAK,CAAC,CAAC;IACvB;IACA,OAAOtI,IAAI,YAAA8zB,yBAAA5zB,iBAAA;MAAA,YAAAA,iBAAA,IAAwF0zB,gBAAgB;IAAA;IACnH,OAAOnE,IAAI,kBAt4B8EpxB,+DAAE;MAAA4H,IAAA,EAs4BJ2tB,gBAAgB;MAAA/H,SAAA;MAAA8D,MAAA;QAAAhd,QAAA,8CAAmHjQ,2DAAgB;MAAA;MAAA+wB,QAAA;MAAA7D,QAAA,GAt4BjJvxB,gEAAE,CAs4B+J,CAAC;QAAEyxB,OAAO,EAAE6D,mBAAmB;QAAE5D,WAAW,EAAE6D;MAAiB,CAAC,CAAC;IAAA;EAC/T;EAAC,OAVKA,gBAAgB;AAAA;AAWtB;EAAA,QAAApzB,SAAA,oBAAAA,SAAA;AAAA;;AAYA;AAAA,IACMuzB,WAAW;EAAjB,MAAMA,WAAW,CAAC;IACdxtB,OAAO,GAAGjI,qDAAM,CAACmE,qDAAU,CAAC;IAC5B4tB,kBAAkB,GAAG/xB,qDAAM,CAACwE,4DAAiB,CAAC;IAC9CkxB,iBAAiB,GAAG11B,qDAAM,CAACmG,4DAAgB,CAAC;IAC5C2rB,IAAI,GAAG9xB,qDAAM,CAAC+C,2DAAc,EAAE;MAAEI,QAAQ,EAAE;IAAK,CAAC,CAAC;IACjDwyB,MAAM,GAAG31B,qDAAM,CAACq1B,mBAAmB,EAAE;MACjClyB,QAAQ,EAAE,IAAI;MACdwtB,QAAQ,EAAE;IACd,CAAC,CAAC;IACF;IACAiF,iBAAiB;IACjB;IACA1D,UAAU,GAAG,IAAIntB,yCAAO,CAAC,CAAC;IAC1B;IACA8wB,0BAA0B;IAC1B;IACA,OAAOC,UAAU,GAAG,EAAE;IACtB;IACAnD,YAAY;IACZ;AACJ;AACA;AACA;AACA;IACIjI,WAAW,GAAG,EAAE;IAChB;IACAzV,IAAI;IACJ;IACAuO,WAAW;IACX;AACJ;AACA;AACA;IACIuS,EAAE,GAAG/1B,qDAAM,CAACuG,0DAAY,CAAC,CAACyvB,KAAK,CAAC,gBAAgB,CAAC;IACjD;IACA9hB,QAAQ;IACR;IACA,IAAIG,QAAQA,CAAA,EAAG;MACX,OAAO,IAAI,CAACC,SAAS,IAAK,CAAC,CAAC,IAAI,CAACqhB,MAAM,IAAI,IAAI,CAACA,MAAM,CAACthB,QAAS;IACpE;IACA,IAAIA,QAAQA,CAACzU,KAAK,EAAE;MAChB;MACA;MACA;MACA;MACA,IAAI,CAAC+yB,YAAY,CAACte,QAAQ,GAAG,IAAI,CAACC,SAAS,GAAG1U,KAAK;IACvD;IACA0U,SAAS;IACT;IACAyJ,eAAe;IACf;AACJ;AACA;AACA;IACI2K,cAAc,GAAGA,CAAA,KAAM,IAAI;IAC3B;IACAC,aAAa,GAAGA,CAAA,KAAM,IAAI;IAC1B;IACAH,kBAAkB;IAClB;IACAC,cAAc;IACd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIwN,wBAAwB;IACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIhU,SAAS;IACT;IACAlN,OAAO,GAAG,IAAIxS,uDAAY,CAAC,CAAC;IAC5B;AACJ;AACA;IACIsS,OAAO,GAAG,IAAItS,uDAAY,CAAC,CAAC;IAC5B;AACJ;AACA;AACA;IACIuS,MAAM,GAAG,IAAIvS,uDAAY,CAAC,CAAC;IAC3B;IACAqmB,MAAM,GAAG,IAAIrmB,uDAAY,CAAC,CAAC;IAC3B;AACJ;AACA;AACA;AACA;AACA;AACA;IACI2zB,cAAc,GAAG,IAAI5nB,GAAG,CAAC,CAAC;IAC1B7M,WAAWA,CAAA,EAAG;MACV,MAAMgxB,QAAQ,GAAGzyB,qDAAM,CAACiwB,QAAQ,CAAC;MACjC,MAAME,MAAM,GAAGnwB,qDAAM,CAAC0xB,eAAe,EAAE;QAAEvuB,QAAQ,EAAE;MAAK,CAAC,CAAC;MAC1D,IAAI,OAAOjB,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;QAC/CquB,iBAAiB,CAAC,IAAI,CAACtoB,OAAO,CAAC4oB,aAAa,EAAE,aAAa,CAAC;MAChE;MACA,IAAI,CAAC8B,YAAY,GAAGF,QAAQ,CAACrC,cAAc,CAAC,IAAI,CAACnoB,OAAO,CAAC;MACzD,IAAI,CAAC0qB,YAAY,CAAC1d,IAAI,GAAG,IAAI;MAC7B,IAAIkb,MAAM,EAAE;QACR,IAAI,CAACuC,eAAe,CAACvC,MAAM,CAAC;MAChC;MACA,IAAI,CAACwC,YAAY,CAACjK,cAAc,GAAG,CAAChF,IAAI,EAAEtG,IAAI,KAAK;QAC/C,OAAO,IAAI,CAACsL,cAAc,CAAChF,IAAI,CAACzO,IAAI,EAAEmI,IAAI,CAACnI,IAAI,CAAC;MACpD,CAAC;MACD,IAAI,CAAC0d,YAAY,CAAChK,aAAa,GAAG,CAAC5D,KAAK,EAAErB,IAAI,EAAEtG,IAAI,KAAK;QACrD,OAAO,IAAI,CAACuL,aAAa,CAAC5D,KAAK,EAAErB,IAAI,CAACzO,IAAI,EAAEmI,IAAI,CAACnI,IAAI,CAAC;MAC1D,CAAC;MACD,IAAI,CAACkhB,2BAA2B,CAAC,IAAI,CAACxD,YAAY,CAAC;MACnD,IAAI,CAACG,aAAa,CAAC,IAAI,CAACH,YAAY,CAAC;MACrC8C,WAAW,CAACK,UAAU,CAACvQ,IAAI,CAAC,IAAI,CAAC;MACjC,IAAI,IAAI,CAACoQ,MAAM,EAAE;QACb,IAAI,CAACA,MAAM,CAACJ,MAAM,CAAC1lB,GAAG,CAAC,IAAI,CAAC;MAChC;IACJ;IACA;IACA+iB,OAAOA,CAAC3V,IAAI,EAAE;MACV,IAAI,CAACiZ,cAAc,CAACrmB,GAAG,CAACoN,IAAI,CAAC;MAC7B;MACA;MACA,IAAI,IAAI,CAAC0V,YAAY,CAACjd,UAAU,CAAC,CAAC,EAAE;QAChC,IAAI,CAAC0gB,iBAAiB,CAAC,IAAI,CAACC,cAAc,CAAC,CAAC,CAACzwB,GAAG,CAACqX,IAAI,IAAIA,IAAI,CAACkV,QAAQ,CAAC,CAAC;MAC5E;IACJ;IACA;IACAoB,UAAUA,CAACtW,IAAI,EAAE;MACb,IAAI,CAACiZ,cAAc,CAACve,MAAM,CAACsF,IAAI,CAAC;MAChC;MACA;MACA;MACA,IAAI,IAAI,CAAC2Y,iBAAiB,EAAE;QACxB,MAAM7Q,KAAK,GAAG,IAAI,CAAC6Q,iBAAiB,CAACvoB,OAAO,CAAC4P,IAAI,CAACkV,QAAQ,CAAC;QAC3D,IAAIpN,KAAK,GAAG,CAAC,CAAC,EAAE;UACZ,IAAI,CAAC6Q,iBAAiB,CAAC3S,MAAM,CAAC8B,KAAK,EAAE,CAAC,CAAC;UACvC,IAAI,CAACqR,iBAAiB,CAAC,IAAI,CAACR,iBAAiB,CAAC;QAClD;MACJ;IACJ;IACA;IACAS,cAAcA,CAAA,EAAG;MACb,OAAOxlB,KAAK,CAAC6R,IAAI,CAAC,IAAI,CAACwT,cAAc,CAAC,CAACpS,IAAI,CAAC,CAACvkB,CAAC,EAAE0mB,CAAC,KAAK;QAClD,MAAMqQ,gBAAgB,GAAG/2B,CAAC,CAAC4yB,QAAQ,CAC9B1c,iBAAiB,CAAC,CAAC,CACnB8gB,uBAAuB,CAACtQ,CAAC,CAACkM,QAAQ,CAAC1c,iBAAiB,CAAC,CAAC,CAAC;QAC5D;QACA;QACA;QACA,OAAO6gB,gBAAgB,GAAGE,IAAI,CAACC,2BAA2B,GAAG,CAAC,CAAC,GAAG,CAAC;MACvE,CAAC,CAAC;IACN;IACA/yB,WAAWA,CAAA,EAAG;MACV,MAAMqhB,KAAK,GAAG0Q,WAAW,CAACK,UAAU,CAACzoB,OAAO,CAAC,IAAI,CAAC;MAClD,IAAI0X,KAAK,GAAG,CAAC,CAAC,EAAE;QACZ0Q,WAAW,CAACK,UAAU,CAAC7S,MAAM,CAAC8B,KAAK,EAAE,CAAC,CAAC;MAC3C;MACA,IAAI,IAAI,CAAC4Q,MAAM,EAAE;QACb,IAAI,CAACA,MAAM,CAACJ,MAAM,CAAC5d,MAAM,CAAC,IAAI,CAAC;MACnC;MACA,IAAI,CAACie,iBAAiB,GAAGtf,SAAS;MAClC,IAAI,CAAC4f,cAAc,CAAClsB,KAAK,CAAC,CAAC;MAC3B,IAAI,CAAC2oB,YAAY,CAAC7b,OAAO,CAAC,CAAC;MAC3B,IAAI,CAACob,UAAU,CAAC3Z,IAAI,CAAC,CAAC;MACtB,IAAI,CAAC2Z,UAAU,CAACvuB,QAAQ,CAAC,CAAC;IAC9B;IACA;IACAwyB,2BAA2BA,CAACnF,GAAG,EAAE;MAC7B,IAAI,IAAI,CAACc,IAAI,EAAE;QACX,IAAI,CAACA,IAAI,CAAC7uB,MAAM,CACX8oB,IAAI,CAAC/lB,yDAAS,CAAC,IAAI,CAAC8rB,IAAI,CAAClyB,KAAK,CAAC,EAAE+F,yDAAS,CAAC,IAAI,CAACusB,UAAU,CAAC,CAAC,CAC5Dtb,SAAS,CAAChX,KAAK,IAAIoxB,GAAG,CAACpZ,aAAa,CAAChY,KAAK,CAAC,CAAC;MACrD;MACAoxB,GAAG,CAACvc,aAAa,CAACmC,SAAS,CAAC,MAAM;QAC9B,MAAMoN,QAAQ,GAAGxd,uDAAW,CAAC,IAAI,CAACkkB,WAAW,CAAC,CAAC9kB,GAAG,CAACwX,IAAI,IAAI;UACvD,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;YAC1B,MAAMsZ,qBAAqB,GAAGjB,WAAW,CAACK,UAAU,CAACjoB,IAAI,CAAC8oB,IAAI,IAAIA,IAAI,CAACZ,EAAE,KAAK3Y,IAAI,CAAC;YACnF,IAAI,CAACsZ,qBAAqB,KAAK,OAAOx0B,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;cAC3E00B,OAAO,CAACC,IAAI,CAAC,2DAA2DzZ,IAAI,GAAG,CAAC;YACpF;YACA,OAAOsZ,qBAAqB;UAChC;UACA,OAAOtZ,IAAI;QACf,CAAC,CAAC;QACF,IAAI,IAAI,CAACuY,MAAM,EAAE;UACb,IAAI,CAACA,MAAM,CAACJ,MAAM,CAAClrB,OAAO,CAAC+S,IAAI,IAAI;YAC/B,IAAI4G,QAAQ,CAAC3W,OAAO,CAAC+P,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;cAC/B4G,QAAQ,CAACuB,IAAI,CAACnI,IAAI,CAAC;YACvB;UACJ,CAAC,CAAC;QACN;QACA;QACA;QACA,IAAI,CAAC,IAAI,CAACyY,0BAA0B,EAAE;UAClC,MAAMiB,iBAAiB,GAAG,IAAI,CAACpB,iBAAiB,CAC3CqB,2BAA2B,CAAC,IAAI,CAAC9uB,OAAO,CAAC,CACzCrC,GAAG,CAACoxB,UAAU,IAAIA,UAAU,CAACC,aAAa,CAAC,CAAC,CAACpG,aAAa,CAAC;UAChE,IAAI,CAAC8B,YAAY,CAAC/H,qBAAqB,CAACkM,iBAAiB,CAAC;UAC1D;UACA;UACA,IAAI,CAACjB,0BAA0B,GAAG,IAAI;QAC1C;QACA,IAAI,IAAI,CAACI,wBAAwB,EAAE;UAC/B,MAAMle,SAAS,GAAG,IAAI,CAAC9P,OAAO,CAAC4oB,aAAa,CAACqG,aAAa,CAAC,IAAI,CAACjB,wBAAwB,CAAC;UACzF,IAAI,CAACle,SAAS,KAAK,OAAO7V,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;YAC/D,MAAM,IAAI2oB,KAAK,CAAC,0EAA0E,IAAI,CAACoL,wBAAwB,GAAG,CAAC;UAC/H;UACAjF,GAAG,CAACjL,oBAAoB,CAAChO,SAAS,CAAC;QACvC;QACAiZ,GAAG,CAAC3c,QAAQ,GAAG,IAAI,CAACA,QAAQ;QAC5B2c,GAAG,CAAC9c,QAAQ,GAAG,IAAI,CAACA,QAAQ;QAC5B8c,GAAG,CAACjT,eAAe,GAAG,IAAI,CAACA,eAAe;QAC1CiT,GAAG,CAACxI,kBAAkB,GAAG,IAAI,CAACA,kBAAkB;QAChDwI,GAAG,CAACvI,cAAc,GAAG/iB,wDAAoB,CAAC,IAAI,CAAC+iB,cAAc,EAAE,CAAC,CAAC;QACjEuI,GAAG,CAAC/O,SAAS,GAAG,IAAI,CAACA,SAAS;QAC9B+O,GAAG,CACEtG,WAAW,CAAC1G,QAAQ,CAACwG,MAAM,CAACpN,IAAI,IAAIA,IAAI,IAAIA,IAAI,KAAK,IAAI,CAAC,CAACxX,GAAG,CAAC+wB,IAAI,IAAIA,IAAI,CAAChE,YAAY,CAAC,CAAC,CAC1F5I,eAAe,CAAC,IAAI,CAACvG,WAAW,CAAC;MAC1C,CAAC,CAAC;IACN;IACA;IACAsP,aAAaA,CAAC9B,GAAG,EAAE;MACfA,GAAG,CAACvc,aAAa,CAACmC,SAAS,CAAC,MAAM;QAC9B,IAAI,CAACwf,iBAAiB,CAAC,IAAI,CAACC,cAAc,CAAC,CAAC,CAACzwB,GAAG,CAACqX,IAAI,IAAIA,IAAI,CAACkV,QAAQ,CAAC,CAAC;QACxE,IAAI,CAACJ,kBAAkB,CAACqC,YAAY,CAAC,CAAC;MAC1C,CAAC,CAAC;MACFpD,GAAG,CAACnc,OAAO,CAAC+B,SAAS,CAAC/X,KAAK,IAAI;QAC3B,IAAI,CAACgW,OAAO,CAACsf,IAAI,CAAC;UACdpc,SAAS,EAAE,IAAI;UACfkF,IAAI,EAAEpe,KAAK,CAACoe,IAAI,CAAChI,IAAI;UACrB6H,YAAY,EAAEje,KAAK,CAACie;QACxB,CAAC,CAAC;MACN,CAAC,CAAC;MACFkU,GAAG,CAAClc,MAAM,CAAC8B,SAAS,CAAC/X,KAAK,IAAI;QAC1B,IAAI,CAACiW,MAAM,CAACqf,IAAI,CAAC;UACbpc,SAAS,EAAE,IAAI;UACfkF,IAAI,EAAEpe,KAAK,CAACoe,IAAI,CAAChI;QACrB,CAAC,CAAC;QACF,IAAI,CAAC8c,kBAAkB,CAACqC,YAAY,CAAC,CAAC;MAC1C,CAAC,CAAC;MACFpD,GAAG,CAACpI,MAAM,CAAChS,SAAS,CAAC/X,KAAK,IAAI;QAC1B,IAAI,CAAC+pB,MAAM,CAACuL,IAAI,CAAC;UACbjX,aAAa,EAAEre,KAAK,CAACqe,aAAa;UAClCJ,YAAY,EAAEje,KAAK,CAACie,YAAY;UAChC/E,SAAS,EAAE,IAAI;UACfkF,IAAI,EAAEpe,KAAK,CAACoe,IAAI,CAAChI;QACrB,CAAC,CAAC;MACN,CAAC,CAAC;MACF+b,GAAG,CAACjc,OAAO,CAAC6B,SAAS,CAAC6d,SAAS,IAAI;QAC/B,IAAI,CAAC1f,OAAO,CAACof,IAAI,CAAC;UACdjX,aAAa,EAAEuX,SAAS,CAACvX,aAAa;UACtCJ,YAAY,EAAE2X,SAAS,CAAC3X,YAAY;UACpCK,iBAAiB,EAAEsX,SAAS,CAACtX,iBAAiB,CAAClI,IAAI;UACnD8C,SAAS,EAAE0c,SAAS,CAAC1c,SAAS,CAAC9C,IAAI;UACnCgI,IAAI,EAAEwX,SAAS,CAACxX,IAAI,CAAChI,IAAI;UACzB8H,sBAAsB,EAAE0X,SAAS,CAAC1X,sBAAsB;UACxD7C,QAAQ,EAAEua,SAAS,CAACva,QAAQ;UAC5BW,SAAS,EAAE4Z,SAAS,CAAC5Z,SAAS;UAC9Bhc,KAAK,EAAE41B,SAAS,CAAC51B;QACrB,CAAC,CAAC;QACF;QACA;QACA,IAAI,CAACkzB,kBAAkB,CAACqC,YAAY,CAAC,CAAC;MAC1C,CAAC,CAAC;MACFhvB,2CAAK,CAAC4rB,GAAG,CAACnI,gBAAgB,EAAEmI,GAAG,CAAClI,gBAAgB,CAAC,CAAClS,SAAS,CAAC,MAAM,IAAI,CAACmb,kBAAkB,CAACqC,YAAY,CAAC,CAAC,CAAC;IAC7G;IACA;IACA1B,eAAeA,CAACvC,MAAM,EAAE;MACpB,MAAM;QAAEjc,QAAQ;QAAEwgB,gBAAgB;QAAE3W,eAAe;QAAEoZ,sBAAsB;QAAEC;MAAgB,CAAC,GAAGjH,MAAM;MACvG,IAAI,CAAC9b,QAAQ,GAAGqgB,gBAAgB,IAAI,IAAI,GAAG,KAAK,GAAGA,gBAAgB;MACnE,IAAI,CAAC3W,eAAe,GAAGA,eAAe,IAAI,IAAI,GAAG,KAAK,GAAGA,eAAe;MACxE,IAAI,CAACyK,kBAAkB,GAAG2O,sBAAsB,IAAI,IAAI,GAAG,KAAK,GAAGA,sBAAsB;MACzF,IAAI,CAAC3T,WAAW,GAAG4T,eAAe,IAAI,UAAU;MAChD,IAAIljB,QAAQ,EAAE;QACV,IAAI,CAACA,QAAQ,GAAGA,QAAQ;MAC5B;IACJ;IACA;IACAkiB,iBAAiBA,CAACxS,KAAK,EAAE;MACrB,IAAI,CAACgS,iBAAiB,GAAGhS,KAAK;MAC9B,IAAI,CAAC+O,YAAY,CAAC9O,SAAS,CAACD,KAAK,CAAC;IACtC;IACA,OAAOliB,IAAI,YAAA21B,oBAAAz1B,iBAAA;MAAA,YAAAA,iBAAA,IAAwF6zB,WAAW;IAAA;IAC9G,OAAOtE,IAAI,kBAhsC8EpxB,+DAAE;MAAA4H,IAAA,EAgsCJ8tB,WAAW;MAAAlI,SAAA;MAAAC,SAAA;MAAAsH,QAAA;MAAAC,YAAA,WAAAuC,yBAAA1J,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UAhsCT7tB,yDAAE,OAAA8tB,GAAA,CAAAkI,EAAA;UAAFh2B,yDAAE,2BAAA8tB,GAAA,CAAAxZ,QAgsCM,CAAC,2BAAXwZ,GAAA,CAAA8E,YAAA,CAAAjd,UAAA,CAAwB,CAAd,CAAC,4BAAXmY,GAAA,CAAA8E,YAAA,CAAAnZ,WAAA,CAAyB,CAAf,CAAC;QAAA;MAAA;MAAA6X,MAAA;QAAA3G,WAAA;QAAAzV,IAAA;QAAAuO,WAAA;QAAAuS,EAAA;QAAA7hB,QAAA;QAAAG,QAAA,yCAAoUjQ,2DAAgB;QAAA2Z,eAAA,uDAAsE3Z,2DAAgB;QAAAskB,cAAA;QAAAC,aAAA;QAAAH,kBAAA,6DAA8MpkB,2DAAgB;QAAAqkB,cAAA;QAAAwN,wBAAA;QAAAhU,SAAA,2CAA4M7d,2DAAgB;MAAA;MAAA8wB,OAAA;QAAAngB,OAAA;QAAAF,OAAA;QAAAC,MAAA;QAAA8T,MAAA;MAAA;MAAAuM,QAAA;MAAA7D,QAAA,GAhsC72BvxB,gEAAE,CAgsCovC;MACv0C;MACA;QAAEyxB,OAAO,EAAE6D,mBAAmB;QAAEmC,QAAQ,EAAElhB;MAAU,CAAC,EACrD;QAAEkb,OAAO,EAAEG,aAAa;QAAEF,WAAW,EAAEgE;MAAY,CAAC,CACvD;IAAA;EACT;EAAC,OAhTKA,WAAW;AAAA;AAiTjB;EAAA,QAAAvzB,SAAA,oBAAAA,SAAA;AAAA;;AAsEA;AACA;AACA;AACA;AACA;AACA,MAAMu1B,gBAAgB,gBAAG,IAAIr1B,yDAAc,CAAC,gBAAgB,CAAC;AAC7D;AACA;AACA;AACA;AAHA,IAIMs1B,cAAc;EAApB,MAAMA,cAAc,CAAC;IACjB1D,WAAW,GAAGh0B,qDAAM,CAAC6E,sDAAW,CAAC;IACjC8yB,KAAK,GAAG33B,qDAAM,CAACswB,eAAe,EAAE;MAAEntB,QAAQ,EAAE;IAAK,CAAC,CAAC;IACnD;IACA8R,IAAI;IACJ;IACAzE,SAAS,GAAG,KAAK;IACjB/O,WAAWA,CAAA,EAAG;MACV,IAAI,CAACk2B,KAAK,EAAElE,mBAAmB,CAAC,IAAI,CAAC;IACzC;IACA/vB,WAAWA,CAAA,EAAG;MACV,IAAI,CAACi0B,KAAK,EAAEjE,qBAAqB,CAAC,IAAI,CAAC;IAC3C;IACA,OAAOhyB,IAAI,YAAAk2B,uBAAAh2B,iBAAA;MAAA,YAAAA,iBAAA,IAAwF81B,cAAc;IAAA;IACjH,OAAOvG,IAAI,kBApyC8EpxB,+DAAE;MAAA4H,IAAA,EAoyCJ+vB,cAAc;MAAAnK,SAAA;MAAA8D,MAAA;QAAApc,IAAA;QAAAzE,SAAA,gCAA6HpM,2DAAgB;MAAA;MAAAktB,QAAA,GApyCzJvxB,gEAAE,CAoyCuK,CAAC;QAAEyxB,OAAO,EAAEiG,gBAAgB;QAAEhG,WAAW,EAAEiG;MAAe,CAAC,CAAC;IAAA;EAClU;EAAC,OAfKA,cAAc;AAAA;AAgBpB;EAAA,QAAAx1B,SAAA,oBAAAA,SAAA;AAAA;;AAaA;AACA;AACA;AACA;AACA;AACA,MAAM21B,oBAAoB,gBAAG,IAAIz1B,yDAAc,CAAC,oBAAoB,CAAC;AACrE;AACA;AACA;AACA;AAHA,IAIM01B,kBAAkB;EAAxB,MAAMA,kBAAkB,CAAC;IACrB9D,WAAW,GAAGh0B,qDAAM,CAAC6E,sDAAW,CAAC;IACjC8yB,KAAK,GAAG33B,qDAAM,CAACswB,eAAe,EAAE;MAAEntB,QAAQ,EAAE;IAAK,CAAC,CAAC;IACnD;IACA8R,IAAI;IACJxT,WAAWA,CAAA,EAAG;MACV,IAAI,CAACk2B,KAAK,EAAEhE,uBAAuB,CAAC,IAAI,CAAC;IAC7C;IACAjwB,WAAWA,CAAA,EAAG;MACV,IAAI,CAACi0B,KAAK,EAAE/D,yBAAyB,CAAC,IAAI,CAAC;IAC/C;IACA,OAAOlyB,IAAI,YAAAq2B,2BAAAn2B,iBAAA;MAAA,YAAAA,iBAAA,IAAwFk2B,kBAAkB;IAAA;IACrH,OAAO3G,IAAI,kBAz0C8EpxB,+DAAE;MAAA4H,IAAA,EAy0CJmwB,kBAAkB;MAAAvK,SAAA;MAAA8D,MAAA;QAAApc,IAAA;MAAA;MAAAqc,QAAA,GAz0ChBvxB,gEAAE,CAy0CsH,CAAC;QAAEyxB,OAAO,EAAEqG,oBAAoB;QAAEpG,WAAW,EAAEqG;MAAmB,CAAC,CAAC;IAAA;EACzR;EAAC,OAbKA,kBAAkB;AAAA;AAcxB;EAAA,QAAA51B,SAAA,oBAAAA,SAAA;AAAA;AAUA,MAAM81B,oBAAoB,GAAG,CACzBvC,WAAW,EACXH,gBAAgB,EAChB1D,OAAO,EACPnB,aAAa,EACbiH,cAAc,EACdI,kBAAkB,CACrB;AAAC,IACIG,cAAc;EAApB,MAAMA,cAAc,CAAC;IACjB,OAAOv2B,IAAI,YAAAw2B,uBAAAt2B,iBAAA;MAAA,YAAAA,iBAAA,IAAwFq2B,cAAc;IAAA;IACjH,OAAOE,IAAI,kBA/1C8Ep4B,8DAAE;MAAA4H,IAAA,EA+1CSswB;IAAc;IAWlH,OAAOI,IAAI,kBA12C8Et4B,8DAAE;MAAAw4B,SAAA,EA02CoC,CAACtI,QAAQ,CAAC;MAAAuI,OAAA,GAAYpyB,+DAAmB;IAAA;EAC5K;EAAC,OAdK6xB,cAAc;AAAA;AAepB;EAAA,QAAA/1B,SAAA,oBAAAA,SAAA;AAAA;;;;;;;;;;;;;;;;ACp3IoC;AACuB;;AAE3D;AACA;AACA;AACA;AACA;AACA,MAAMw2B,QAAQ,GAAG,CAAC,CAAC;AACnB;AAAA,IACMnyB,YAAY;EAAlB,MAAMA,YAAY,CAAC;IACfoyB,MAAM,GAAG34B,qDAAM,CAACy4B,iDAAM,CAAC;IACvB;AACJ;AACA;AACA;IACIzC,KAAKA,CAAC4C,MAAM,EAAE;MACV;MACA;MACA,IAAI,IAAI,CAACD,MAAM,KAAK,IAAI,EAAE;QACtBC,MAAM,IAAI,IAAI,CAACD,MAAM;MACzB;MACA,IAAI,CAACD,QAAQ,CAACzsB,cAAc,CAAC2sB,MAAM,CAAC,EAAE;QAClCF,QAAQ,CAACE,MAAM,CAAC,GAAG,CAAC;MACxB;MACA,OAAO,GAAGA,MAAM,GAAGF,QAAQ,CAACE,MAAM,CAAC,EAAE,EAAE;IAC3C;IACA,OAAOl3B,IAAI,YAAAm3B,qBAAAj3B,iBAAA;MAAA,YAAAA,iBAAA,IAAwF2E,YAAY;IAAA;IAC/G,OAAO1E,KAAK,kBAD6E9B,gEAAE;MAAAgC,KAAA,EACYwE,YAAY;MAAAvE,OAAA,EAAZuE,YAAY,CAAA7E,IAAA;MAAAO,UAAA,EAAc;IAAM;EAC3I;EAAC,OAnBKsE,YAAY;AAAA;AAoBlB;EAAA,QAAArE,SAAA,oBAAAA,SAAA;AAAA;;;;;;;;;;;;;;;;;AC9BA;AACA,IAAI42B,iBAAiB,gBACpB,UAAUA,iBAAiB,EAAE;EAC1B;AACJ;AACA;AACA;EACIA,iBAAiB,CAACA,iBAAiB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ;EAC7D;AACJ;AACA;AACA;EACIA,iBAAiB,CAACA,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EAC/D;AACJ;AACA;AACA;EACIA,iBAAiB,CAACA,iBAAiB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU;EAAC,OAf3DA,iBAAiB;AAgB5B,CAAC,CAAEA,iBAAiB,IAAyB,CAAC,CAAE,CAjB3B;AAkBrB;AACA,IAAIC,iBAAiB;AACrB;AACA,IAAIC,uBAAuB;AAC3B;AACA,SAASC,sBAAsBA,CAAA,EAAG;EAC9B,IAAID,uBAAuB,IAAI,IAAI,EAAE;IACjC;IACA;IACA,IAAI,OAAOt4B,QAAQ,KAAK,QAAQ,IAAI,CAACA,QAAQ,IAAI,OAAOw4B,OAAO,KAAK,UAAU,IAAI,CAACA,OAAO,EAAE;MACxFF,uBAAuB,GAAG,KAAK;MAC/B,OAAOA,uBAAuB;IAClC;IACA;IACA,IAAI,gBAAgB,IAAIt4B,QAAQ,CAAC8C,eAAe,CAACgJ,KAAK,EAAE;MACpDwsB,uBAAuB,GAAG,IAAI;IAClC,CAAC,MACI;MACD;MACA;MACA,MAAMG,gBAAgB,GAAGD,OAAO,CAACE,SAAS,CAACC,QAAQ;MACnD,IAAIF,gBAAgB,EAAE;QAClB;QACA;QACA;QACA;QACAH,uBAAuB,GAAG,CAAC,2BAA2B,CAACp4B,IAAI,CAACu4B,gBAAgB,CAACG,QAAQ,CAAC,CAAC,CAAC;MAC5F,CAAC,MACI;QACDN,uBAAuB,GAAG,KAAK;MACnC;IACJ;EACJ;EACA,OAAOA,uBAAuB;AAClC;AACA;AACA;AACA;AACA;AACA,SAASO,oBAAoBA,CAAA,EAAG;EAC5B;EACA,IAAI,OAAO74B,QAAQ,KAAK,QAAQ,IAAI,CAACA,QAAQ,EAAE;IAC3C,OAAOo4B,iBAAiB,CAACU,MAAM;EACnC;EACA,IAAIT,iBAAiB,IAAI,IAAI,EAAE;IAC3B;IACA,MAAMU,eAAe,GAAG/4B,QAAQ,CAACiL,aAAa,CAAC,KAAK,CAAC;IACrD,MAAM+tB,cAAc,GAAGD,eAAe,CAACjtB,KAAK;IAC5CitB,eAAe,CAACn2B,GAAG,GAAG,KAAK;IAC3Bo2B,cAAc,CAAClxB,KAAK,GAAG,KAAK;IAC5BkxB,cAAc,CAACC,QAAQ,GAAG,MAAM;IAChCD,cAAc,CAACE,UAAU,GAAG,QAAQ;IACpCF,cAAc,CAAC5a,aAAa,GAAG,MAAM;IACrC4a,cAAc,CAACzuB,QAAQ,GAAG,UAAU;IACpC,MAAM4uB,OAAO,GAAGn5B,QAAQ,CAACiL,aAAa,CAAC,KAAK,CAAC;IAC7C,MAAMmuB,YAAY,GAAGD,OAAO,CAACrtB,KAAK;IAClCstB,YAAY,CAACtxB,KAAK,GAAG,KAAK;IAC1BsxB,YAAY,CAACrxB,MAAM,GAAG,KAAK;IAC3BgxB,eAAe,CAAC7tB,WAAW,CAACiuB,OAAO,CAAC;IACpCn5B,QAAQ,CAAC2C,IAAI,CAACuI,WAAW,CAAC6tB,eAAe,CAAC;IAC1CV,iBAAiB,GAAGD,iBAAiB,CAACU,MAAM;IAC5C;IACA;IACA;IACA,IAAIC,eAAe,CAAClvB,UAAU,KAAK,CAAC,EAAE;MAClC;MACA;MACA;MACA;MACAkvB,eAAe,CAAClvB,UAAU,GAAG,CAAC;MAC9BwuB,iBAAiB,GACbU,eAAe,CAAClvB,UAAU,KAAK,CAAC,GAAGuuB,iBAAiB,CAACiB,OAAO,GAAGjB,iBAAiB,CAACkB,QAAQ;IACjG;IACAP,eAAe,CAACjqB,MAAM,CAAC,CAAC;EAC5B;EACA,OAAOupB,iBAAiB;AAC5B;;;;;;;;;;;;;;;;;;;;AC/FiG;AAC/B;AAC9B;AACqD;;AAEzF;AACA;AACA;AACA;AACA;AACA;AALA,IAMMqB,GAAG;EAAT,MAAMA,GAAG,CAAC;IACN;IACAC,cAAc,GAAG,KAAK;IACtB;IACAC,OAAO;IACP;IACAr3B,MAAM,GAAG,IAAIV,uDAAY,CAAC,CAAC;IAC3B;IACA,IAAIe,GAAGA,CAAA,EAAG;MACN,OAAO,IAAI,CAACN,WAAW,CAAC,CAAC;IAC7B;IACA,IAAIM,GAAGA,CAAC1D,KAAK,EAAE;MACX,MAAM26B,aAAa,GAAG,IAAI,CAACv3B,WAAW,CAAC,CAAC;MACxC;MACA;MACA;MACA,IAAI,CAACA,WAAW,CAACS,GAAG,CAACd,+DAAsB,CAAC/C,KAAK,CAAC,CAAC;MACnD,IAAI,CAAC06B,OAAO,GAAG16B,KAAK;MACpB,IAAI26B,aAAa,KAAK,IAAI,CAACv3B,WAAW,CAAC,CAAC,IAAI,IAAI,CAACq3B,cAAc,EAAE;QAC7D,IAAI,CAACp3B,MAAM,CAACkxB,IAAI,CAAC,IAAI,CAACnxB,WAAW,CAAC,CAAC,CAAC;MACxC;IACJ;IACA;IACA,IAAIpD,KAAKA,CAAA,EAAG;MACR,OAAO,IAAI,CAAC0D,GAAG;IACnB;IACAN,WAAW,GAAGV,qDAAM,CAAC,KAAK,CAAC;IAC3B;IACAk4B,kBAAkBA,CAAA,EAAG;MACjB,IAAI,CAACH,cAAc,GAAG,IAAI;IAC9B;IACA32B,WAAWA,CAAA,EAAG;MACV,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC;IAC1B;IACA,OAAOjC,IAAI,YAAA+4B,YAAA74B,iBAAA;MAAA,YAAAA,iBAAA,IAAwFw4B,GAAG;IAAA;IACtG,OAAOjJ,IAAI,kBAD8EpxB,+DAAE;MAAA4H,IAAA,EACJyyB,GAAG;MAAA7M,SAAA;MAAAuH,QAAA;MAAAC,YAAA,WAAA2F,iBAAA9M,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UADD7tB,yDAAE,QAAA8tB,GAAA,CAAAyM,OAAA;QAAA;MAAA;MAAAjJ,MAAA;QAAA/tB,GAAA;MAAA;MAAA4xB,OAAA;QAAAjyB,MAAA;MAAA;MAAAkyB,QAAA;MAAA7D,QAAA,GAAFvxB,gEAAE,CAC8J,CAAC;QAAEyxB,OAAO,EAAEzuB,2DAAc;QAAE0uB,WAAW,EAAE2I;MAAI,CAAC,CAAC;IAAA;EAC5S;EAAC,OApCKA,GAAG;AAAA;AAqCT;EAAA,QAAAl4B,SAAA,oBAAAA,SAAA;AAAA;AAaoB,IAEdy4B,UAAU;EAAhB,MAAMA,UAAU,CAAC;IACb,OAAOj5B,IAAI,YAAAk5B,mBAAAh5B,iBAAA;MAAA,YAAAA,iBAAA,IAAwF+4B,UAAU;IAAA;IAC7G,OAAOxC,IAAI,kBApB8Ep4B,8DAAE;MAAA4H,IAAA,EAoBSgzB;IAAU;IAC9G,OAAOtC,IAAI,kBArB8Et4B,8DAAE;EAsB/F;EAAC,OAJK46B,UAAU;AAAA;AAKhB;EAAA,QAAAz4B,SAAA,oBAAAA,SAAA;AAAA;;;;;;;;;;;;;;;;;;ACpEA,IAAI24B,oBAAoB;AACxB;AACA,SAASC,kBAAkBA,CAAA,EAAG;EAC1B,IAAID,oBAAoB,IAAI,IAAI,EAAE;IAC9B,MAAME,IAAI,GAAG,OAAOr6B,QAAQ,KAAK,WAAW,GAAGA,QAAQ,CAACq6B,IAAI,GAAG,IAAI;IACnEF,oBAAoB,GAAG,CAAC,EAAEE,IAAI,KAAKA,IAAI,CAACC,gBAAgB,IAAID,IAAI,CAACE,YAAY,CAAC,CAAC;EACnF;EACA,OAAOJ,oBAAoB;AAC/B;AACA;AACA,SAASt1B,cAAcA,CAAC0C,OAAO,EAAE;EAC7B,IAAI6yB,kBAAkB,CAAC,CAAC,EAAE;IACtB,MAAMI,QAAQ,GAAGjzB,OAAO,CAACoD,WAAW,GAAGpD,OAAO,CAACoD,WAAW,CAAC,CAAC,GAAG,IAAI;IACnE;IACA;IACA,IAAI,OAAO8vB,UAAU,KAAK,WAAW,IAAIA,UAAU,IAAID,QAAQ,YAAYC,UAAU,EAAE;MACnF,OAAOD,QAAQ;IACnB;EACJ;EACA,OAAO,IAAI;AACf;AACA;AACA;AACA;AACA;AACA,SAASE,iCAAiCA,CAAA,EAAG;EACzC,IAAIC,aAAa,GAAG,OAAO36B,QAAQ,KAAK,WAAW,IAAIA,QAAQ,GACzDA,QAAQ,CAAC26B,aAAa,GACtB,IAAI;EACV,OAAOA,aAAa,IAAIA,aAAa,CAACtgB,UAAU,EAAE;IAC9C,MAAMugB,gBAAgB,GAAGD,aAAa,CAACtgB,UAAU,CAACsgB,aAAa;IAC/D,IAAIC,gBAAgB,KAAKD,aAAa,EAAE;MACpC;IACJ,CAAC,MACI;MACDA,aAAa,GAAGC,gBAAgB;IACpC;EACJ;EACA,OAAOD,aAAa;AACxB;AACA;AACA,SAAS/1B,eAAeA,CAACzG,KAAK,EAAE;EAC5B;EACA;EACA,OAAQA,KAAK,CAAC08B,YAAY,GAAG18B,KAAK,CAAC08B,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG18B,KAAK,CAAC4L,MAAM;AACvE;;;;;;;;;;;;;;;;;;;;;AC7CwC;AACqB;AACd;;AAE/C;AACA,MAAMixB,eAAe,SAASh8B,wDAAU,CAAC;EACrCi8B,KAAK;EACLl6B,WAAWA,CAACk6B,KAAK,EAAE;IACf,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EACA97B,OAAOA,CAAA,EAAG;IACN,OAAO27B,kDAAY,CAAC,IAAI,CAACG,KAAK,CAAC,GAAG,IAAI,CAACA,KAAK,GAAGF,wCAAE,CAAC,IAAI,CAACE,KAAK,CAAC;EACjE;EACAC,UAAUA,CAAA,EAAG,CAAE;AACnB;;AAEA;AACA,IAAIC,sBAAsB,gBACzB,UAAUA,sBAAsB,EAAE;EAC/B;EACAA,sBAAsB,CAACA,sBAAsB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU;EAC3E;EACAA,sBAAsB,CAACA,sBAAsB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU;EAC3E;EACAA,sBAAsB,CAACA,sBAAsB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EACrE;EACAA,sBAAsB,CAACA,sBAAsB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EAAC,OARnEA,sBAAsB;AASjC,CAAC,CAAEA,sBAAsB,IAA8B,CAAC,CAAE,CAVhC;AAW1B;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,gBAAG,IAAI15B,yDAAc,CAAC,eAAe,CAAC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM25B,4BAA4B,CAAC;EAC/B;AACJ;AACA;AACA;EACIC,aAAa,GAAG,EAAE;EAClB;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,UAAU,GAAG,EAAE;EACf;EACAC,YAAYA,CAAC/I,OAAO,EAAEgJ,gBAAgB,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,eAAe,EAAE;IAC5F;IACAnJ,OAAO,CAACoJ,gBAAgB,CAAC,CAACC,MAAM,EAAEC,qBAAqB,EAAE3f,YAAY,KAAK;MACtE,IAAI4f,IAAI;MACR,IAAIC,SAAS;MACb,IAAIH,MAAM,CAACtf,aAAa,IAAI,IAAI,EAAE;QAC9B;QACA,MAAM0f,eAAe,GAAGA,CAAA,KAAMR,kBAAkB,CAACI,MAAM,EAAEC,qBAAqB,EAAE3f,YAAY,CAAC;QAC7F4f,IAAI,GAAG,IAAI,CAACG,WAAW,CAACD,eAAe,EAAE9f,YAAY,EAAEqf,gBAAgB,EAAEE,iBAAiB,CAACG,MAAM,CAAC,CAAC;QACnGG,SAAS,GAAGD,IAAI,GAAGb,sBAAsB,CAACiB,QAAQ,GAAGjB,sBAAsB,CAACkB,QAAQ;MACxF,CAAC,MACI,IAAIjgB,YAAY,IAAI,IAAI,EAAE;QAC3B;QACA,IAAI,CAACkgB,mBAAmB,CAACP,qBAAqB,EAAEN,gBAAgB,CAAC;QACjEQ,SAAS,GAAGd,sBAAsB,CAACoB,OAAO;MAC9C,CAAC,MACI;QACD;QACAP,IAAI,GAAG,IAAI,CAACQ,SAAS,CAACT,qBAAqB,EAAE3f,YAAY,EAAEqf,gBAAgB,EAAEE,iBAAiB,CAACG,MAAM,CAAC,CAAC;QACvGG,SAAS,GAAGd,sBAAsB,CAACsB,KAAK;MAC5C;MACA,IAAIb,eAAe,EAAE;QACjBA,eAAe,CAAC;UACZz0B,OAAO,EAAE60B,IAAI,EAAE70B,OAAO;UACtB80B,SAAS;UACTH;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACAY,MAAMA,CAAA,EAAG;IACL,KAAK,MAAMV,IAAI,IAAI,IAAI,CAACT,UAAU,EAAE;MAChCS,IAAI,CAACntB,OAAO,CAAC,CAAC;IAClB;IACA,IAAI,CAAC0sB,UAAU,GAAG,EAAE;EACxB;EACA;AACJ;AACA;AACA;EACIY,WAAWA,CAACD,eAAe,EAAE9f,YAAY,EAAEqf,gBAAgB,EAAEv8B,KAAK,EAAE;IAChE,MAAMy9B,UAAU,GAAG,IAAI,CAACC,oBAAoB,CAACxgB,YAAY,EAAEqf,gBAAgB,CAAC;IAC5E,IAAIkB,UAAU,EAAE;MACZA,UAAU,CAACx1B,OAAO,CAAC01B,SAAS,GAAG39B,KAAK;MACpC,OAAO0W,SAAS;IACpB;IACA,MAAMknB,QAAQ,GAAGZ,eAAe,CAAC,CAAC;IAClC,OAAOT,gBAAgB,CAACzrB,kBAAkB,CAAC8sB,QAAQ,CAACxJ,WAAW,EAAEwJ,QAAQ,CAAC31B,OAAO,EAAE21B,QAAQ,CAACzY,KAAK,CAAC;EACtG;EACA;EACAiY,mBAAmBA,CAACjY,KAAK,EAAEoX,gBAAgB,EAAE;IACzC,MAAMsB,YAAY,GAAGtB,gBAAgB,CAACiB,MAAM,CAACrY,KAAK,CAAC;IACnD,IAAI,CAAC2Y,eAAe,CAACD,YAAY,EAAEtB,gBAAgB,CAAC;EACxD;EACA;EACAe,SAASA,CAACT,qBAAqB,EAAE3f,YAAY,EAAEqf,gBAAgB,EAAEv8B,KAAK,EAAE;IACpE,MAAM88B,IAAI,GAAGP,gBAAgB,CAACxxB,GAAG,CAAC8xB,qBAAqB,CAAC;IACxDN,gBAAgB,CAACwB,IAAI,CAACjB,IAAI,EAAE5f,YAAY,CAAC;IACzC4f,IAAI,CAAC70B,OAAO,CAAC01B,SAAS,GAAG39B,KAAK;IAC9B,OAAO88B,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIgB,eAAeA,CAAChB,IAAI,EAAEP,gBAAgB,EAAE;IACpC,IAAI,IAAI,CAACF,UAAU,CAACh1B,MAAM,GAAG,IAAI,CAAC+0B,aAAa,EAAE;MAC7C,IAAI,CAACC,UAAU,CAAC1W,IAAI,CAACmX,IAAI,CAAC;IAC9B,CAAC,MACI;MACD,MAAM3X,KAAK,GAAGoX,gBAAgB,CAAC9uB,OAAO,CAACqvB,IAAI,CAAC;MAC5C;MACA;MACA;MACA;MACA,IAAI3X,KAAK,KAAK,CAAC,CAAC,EAAE;QACd2X,IAAI,CAACntB,OAAO,CAAC,CAAC;MAClB,CAAC,MACI;QACD4sB,gBAAgB,CAAC3sB,MAAM,CAACuV,KAAK,CAAC;MAClC;IACJ;EACJ;EACA;EACAuY,oBAAoBA,CAACvY,KAAK,EAAEoX,gBAAgB,EAAE;IAC1C,MAAMkB,UAAU,GAAG,IAAI,CAACpB,UAAU,CAAC2B,GAAG,CAAC,CAAC;IACxC,IAAIP,UAAU,EAAE;MACZlB,gBAAgB,CAAC0B,MAAM,CAACR,UAAU,EAAEtY,KAAK,CAAC;IAC9C;IACA,OAAOsY,UAAU,IAAI,IAAI;EAC7B;AACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxJoC;AACsV;AACvQ;AACc;AAC1C;AAC/B;AACY;AACsD;AAClF;AAAA,MAAAqB,GAAA;AAAA,MAAAC,GAAA;AACE;AAC4G;AACvF;AACtC;;AAEzB;AACA,MAAME,uBAAuB,gBAAG,IAAIz8B,yDAAc,CAAC,yBAAyB,CAAC;;AAE7E;AACA,MAAM08B,8BAA8B,CAAC;EACjCC,oBAAoB,gBAAG,IAAIh6B,yCAAO,CAAC,CAAC;EACpC;EACAi6B,mBAAmB,gBAAG,IAAI,CAACD,oBAAoB,CAAChT,IAAI,cAACuS,oEAAoB,CAAC,CAAC,CAAC;EAC5E;EACAW,SAAS,GAAG,IAAI;EAChB;EACAC,SAAS;EACT;EACAC,YAAY;EACZ;EACAC,YAAY;EACZ;AACJ;AACA;AACA;AACA;EACI39B,WAAWA,CAAC49B,QAAQ,EAAEC,WAAW,EAAEC,WAAW,EAAE;IAC5C,IAAI,CAACL,SAAS,GAAGG,QAAQ;IACzB,IAAI,CAACF,YAAY,GAAGG,WAAW;IAC/B,IAAI,CAACF,YAAY,GAAGG,WAAW;EACnC;EACA;AACJ;AACA;AACA;EACIpwB,MAAMA,CAACqwB,QAAQ,EAAE;IACb,IAAI,CAACP,SAAS,GAAGO,QAAQ;IACzB,IAAI,CAACC,uBAAuB,CAAC,CAAC;IAC9B,IAAI,CAACC,oBAAoB,CAAC,CAAC;EAC/B;EACA;EACAtC,MAAMA,CAAA,EAAG;IACL,IAAI,CAAC2B,oBAAoB,CAACp7B,QAAQ,CAAC,CAAC;IACpC,IAAI,CAACs7B,SAAS,GAAG,IAAI;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIU,uBAAuBA,CAACN,QAAQ,EAAEC,WAAW,EAAEC,WAAW,EAAE;IACxD,IAAIA,WAAW,GAAGD,WAAW,KAAK,OAAOp9B,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;MAC9E,MAAM2oB,KAAK,CAAC,8EAA8E,CAAC;IAC/F;IACA,IAAI,CAACqU,SAAS,GAAGG,QAAQ;IACzB,IAAI,CAACF,YAAY,GAAGG,WAAW;IAC/B,IAAI,CAACF,YAAY,GAAGG,WAAW;IAC/B,IAAI,CAACE,uBAAuB,CAAC,CAAC;IAC9B,IAAI,CAACC,oBAAoB,CAAC,CAAC;EAC/B;EACA;EACAE,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACF,oBAAoB,CAAC,CAAC;EAC/B;EACA;EACAG,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAACJ,uBAAuB,CAAC,CAAC;IAC9B,IAAI,CAACC,oBAAoB,CAAC,CAAC;EAC/B;EACA;EACAI,iBAAiBA,CAAA,EAAG;IAChB;EAAA;EAEJ;EACAC,uBAAuBA,CAAA,EAAG;IACtB;EAAA;EAEJ;AACJ;AACA;AACA;AACA;EACIC,aAAaA,CAACjb,KAAK,EAAEkb,QAAQ,EAAE;IAC3B,IAAI,IAAI,CAAChB,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,CAACiB,cAAc,CAACnb,KAAK,GAAG,IAAI,CAACma,SAAS,EAAEe,QAAQ,CAAC;IACnE;EACJ;EACA;EACAR,uBAAuBA,CAAA,EAAG;IACtB,IAAI,CAAC,IAAI,CAACR,SAAS,EAAE;MACjB;IACJ;IACA,IAAI,CAACA,SAAS,CAACkB,mBAAmB,CAAC,IAAI,CAAClB,SAAS,CAACmB,aAAa,CAAC,CAAC,GAAG,IAAI,CAAClB,SAAS,CAAC;EACvF;EACA;EACAQ,oBAAoBA,CAAA,EAAG;IACnB,IAAI,CAAC,IAAI,CAACT,SAAS,EAAE;MACjB;IACJ;IACA,MAAMoB,aAAa,GAAG,IAAI,CAACpB,SAAS,CAACqB,gBAAgB,CAAC,CAAC;IACvD,MAAMC,QAAQ,GAAG;MAAE5kB,KAAK,EAAE0kB,aAAa,CAAC1kB,KAAK;MAAEyK,GAAG,EAAEia,aAAa,CAACja;IAAI,CAAC;IACvE,MAAMoa,YAAY,GAAG,IAAI,CAACvB,SAAS,CAAC1T,eAAe,CAAC,CAAC;IACrD,MAAMkV,UAAU,GAAG,IAAI,CAACxB,SAAS,CAACmB,aAAa,CAAC,CAAC;IACjD,IAAIM,YAAY,GAAG,IAAI,CAACzB,SAAS,CAAC0B,mBAAmB,CAAC,CAAC;IACvD;IACA,IAAIC,iBAAiB,GAAG,IAAI,CAAC1B,SAAS,GAAG,CAAC,GAAGwB,YAAY,GAAG,IAAI,CAACxB,SAAS,GAAG,CAAC;IAC9E;IACA,IAAIqB,QAAQ,CAACna,GAAG,GAAGqa,UAAU,EAAE;MAC3B;MACA,MAAMI,eAAe,GAAG5zB,IAAI,CAAC6zB,IAAI,CAACN,YAAY,GAAG,IAAI,CAACtB,SAAS,CAAC;MAChE,MAAM6B,eAAe,GAAG9zB,IAAI,CAACoV,GAAG,CAAC,CAAC,EAAEpV,IAAI,CAACmV,GAAG,CAACwe,iBAAiB,EAAEH,UAAU,GAAGI,eAAe,CAAC,CAAC;MAC9F;MACA;MACA,IAAID,iBAAiB,IAAIG,eAAe,EAAE;QACtCH,iBAAiB,GAAGG,eAAe;QACnCL,YAAY,GAAGK,eAAe,GAAG,IAAI,CAAC7B,SAAS;QAC/CqB,QAAQ,CAAC5kB,KAAK,GAAG1O,IAAI,CAACwZ,KAAK,CAACma,iBAAiB,CAAC;MAClD;MACAL,QAAQ,CAACna,GAAG,GAAGnZ,IAAI,CAACoV,GAAG,CAAC,CAAC,EAAEpV,IAAI,CAACmV,GAAG,CAACqe,UAAU,EAAEF,QAAQ,CAAC5kB,KAAK,GAAGklB,eAAe,CAAC,CAAC;IACtF;IACA,MAAMG,WAAW,GAAGN,YAAY,GAAGH,QAAQ,CAAC5kB,KAAK,GAAG,IAAI,CAACujB,SAAS;IAClE,IAAI8B,WAAW,GAAG,IAAI,CAAC7B,YAAY,IAAIoB,QAAQ,CAAC5kB,KAAK,IAAI,CAAC,EAAE;MACxD,MAAMslB,WAAW,GAAGh0B,IAAI,CAAC6zB,IAAI,CAAC,CAAC,IAAI,CAAC1B,YAAY,GAAG4B,WAAW,IAAI,IAAI,CAAC9B,SAAS,CAAC;MACjFqB,QAAQ,CAAC5kB,KAAK,GAAG1O,IAAI,CAACoV,GAAG,CAAC,CAAC,EAAEke,QAAQ,CAAC5kB,KAAK,GAAGslB,WAAW,CAAC;MAC1DV,QAAQ,CAACna,GAAG,GAAGnZ,IAAI,CAACmV,GAAG,CAACqe,UAAU,EAAExzB,IAAI,CAAC6zB,IAAI,CAACF,iBAAiB,GAAG,CAACJ,YAAY,GAAG,IAAI,CAACrB,YAAY,IAAI,IAAI,CAACD,SAAS,CAAC,CAAC;IAC3H,CAAC,MACI;MACD,MAAMgC,SAAS,GAAGX,QAAQ,CAACna,GAAG,GAAG,IAAI,CAAC8Y,SAAS,IAAIwB,YAAY,GAAGF,YAAY,CAAC;MAC/E,IAAIU,SAAS,GAAG,IAAI,CAAC/B,YAAY,IAAIoB,QAAQ,CAACna,GAAG,IAAIqa,UAAU,EAAE;QAC7D,MAAMU,SAAS,GAAGl0B,IAAI,CAAC6zB,IAAI,CAAC,CAAC,IAAI,CAAC1B,YAAY,GAAG8B,SAAS,IAAI,IAAI,CAAChC,SAAS,CAAC;QAC7E,IAAIiC,SAAS,GAAG,CAAC,EAAE;UACfZ,QAAQ,CAACna,GAAG,GAAGnZ,IAAI,CAACmV,GAAG,CAACqe,UAAU,EAAEF,QAAQ,CAACna,GAAG,GAAG+a,SAAS,CAAC;UAC7DZ,QAAQ,CAAC5kB,KAAK,GAAG1O,IAAI,CAACoV,GAAG,CAAC,CAAC,EAAEpV,IAAI,CAACwZ,KAAK,CAACma,iBAAiB,GAAG,IAAI,CAACzB,YAAY,GAAG,IAAI,CAACD,SAAS,CAAC,CAAC;QACpG;MACJ;IACJ;IACA,IAAI,CAACD,SAAS,CAACmC,gBAAgB,CAACb,QAAQ,CAAC;IACzC,IAAI,CAACtB,SAAS,CAACoC,wBAAwB,CAAC,IAAI,CAACnC,SAAS,GAAGqB,QAAQ,CAAC5kB,KAAK,CAAC;IACxE,IAAI,CAACojB,oBAAoB,CAACxmB,IAAI,CAACtL,IAAI,CAACwZ,KAAK,CAACma,iBAAiB,CAAC,CAAC;EACjE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,sCAAsCA,CAACC,YAAY,EAAE;EAC1D,OAAOA,YAAY,CAACC,eAAe;AACvC;AACA;AAAA,IACMC,yBAAyB;EAA/B,MAAMA,yBAAyB,CAAC;IAC5B;IACA,IAAIpC,QAAQA,CAAA,EAAG;MACX,OAAO,IAAI,CAACH,SAAS;IACzB;IACA,IAAIG,QAAQA,CAACz/B,KAAK,EAAE;MAChB,IAAI,CAACs/B,SAAS,GAAGx5B,wDAAoB,CAAC9F,KAAK,CAAC;IAChD;IACAs/B,SAAS,GAAG,EAAE;IACd;AACJ;AACA;AACA;IACI,IAAII,WAAWA,CAAA,EAAG;MACd,OAAO,IAAI,CAACH,YAAY;IAC5B;IACA,IAAIG,WAAWA,CAAC1/B,KAAK,EAAE;MACnB,IAAI,CAACu/B,YAAY,GAAGz5B,wDAAoB,CAAC9F,KAAK,CAAC;IACnD;IACAu/B,YAAY,GAAG,GAAG;IAClB;AACJ;AACA;IACI,IAAII,WAAWA,CAAA,EAAG;MACd,OAAO,IAAI,CAACH,YAAY;IAC5B;IACA,IAAIG,WAAWA,CAAC3/B,KAAK,EAAE;MACnB,IAAI,CAACw/B,YAAY,GAAG15B,wDAAoB,CAAC9F,KAAK,CAAC;IACnD;IACAw/B,YAAY,GAAG,GAAG;IAClB;IACAoC,eAAe,GAAG,IAAI1C,8BAA8B,CAAC,IAAI,CAACO,QAAQ,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,WAAW,CAAC;IACvGrM,WAAWA,CAAA,EAAG;MACV,IAAI,CAACsO,eAAe,CAAC7B,uBAAuB,CAAC,IAAI,CAACN,QAAQ,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,WAAW,CAAC;IACnG;IACA,OAAO79B,IAAI,YAAAggC,kCAAA9/B,iBAAA;MAAA,YAAAA,iBAAA,IAAwF6/B,yBAAyB;IAAA;IAC5H,OAAOtQ,IAAI,kBAD8EpxB,+DAAE;MAAA4H,IAAA,EACJ85B,yBAAyB;MAAAlU,SAAA;MAAA8D,MAAA;QAAAgO,QAAA;QAAAC,WAAA;QAAAC,WAAA;MAAA;MAAAjO,QAAA,GADvBvxB,gEAAE,CACmM,CACtR;QACIyxB,OAAO,EAAEqN,uBAAuB;QAChC8C,UAAU,EAAEL,sCAAsC;QAClDM,IAAI,EAAE,CAAC7D,yDAAU,CAAC,MAAM0D,yBAAyB,CAAC;MACtD,CAAC,CACJ,GAPoF1hC,kEAAE;IAAA;EAQ/F;EAAC,OA3CK0hC,yBAAyB;AAAA;AA4C/B;EAAA,QAAAv/B,SAAA,oBAAAA,SAAA;AAAA;;AAoBA;AACA,MAAM2/B,mBAAmB,GAAG,EAAE;AAC9B;AACA;AACA;AACA;AAHA,IAIM17B,gBAAgB;EAAtB,MAAMA,gBAAgB,CAAC;IACnBsL,OAAO,GAAGzR,qDAAM,CAACiE,iDAAM,CAAC;IACxB69B,SAAS,GAAG9hC,qDAAM,CAACO,qDAAQ,CAAC;IAC5ByO,SAAS,GAAGhP,qDAAM,CAACkE,2DAAgB,CAAC,CAACgqB,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC;IAC/D6T,sBAAsB;IACtBtgC,WAAWA,CAAA,EAAG,CAAE;IAChB;IACAugC,SAAS,GAAG,IAAIj9B,yCAAO,CAAC,CAAC;IACzB;IACAk9B,cAAc,GAAG,CAAC;IAClB;AACJ;AACA;AACA;IACIC,gBAAgB,GAAG,IAAIn4B,GAAG,CAAC,CAAC;IAC5B;AACJ;AACA;AACA;AACA;IACIo4B,QAAQA,CAACnL,UAAU,EAAE;MACjB,IAAI,CAAC,IAAI,CAACkL,gBAAgB,CAAC/1B,GAAG,CAAC6qB,UAAU,CAAC,EAAE;QACxC,IAAI,CAACkL,gBAAgB,CAACz+B,GAAG,CAACuzB,UAAU,EAAEA,UAAU,CAACoL,eAAe,CAAC,CAAC,CAACxrB,SAAS,CAAC,MAAM,IAAI,CAACorB,SAAS,CAACzpB,IAAI,CAACye,UAAU,CAAC,CAAC,CAAC;MACxH;IACJ;IACA;AACJ;AACA;AACA;IACIqL,UAAUA,CAACrL,UAAU,EAAE;MACnB,MAAMsL,mBAAmB,GAAG,IAAI,CAACJ,gBAAgB,CAACv3B,GAAG,CAACqsB,UAAU,CAAC;MACjE,IAAIsL,mBAAmB,EAAE;QACrBA,mBAAmB,CAAC3rB,WAAW,CAAC,CAAC;QACjC,IAAI,CAACurB,gBAAgB,CAACvqB,MAAM,CAACqf,UAAU,CAAC;MAC5C;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIva,QAAQA,CAAC8lB,aAAa,GAAGV,mBAAmB,EAAE;MAC1C,IAAI,CAAC,IAAI,CAACC,SAAS,CAACrhC,SAAS,EAAE;QAC3B,OAAOg7B,wCAAE,CAAC,CAAC;MACf;MACA,OAAO,IAAIt2B,4CAAU,CAAEoqB,QAAQ,IAAK;QAChC,IAAI,CAAC,IAAI,CAACwS,sBAAsB,EAAE;UAC9B,IAAI,CAACA,sBAAsB,GAAG,IAAI,CAACtwB,OAAO,CAAC0E,iBAAiB,CAAC,MAAM,IAAI,CAACnH,SAAS,CAACiB,MAAM,CAAC,UAAU,EAAE,QAAQ,EAAE,MAAM,IAAI,CAAC+xB,SAAS,CAACzpB,IAAI,CAAC,CAAC,CAAC,CAAC;QAChJ;QACA;QACA;QACA,MAAM+Z,YAAY,GAAGiQ,aAAa,GAAG,CAAC,GAChC,IAAI,CAACP,SAAS,CAACjW,IAAI,CAACwS,yDAAS,CAACgE,aAAa,CAAC,CAAC,CAAC3rB,SAAS,CAAC2Y,QAAQ,CAAC,GACjE,IAAI,CAACyS,SAAS,CAACprB,SAAS,CAAC2Y,QAAQ,CAAC;QACxC,IAAI,CAAC0S,cAAc,EAAE;QACrB,OAAO,MAAM;UACT3P,YAAY,CAAC3b,WAAW,CAAC,CAAC;UAC1B,IAAI,CAACsrB,cAAc,EAAE;UACrB,IAAI,CAAC,IAAI,CAACA,cAAc,EAAE;YACtB,IAAI,CAACF,sBAAsB,GAAG,CAAC;YAC/B,IAAI,CAACA,sBAAsB,GAAGzrB,SAAS;UAC3C;QACJ,CAAC;MACL,CAAC,CAAC;IACN;IACA5S,WAAWA,CAAA,EAAG;MACV,IAAI,CAACq+B,sBAAsB,GAAG,CAAC;MAC/B,IAAI,CAACA,sBAAsB,GAAGzrB,SAAS;MACvC,IAAI,CAAC4rB,gBAAgB,CAAC73B,OAAO,CAAC,CAACxG,CAAC,EAAEkU,SAAS,KAAK,IAAI,CAACsqB,UAAU,CAACtqB,SAAS,CAAC,CAAC;MAC3E,IAAI,CAACiqB,SAAS,CAACr+B,QAAQ,CAAC,CAAC;IAC7B;IACA;AACJ;AACA;AACA;AACA;AACA;IACI6+B,gBAAgBA,CAACC,mBAAmB,EAAEF,aAAa,EAAE;MACjD,MAAMG,SAAS,GAAG,IAAI,CAAC3L,2BAA2B,CAAC0L,mBAAmB,CAAC;MACvE,OAAO,IAAI,CAAChmB,QAAQ,CAAC8lB,aAAa,CAAC,CAACxW,IAAI,CAACvB,sDAAM,CAAC/f,MAAM,IAAI,CAACA,MAAM,IAAIi4B,SAAS,CAACr1B,OAAO,CAAC5C,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzG;IACA;IACAssB,2BAA2BA,CAAC0L,mBAAmB,EAAE;MAC7C,MAAME,mBAAmB,GAAG,EAAE;MAC9B,IAAI,CAACT,gBAAgB,CAAC73B,OAAO,CAAC,CAACu4B,aAAa,EAAE5L,UAAU,KAAK;QACzD,IAAI,IAAI,CAAC6L,0BAA0B,CAAC7L,UAAU,EAAEyL,mBAAmB,CAAC,EAAE;UAClEE,mBAAmB,CAACpd,IAAI,CAACyR,UAAU,CAAC;QACxC;MACJ,CAAC,CAAC;MACF,OAAO2L,mBAAmB;IAC9B;IACA;IACAE,0BAA0BA,CAAC7L,UAAU,EAAEyL,mBAAmB,EAAE;MACxD,IAAIx6B,OAAO,GAAGzC,wDAAa,CAACi9B,mBAAmB,CAAC;MAChD,IAAIK,iBAAiB,GAAG9L,UAAU,CAACC,aAAa,CAAC,CAAC,CAACpG,aAAa;MAChE;MACA;MACA,GAAG;QACC,IAAI5oB,OAAO,IAAI66B,iBAAiB,EAAE;UAC9B,OAAO,IAAI;QACf;MACJ,CAAC,QAAS76B,OAAO,GAAGA,OAAO,CAACqd,aAAa;MACzC,OAAO,KAAK;IAChB;IACA,OAAO5jB,IAAI,YAAAqhC,yBAAAnhC,iBAAA;MAAA,YAAAA,iBAAA,IAAwFuE,gBAAgB;IAAA;IACnH,OAAOtE,KAAK,kBAjJ6E9B,gEAAE;MAAAgC,KAAA,EAiJYoE,gBAAgB;MAAAnE,OAAA,EAAhBmE,gBAAgB,CAAAzE,IAAA;MAAAO,UAAA,EAAc;IAAM;EAC/I;EAAC,OA/GKkE,gBAAgB;AAAA;AAgHtB;EAAA,QAAAjE,SAAA,oBAAAA,SAAA;AAAA;;AAKA;AACA;AACA;AACA;AACA;AAJA,IAKMmE,aAAa;EAAnB,MAAMA,aAAa,CAAC;IAChB28B,UAAU,GAAGhjC,qDAAM,CAACmE,qDAAU,CAAC;IAC/B8+B,gBAAgB,GAAGjjC,qDAAM,CAACmG,gBAAgB,CAAC;IAC3C+8B,MAAM,GAAGljC,qDAAM,CAACiE,iDAAM,CAAC;IACvBX,GAAG,GAAGtD,qDAAM,CAAC+C,2DAAc,EAAE;MAAEI,QAAQ,EAAE;IAAK,CAAC,CAAC;IAChDggC,cAAc,GAAG,IAAI,CAACH,UAAU,CAACnS,aAAa;IAC9CqB,UAAU,GAAG,IAAIntB,yCAAO,CAAC,CAAC;IAC1BiK,SAAS,GAAGhP,qDAAM,CAACg+B,oDAAS,CAAC;IAC7BoF,cAAc;IACdC,gBAAgB,GAAG,IAAIt+B,yCAAO,CAAC,CAAC;IAChCtD,WAAWA,CAAA,EAAG,CAAE;IAChB6hC,QAAQA,CAAA,EAAG;MACP,IAAI,CAACF,cAAc,GAAG,IAAI,CAACF,MAAM,CAAC/sB,iBAAiB,CAAC,MAAM,IAAI,CAACnH,SAAS,CAACiB,MAAM,CAAC,IAAI,CAACkzB,cAAc,EAAE,QAAQ,EAAEtkC,KAAK,IAAI,IAAI,CAACwkC,gBAAgB,CAAC9qB,IAAI,CAAC1Z,KAAK,CAAC,CAAC,CAAC;MAC3J,IAAI,CAACokC,gBAAgB,CAACd,QAAQ,CAAC,IAAI,CAAC;IACxC;IACAz+B,WAAWA,CAAA,EAAG;MACV,IAAI,CAAC0/B,cAAc,GAAG,CAAC;MACvB,IAAI,CAACC,gBAAgB,CAAC1/B,QAAQ,CAAC,CAAC;MAChC,IAAI,CAACs/B,gBAAgB,CAACZ,UAAU,CAAC,IAAI,CAAC;MACtC,IAAI,CAACnQ,UAAU,CAAC3Z,IAAI,CAAC,CAAC;MACtB,IAAI,CAAC2Z,UAAU,CAACvuB,QAAQ,CAAC,CAAC;IAC9B;IACA;IACAy+B,eAAeA,CAAA,EAAG;MACd,OAAO,IAAI,CAACiB,gBAAgB;IAChC;IACA;IACApM,aAAaA,CAAA,EAAG;MACZ,OAAO,IAAI,CAAC+L,UAAU;IAC1B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI3J,QAAQA,CAACjK,OAAO,EAAE;MACd,MAAMmU,EAAE,GAAG,IAAI,CAACP,UAAU,CAACnS,aAAa;MACxC,MAAM2S,KAAK,GAAG,IAAI,CAAClgC,GAAG,IAAI,IAAI,CAACA,GAAG,CAAC1D,KAAK,IAAI,KAAK;MACjD;MACA,IAAIwvB,OAAO,CAAC7mB,IAAI,IAAI,IAAI,EAAE;QACtB6mB,OAAO,CAAC7mB,IAAI,GAAGi7B,KAAK,GAAGpU,OAAO,CAAChJ,GAAG,GAAGgJ,OAAO,CAACzT,KAAK;MACtD;MACA,IAAIyT,OAAO,CAAC/mB,KAAK,IAAI,IAAI,EAAE;QACvB+mB,OAAO,CAAC/mB,KAAK,GAAGm7B,KAAK,GAAGpU,OAAO,CAACzT,KAAK,GAAGyT,OAAO,CAAChJ,GAAG;MACvD;MACA;MACA,IAAIgJ,OAAO,CAAC9mB,MAAM,IAAI,IAAI,EAAE;QACxB8mB,OAAO,CAAChnB,GAAG,GACPm7B,EAAE,CAAC1W,YAAY,GAAG0W,EAAE,CAACzW,YAAY,GAAGsC,OAAO,CAAC9mB,MAAM;MAC1D;MACA;MACA,IAAIk7B,KAAK,IAAIjK,0DAAoB,CAAC,CAAC,IAAIT,sDAAiB,CAACU,MAAM,EAAE;QAC7D,IAAIpK,OAAO,CAAC7mB,IAAI,IAAI,IAAI,EAAE;UACtB6mB,OAAO,CAAC/mB,KAAK,GACTk7B,EAAE,CAACxW,WAAW,GAAGwW,EAAE,CAACvW,WAAW,GAAGoC,OAAO,CAAC7mB,IAAI;QACtD;QACA,IAAIgxB,0DAAoB,CAAC,CAAC,IAAIT,sDAAiB,CAACkB,QAAQ,EAAE;UACtD5K,OAAO,CAAC7mB,IAAI,GAAG6mB,OAAO,CAAC/mB,KAAK;QAChC,CAAC,MACI,IAAIkxB,0DAAoB,CAAC,CAAC,IAAIT,sDAAiB,CAACiB,OAAO,EAAE;UAC1D3K,OAAO,CAAC7mB,IAAI,GAAG6mB,OAAO,CAAC/mB,KAAK,GAAG,CAAC+mB,OAAO,CAAC/mB,KAAK,GAAG+mB,OAAO,CAAC/mB,KAAK;QACjE;MACJ,CAAC,MACI;QACD,IAAI+mB,OAAO,CAAC/mB,KAAK,IAAI,IAAI,EAAE;UACvB+mB,OAAO,CAAC7mB,IAAI,GACRg7B,EAAE,CAACxW,WAAW,GAAGwW,EAAE,CAACvW,WAAW,GAAGoC,OAAO,CAAC/mB,KAAK;QACvD;MACJ;MACA,IAAI,CAACo7B,qBAAqB,CAACrU,OAAO,CAAC;IACvC;IACAqU,qBAAqBA,CAACrU,OAAO,EAAE;MAC3B,MAAMmU,EAAE,GAAG,IAAI,CAACP,UAAU,CAACnS,aAAa;MACxC,IAAIoI,0DAAsB,CAAC,CAAC,EAAE;QAC1BsK,EAAE,CAAClK,QAAQ,CAACjK,OAAO,CAAC;MACxB,CAAC,MACI;QACD,IAAIA,OAAO,CAAChnB,GAAG,IAAI,IAAI,EAAE;UACrBm7B,EAAE,CAACj5B,SAAS,GAAG8kB,OAAO,CAAChnB,GAAG;QAC9B;QACA,IAAIgnB,OAAO,CAAC7mB,IAAI,IAAI,IAAI,EAAE;UACtBg7B,EAAE,CAACh5B,UAAU,GAAG6kB,OAAO,CAAC7mB,IAAI;QAChC;MACJ;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIo4B,mBAAmBA,CAACje,IAAI,EAAE;MACtB,MAAM0J,IAAI,GAAG,MAAM;MACnB,MAAMC,KAAK,GAAG,OAAO;MACrB,MAAMkX,EAAE,GAAG,IAAI,CAACP,UAAU,CAACnS,aAAa;MACxC,IAAInO,IAAI,IAAI,KAAK,EAAE;QACf,OAAO6gB,EAAE,CAACj5B,SAAS;MACvB;MACA,IAAIoY,IAAI,IAAI,QAAQ,EAAE;QAClB,OAAO6gB,EAAE,CAAC1W,YAAY,GAAG0W,EAAE,CAACzW,YAAY,GAAGyW,EAAE,CAACj5B,SAAS;MAC3D;MACA;MACA,MAAMk5B,KAAK,GAAG,IAAI,CAAClgC,GAAG,IAAI,IAAI,CAACA,GAAG,CAAC1D,KAAK,IAAI,KAAK;MACjD,IAAI8iB,IAAI,IAAI,OAAO,EAAE;QACjBA,IAAI,GAAG8gB,KAAK,GAAGnX,KAAK,GAAGD,IAAI;MAC/B,CAAC,MACI,IAAI1J,IAAI,IAAI,KAAK,EAAE;QACpBA,IAAI,GAAG8gB,KAAK,GAAGpX,IAAI,GAAGC,KAAK;MAC/B;MACA,IAAImX,KAAK,IAAIjK,0DAAoB,CAAC,CAAC,IAAIT,sDAAiB,CAACkB,QAAQ,EAAE;QAC/D;QACA;QACA,IAAItX,IAAI,IAAI0J,IAAI,EAAE;UACd,OAAOmX,EAAE,CAACxW,WAAW,GAAGwW,EAAE,CAACvW,WAAW,GAAGuW,EAAE,CAACh5B,UAAU;QAC1D,CAAC,MACI;UACD,OAAOg5B,EAAE,CAACh5B,UAAU;QACxB;MACJ,CAAC,MACI,IAAIi5B,KAAK,IAAIjK,0DAAoB,CAAC,CAAC,IAAIT,sDAAiB,CAACiB,OAAO,EAAE;QACnE;QACA;QACA,IAAIrX,IAAI,IAAI0J,IAAI,EAAE;UACd,OAAOmX,EAAE,CAACh5B,UAAU,GAAGg5B,EAAE,CAACxW,WAAW,GAAGwW,EAAE,CAACvW,WAAW;QAC1D,CAAC,MACI;UACD,OAAO,CAACuW,EAAE,CAACh5B,UAAU;QACzB;MACJ,CAAC,MACI;QACD;QACA;QACA,IAAImY,IAAI,IAAI0J,IAAI,EAAE;UACd,OAAOmX,EAAE,CAACh5B,UAAU;QACxB,CAAC,MACI;UACD,OAAOg5B,EAAE,CAACxW,WAAW,GAAGwW,EAAE,CAACvW,WAAW,GAAGuW,EAAE,CAACh5B,UAAU;QAC1D;MACJ;IACJ;IACA,OAAO7I,IAAI,YAAAgiC,sBAAA9hC,iBAAA;MAAA,YAAAA,iBAAA,IAAwFyE,aAAa;IAAA;IAChH,OAAO8qB,IAAI,kBAhT8EpxB,+DAAE;MAAA4H,IAAA,EAgTJtB,aAAa;MAAAknB,SAAA;IAAA;EACxG;EAAC,OApJKlnB,aAAa;AAAA;AAqJnB;EAAA,QAAAnE,SAAA,oBAAAA,SAAA;AAAA;;AAOA;AACA,MAAMyhC,mBAAmB,GAAG,EAAE;AAC9B;AACA;AACA;AACA;AAHA,IAIMz9B,aAAa;EAAnB,MAAMA,aAAa,CAAC;IAChB47B,SAAS,GAAG9hC,qDAAM,CAACO,qDAAQ,CAAC;IAC5BqjC,UAAU;IACV;IACAC,aAAa;IACb;IACAC,OAAO,GAAG,IAAI/+B,yCAAO,CAAC,CAAC;IACvB;IACA7B,SAAS,GAAGlD,qDAAM,CAACqC,mDAAQ,CAAC;IAC5BZ,WAAWA,CAAA,EAAG;MACV,MAAMyhC,MAAM,GAAGljC,qDAAM,CAACiE,iDAAM,CAAC;MAC7B,MAAMiS,QAAQ,GAAGlW,qDAAM,CAACkE,2DAAgB,CAAC,CAACgqB,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC;MACpEgV,MAAM,CAAC/sB,iBAAiB,CAAC,MAAM;QAC3B,IAAI,IAAI,CAAC2rB,SAAS,CAACrhC,SAAS,EAAE;UAC1B,MAAMsjC,cAAc,GAAIllC,KAAK,IAAK,IAAI,CAACilC,OAAO,CAACvrB,IAAI,CAAC1Z,KAAK,CAAC;UAC1D,IAAI,CAAC+kC,UAAU,GAAG,CACd1tB,QAAQ,CAACjG,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE8zB,cAAc,CAAC,EACnD7tB,QAAQ,CAACjG,MAAM,CAAC,QAAQ,EAAE,mBAAmB,EAAE8zB,cAAc,CAAC,CACjE;QACL;QACA;QACA;QACA,IAAI,CAAC9gC,MAAM,CAAC,CAAC,CAAC2T,SAAS,CAAC,MAAO,IAAI,CAACitB,aAAa,GAAG,IAAK,CAAC;MAC9D,CAAC,CAAC;IACN;IACAngC,WAAWA,CAAA,EAAG;MACV,IAAI,CAACkgC,UAAU,EAAEv5B,OAAO,CAAC0W,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;MAC9C,IAAI,CAAC+iB,OAAO,CAACngC,QAAQ,CAAC,CAAC;IAC3B;IACA;IACA4nB,eAAeA,CAAA,EAAG;MACd,IAAI,CAAC,IAAI,CAACsY,aAAa,EAAE;QACrB,IAAI,CAACG,mBAAmB,CAAC,CAAC;MAC9B;MACA,MAAMC,MAAM,GAAG;QAAEz7B,KAAK,EAAE,IAAI,CAACq7B,aAAa,CAACr7B,KAAK;QAAEC,MAAM,EAAE,IAAI,CAACo7B,aAAa,CAACp7B;MAAO,CAAC;MACrF;MACA,IAAI,CAAC,IAAI,CAACq5B,SAAS,CAACrhC,SAAS,EAAE;QAC3B,IAAI,CAACojC,aAAa,GAAG,IAAI;MAC7B;MACA,OAAOI,MAAM;IACjB;IACA;IACAC,eAAeA,CAAA,EAAG;MACd;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,MAAM/5B,cAAc,GAAG,IAAI,CAACC,yBAAyB,CAAC,CAAC;MACvD,MAAM;QAAE5B,KAAK;QAAEC;MAAO,CAAC,GAAG,IAAI,CAAC8iB,eAAe,CAAC,CAAC;MAChD,OAAO;QACHnjB,GAAG,EAAE+B,cAAc,CAAC/B,GAAG;QACvBG,IAAI,EAAE4B,cAAc,CAAC5B,IAAI;QACzBD,MAAM,EAAE6B,cAAc,CAAC/B,GAAG,GAAGK,MAAM;QACnCJ,KAAK,EAAE8B,cAAc,CAAC5B,IAAI,GAAGC,KAAK;QAClCC,MAAM;QACND;MACJ,CAAC;IACL;IACA;IACA4B,yBAAyBA,CAAA,EAAG;MACxB;MACA;MACA,IAAI,CAAC,IAAI,CAAC03B,SAAS,CAACrhC,SAAS,EAAE;QAC3B,OAAO;UAAE2H,GAAG,EAAE,CAAC;UAAEG,IAAI,EAAE;QAAE,CAAC;MAC9B;MACA;MACA;MACA;MACA;MACA;MACA;MACA,MAAM7H,QAAQ,GAAG,IAAI,CAACwC,SAAS;MAC/B,MAAMjC,MAAM,GAAG,IAAI,CAACkjC,UAAU,CAAC,CAAC;MAChC,MAAM3gC,eAAe,GAAG9C,QAAQ,CAAC8C,eAAe;MAChD,MAAM4gC,YAAY,GAAG5gC,eAAe,CAAC2E,qBAAqB,CAAC,CAAC;MAC5D,MAAMC,GAAG,GAAG,CAACg8B,YAAY,CAACh8B,GAAG,IACzB1H,QAAQ,CAAC2C,IAAI,CAACiH,SAAS,IACvBrJ,MAAM,CAACkK,OAAO,IACd3H,eAAe,CAAC8G,SAAS,IACzB,CAAC;MACL,MAAM/B,IAAI,GAAG,CAAC67B,YAAY,CAAC77B,IAAI,IAC3B7H,QAAQ,CAAC2C,IAAI,CAACkH,UAAU,IACxBtJ,MAAM,CAACmK,OAAO,IACd5H,eAAe,CAAC+G,UAAU,IAC1B,CAAC;MACL,OAAO;QAAEnC,GAAG;QAAEG;MAAK,CAAC;IACxB;IACA;AACJ;AACA;AACA;AACA;IACItF,MAAMA,CAACohC,YAAY,GAAGV,mBAAmB,EAAE;MACvC,OAAOU,YAAY,GAAG,CAAC,GAAG,IAAI,CAACP,OAAO,CAAC/X,IAAI,CAACwS,yDAAS,CAAC8F,YAAY,CAAC,CAAC,GAAG,IAAI,CAACP,OAAO;IACvF;IACA;IACAK,UAAUA,CAAA,EAAG;MACT,OAAO,IAAI,CAACjhC,SAAS,CAACohC,WAAW,IAAIrjC,MAAM;IAC/C;IACA;IACA+iC,mBAAmBA,CAAA,EAAG;MAClB,MAAM/iC,MAAM,GAAG,IAAI,CAACkjC,UAAU,CAAC,CAAC;MAChC,IAAI,CAACN,aAAa,GAAG,IAAI,CAAC/B,SAAS,CAACrhC,SAAS,GACvC;QAAE+H,KAAK,EAAEvH,MAAM,CAACsjC,UAAU;QAAE97B,MAAM,EAAExH,MAAM,CAACujC;MAAY,CAAC,GACxD;QAAEh8B,KAAK,EAAE,CAAC;QAAEC,MAAM,EAAE;MAAE,CAAC;IACjC;IACA,OAAO/G,IAAI,YAAA+iC,sBAAA7iC,iBAAA;MAAA,YAAAA,iBAAA,IAAwFsE,aAAa;IAAA;IAChH,OAAOrE,KAAK,kBA/a6E9B,gEAAE;MAAAgC,KAAA,EA+aYmE,aAAa;MAAAlE,OAAA,EAAbkE,aAAa,CAAAxE,IAAA;MAAAO,UAAA,EAAc;IAAM;EAC5I;EAAC,OAjHKiE,aAAa;AAAA;AAkHnB;EAAA,QAAAhE,SAAA,oBAAAA,SAAA;AAAA;AAKA,MAAMwiC,kBAAkB,gBAAG,IAAItiC,yDAAc,CAAC,oBAAoB,CAAC;AACnE;AACA;AACA;AAFA,IAGMuiC,oBAAoB;EAA1B,MAAMA,oBAAoB,SAASt+B,aAAa,CAAC;IAC7C5E,WAAWA,CAAA,EAAG;MACV,KAAK,CAAC,CAAC;IACX;IACA;AACJ;AACA;AACA;AACA;IACImjC,mBAAmBA,CAACphB,WAAW,EAAE;MAC7B,MAAMqhB,UAAU,GAAG,IAAI,CAAC7B,UAAU,CAACnS,aAAa;MAChD,OAAOrN,WAAW,KAAK,YAAY,GAAGqhB,UAAU,CAAC7X,WAAW,GAAG6X,UAAU,CAAC/X,YAAY;IAC1F;IACA,OAAOprB,IAAI,YAAAojC,6BAAAljC,iBAAA;MAAA,YAAAA,iBAAA,IAAwF+iC,oBAAoB;IAAA;IACvH,OAAOxT,IAAI,kBAxc8EpxB,+DAAE;MAAA4H,IAAA,EAwcJg9B,oBAAoB;MAAArT,QAAA,GAxclBvxB,wEAAE;IAAA;EAyc/F;EAAC,OAfK4kC,oBAAoB;AAAA;AAgB1B;EAAA,QAAAziC,SAAA,oBAAAA,SAAA;AAAA;;AAIA;AACA,SAAS8iC,WAAWA,CAACC,EAAE,EAAEC,EAAE,EAAE;EACzB,OAAOD,EAAE,CAACtpB,KAAK,IAAIupB,EAAE,CAACvpB,KAAK,IAAIspB,EAAE,CAAC7e,GAAG,IAAI8e,EAAE,CAAC9e,GAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM+e,gBAAgB,GAAG,OAAOC,qBAAqB,KAAK,WAAW,GAAGlgC,yDAAuB,GAAGm5B,+CAAa;AAC/G;AAAA,IACMgH,wBAAwB;EAA9B,MAAMA,wBAAwB,SAASV,oBAAoB,CAAC;IACxD3B,UAAU,GAAGhjC,qDAAM,CAACmE,qDAAU,CAAC;IAC/B4tB,kBAAkB,GAAG/xB,qDAAM,CAACwE,4DAAiB,CAAC;IAC9Cg9B,eAAe,GAAGxhC,qDAAM,CAAC6+B,uBAAuB,EAAE;MAC9C17B,QAAQ,EAAE;IACd,CAAC,CAAC;IACF6zB,UAAU,GAAGh3B,qDAAM,CAAC0kC,kBAAkB,EAAE;MAAEvhC,QAAQ,EAAE;IAAK,CAAC,CAAC;IAC3D2+B,SAAS,GAAG9hC,qDAAM,CAACO,qDAAQ,CAAC;IAC5B;IACA+kC,gBAAgB,GAAG,IAAIvgC,yCAAO,CAAC,CAAC;IAChC;IACAwgC,qBAAqB,GAAG,IAAIxgC,yCAAO,CAAC,CAAC;IACrC;IACA,IAAIye,WAAWA,CAAA,EAAG;MACd,OAAO,IAAI,CAACgiB,YAAY;IAC5B;IACA,IAAIhiB,WAAWA,CAACA,WAAW,EAAE;MACzB,IAAI,IAAI,CAACgiB,YAAY,KAAKhiB,WAAW,EAAE;QACnC,IAAI,CAACgiB,YAAY,GAAGhiB,WAAW;QAC/B,IAAI,CAACiiB,oBAAoB,CAAC,CAAC;MAC/B;IACJ;IACAD,YAAY,GAAG,UAAU;IACzB;AACJ;AACA;AACA;IACIE,UAAU,GAAG,KAAK;IAClB;IACA;IACA;IACA;IACA;IACA1G,mBAAmB,GAAG,IAAI75B,4CAAU,CAAEoqB,QAAQ,IAAK,IAAI,CAACiS,eAAe,CAACxC,mBAAmB,CAACpoB,SAAS,CAACmO,KAAK,IAAI5G,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC1D,IAAI,CAAC,MAAM,IAAI,CAACwoB,MAAM,CAACvpB,GAAG,CAAC,MAAM4V,QAAQ,CAAChX,IAAI,CAACwM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1L;IACA4gB,eAAe;IACf;IACAC,mBAAmB,GAAG,IAAI,CAACL,qBAAqB;IAChD;AACJ;AACA;IACIM,iBAAiB,GAAG,CAAC;IACrB;IACAC,kBAAkB,GAAGxjC,qDAAM,CAAC,EAAE,CAAC;IAC/B;IACAyjC,mBAAmB,GAAGzjC,qDAAM,CAAC,EAAE,CAAC;IAChC;AACJ;AACA;AACA;IACI0jC,yBAAyB;IACzB;IACAC,cAAc,GAAG;MAAEtqB,KAAK,EAAE,CAAC;MAAEyK,GAAG,EAAE;IAAE,CAAC;IACrC;IACA8f,WAAW,GAAG,CAAC;IACf;IACArC,aAAa,GAAG,CAAC;IACjB;IACAsC,MAAM;IACN;IACAC,sBAAsB,GAAG,CAAC;IAC1B;AACJ;AACA;AACA;IACIC,kCAAkC,GAAG,KAAK;IAC1C;IACAC,yBAAyB,GAAG,KAAK;IACjC;IACAC,wBAAwB,GAAG,EAAE;IAC7B;IACAC,gBAAgB,GAAGxhC,8CAAY,CAACkO,KAAK;IACrCsf,SAAS,GAAGxyB,qDAAM,CAACyE,mDAAQ,CAAC;IAC5BgiC,YAAY,GAAG,KAAK;IACpBhlC,WAAWA,CAAA,EAAG;MACV,KAAK,CAAC,CAAC;MACP,MAAMilC,aAAa,GAAG1mC,qDAAM,CAACkG,aAAa,CAAC;MAC3C,IAAI,CAAC,IAAI,CAACs7B,eAAe,KAAK,OAAOt/B,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;QAC1E,MAAM2oB,KAAK,CAAC,gFAAgF,CAAC;MACjG;MACA,IAAI,CAAC2b,gBAAgB,GAAGE,aAAa,CAACzjC,MAAM,CAAC,CAAC,CAAC2T,SAAS,CAAC,MAAM;QAC3D,IAAI,CAAC+vB,iBAAiB,CAAC,CAAC;MAC5B,CAAC,CAAC;MACF,IAAI,CAAC,IAAI,CAAC3P,UAAU,EAAE;QAClB;QACA,IAAI,CAACgM,UAAU,CAACnS,aAAa,CAACjhB,SAAS,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrE,IAAI,CAACmnB,UAAU,GAAG,IAAI;MAC1B;IACJ;IACAsM,QAAQA,CAAA,EAAG;MACP;MACA,IAAI,CAAC,IAAI,CAACxB,SAAS,CAACrhC,SAAS,EAAE;QAC3B;MACJ;MACA,IAAI,IAAI,CAACu2B,UAAU,KAAK,IAAI,EAAE;QAC1B,KAAK,CAACsM,QAAQ,CAAC,CAAC;MACpB;MACA;MACA;MACA;MACA;MACA,IAAI,CAACJ,MAAM,CAAC/sB,iBAAiB,CAAC,MAAMgI,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC1D,IAAI,CAAC,MAAM;QAC7D,IAAI,CAACksB,oBAAoB,CAAC,CAAC;QAC3B,IAAI,CAACpF,eAAe,CAACryB,MAAM,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC6nB,UAAU,CACVoL,eAAe,CAAC,CAAC,CACjBrW,IAAI;QACT;QACA/lB,yDAAS,CAAC,IAAI,CAAC;QACf;QACA;QACA;QACAu4B,yDAAS,CAAC,CAAC,EAAE4G,gBAAgB,CAAC;QAC9B;QACA;QACA;QACAx/B,yDAAS,CAAC,IAAI,CAACusB,UAAU,CAAC,CAAC,CACtBtb,SAAS,CAAC,MAAM,IAAI,CAAC4qB,eAAe,CAAC5B,iBAAiB,CAAC,CAAC,CAAC;QAC9D,IAAI,CAACiH,0BAA0B,CAAC,CAAC;MACrC,CAAC,CAAC,CAAC;IACP;IACAnjC,WAAWA,CAAA,EAAG;MACV,IAAI,CAAC05B,MAAM,CAAC,CAAC;MACb,IAAI,CAACoE,eAAe,CAACpE,MAAM,CAAC,CAAC;MAC7B;MACA,IAAI,CAACmI,qBAAqB,CAAC5hC,QAAQ,CAAC,CAAC;MACrC,IAAI,CAAC2hC,gBAAgB,CAAC3hC,QAAQ,CAAC,CAAC;MAChC,IAAI,CAAC6iC,gBAAgB,CAAC7vB,WAAW,CAAC,CAAC;MACnC,IAAI,CAAC8vB,YAAY,GAAG,IAAI;MACxB,KAAK,CAAC/iC,WAAW,CAAC,CAAC;IACvB;IACA;IACAyL,MAAMA,CAAC23B,KAAK,EAAE;MACV,IAAI,IAAI,CAACX,MAAM,KAAK,OAAOjkC,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;QAChE,MAAM2oB,KAAK,CAAC,+CAA+C,CAAC;MAChE;MACA;MACA;MACA;MACA,IAAI,CAACqY,MAAM,CAAC/sB,iBAAiB,CAAC,MAAM;QAChC,IAAI,CAACgwB,MAAM,GAAGW,KAAK;QACnB,IAAI,CAACX,MAAM,CAACY,UAAU,CAAChb,IAAI,CAACpmB,yDAAS,CAAC,IAAI,CAAC2/B,gBAAgB,CAAC,CAAC,CAAC1uB,SAAS,CAAC3B,IAAI,IAAI;UAC5E,MAAM+xB,SAAS,GAAG/xB,IAAI,CAAChO,MAAM;UAC7B,IAAI+/B,SAAS,KAAK,IAAI,CAACd,WAAW,EAAE;YAChC,IAAI,CAACA,WAAW,GAAGc,SAAS;YAC5B,IAAI,CAACxF,eAAe,CAAC3B,mBAAmB,CAAC,CAAC;UAC9C;UACA,IAAI,CAACoH,kBAAkB,CAAC,CAAC;QAC7B,CAAC,CAAC;MACN,CAAC,CAAC;IACN;IACA;IACA7J,MAAMA,CAAA,EAAG;MACL,IAAI,CAAC+I,MAAM,GAAG,IAAI;MAClB,IAAI,CAACb,gBAAgB,CAAC/sB,IAAI,CAAC,CAAC;IAChC;IACA;IACA6nB,aAAaA,CAAA,EAAG;MACZ,OAAO,IAAI,CAAC8F,WAAW;IAC3B;IACA;IACA3a,eAAeA,CAAA,EAAG;MACd,OAAO,IAAI,CAACsY,aAAa;IAC7B;IACA;IACA;IACA;IACA;IACA;IACAvD,gBAAgBA,CAAA,EAAG;MACf,OAAO,IAAI,CAAC2F,cAAc;IAC9B;IACAiB,yCAAyCA,CAACxkB,IAAI,EAAE;MAC5C,OAAO,IAAI,CAACuU,aAAa,CAAC,CAAC,CAACpG,aAAa,CAAC1oB,qBAAqB,CAAC,CAAC,CAACua,IAAI,CAAC;IAC3E;IACA;AACJ;AACA;AACA;IACIyd,mBAAmBA,CAAClV,IAAI,EAAE;MACtB,IAAI,IAAI,CAAC4a,iBAAiB,KAAK5a,IAAI,EAAE;QACjC,IAAI,CAAC4a,iBAAiB,GAAG5a,IAAI;QAC7B,IAAI,CAACwa,oBAAoB,CAAC,CAAC;QAC3B,IAAI,CAACoB,0BAA0B,CAAC,CAAC;MACrC;IACJ;IACA;IACAzF,gBAAgBA,CAAC+F,KAAK,EAAE;MACpB,IAAI,CAACnC,WAAW,CAAC,IAAI,CAACiB,cAAc,EAAEkB,KAAK,CAAC,EAAE;QAC1C,IAAI,IAAI,CAACzB,UAAU,EAAE;UACjByB,KAAK,GAAG;YAAExrB,KAAK,EAAE,CAAC;YAAEyK,GAAG,EAAEnZ,IAAI,CAACoV,GAAG,CAAC,IAAI,CAAC4jB,cAAc,CAAC7f,GAAG,EAAE+gB,KAAK,CAAC/gB,GAAG;UAAE,CAAC;QAC3E;QACA,IAAI,CAACmf,qBAAqB,CAAChtB,IAAI,CAAE,IAAI,CAAC0tB,cAAc,GAAGkB,KAAM,CAAC;QAC9D,IAAI,CAACN,0BAA0B,CAAC,MAAM,IAAI,CAACrF,eAAe,CAAC1B,iBAAiB,CAAC,CAAC,CAAC;MACnF;IACJ;IACA;AACJ;AACA;IACIsH,+BAA+BA,CAAA,EAAG;MAC9B,OAAO,IAAI,CAACf,kCAAkC,GAAG,IAAI,GAAG,IAAI,CAACD,sBAAsB;IACvF;IACA;AACJ;AACA;AACA;IACI/E,wBAAwBA,CAACtnB,MAAM,EAAE6I,EAAE,GAAG,UAAU,EAAE;MAC9C;MACA7I,MAAM,GAAG,IAAI,CAAC2rB,UAAU,IAAI9iB,EAAE,KAAK,UAAU,GAAG,CAAC,GAAG7I,MAAM;MAC1D;MACA;MACA,MAAMypB,KAAK,GAAG,IAAI,CAAClgC,GAAG,IAAI,IAAI,CAACA,GAAG,CAAC1D,KAAK,IAAI,KAAK;MACjD,MAAMukB,YAAY,GAAG,IAAI,CAACX,WAAW,IAAI,YAAY;MACrD,MAAM6jB,IAAI,GAAGljB,YAAY,GAAG,GAAG,GAAG,GAAG;MACrC,MAAMmjB,aAAa,GAAGnjB,YAAY,IAAIqf,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;MACpD,IAAI52B,SAAS,GAAG,YAAYy6B,IAAI,IAAIE,MAAM,CAACD,aAAa,GAAGvtB,MAAM,CAAC,KAAK;MACvE,IAAI,CAACqsB,sBAAsB,GAAGrsB,MAAM;MACpC,IAAI6I,EAAE,KAAK,QAAQ,EAAE;QACjBhW,SAAS,IAAI,aAAay6B,IAAI,SAAS;QACvC;QACA;QACA;QACA,IAAI,CAAChB,kCAAkC,GAAG,IAAI;MAClD;MACA,IAAI,IAAI,CAACL,yBAAyB,IAAIp5B,SAAS,EAAE;QAC7C;QACA;QACA,IAAI,CAACo5B,yBAAyB,GAAGp5B,SAAS;QAC1C,IAAI,CAACi6B,0BAA0B,CAAC,MAAM;UAClC,IAAI,IAAI,CAACR,kCAAkC,EAAE;YACzC,IAAI,CAACD,sBAAsB,IAAI,IAAI,CAACoB,0BAA0B,CAAC,CAAC;YAChE,IAAI,CAACnB,kCAAkC,GAAG,KAAK;YAC/C,IAAI,CAAChF,wBAAwB,CAAC,IAAI,CAAC+E,sBAAsB,CAAC;UAC9D,CAAC,MACI;YACD,IAAI,CAAC5E,eAAe,CAACzB,uBAAuB,CAAC,CAAC;UAClD;QACJ,CAAC,CAAC;MACN;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;IACIG,cAAcA,CAACnmB,MAAM,EAAEkmB,QAAQ,GAAG,MAAM,EAAE;MACtC,MAAM7Q,OAAO,GAAG;QAAE6Q;MAAS,CAAC;MAC5B,IAAI,IAAI,CAACzc,WAAW,KAAK,YAAY,EAAE;QACnC4L,OAAO,CAACzT,KAAK,GAAG5B,MAAM;MAC1B,CAAC,MACI;QACDqV,OAAO,CAAChnB,GAAG,GAAG2R,MAAM;MACxB;MACA,IAAI,CAACid,UAAU,CAACqC,QAAQ,CAACjK,OAAO,CAAC;IACrC;IACA;AACJ;AACA;AACA;AACA;IACI4Q,aAAaA,CAACjb,KAAK,EAAEkb,QAAQ,GAAG,MAAM,EAAE;MACpC,IAAI,CAACuB,eAAe,CAACxB,aAAa,CAACjb,KAAK,EAAEkb,QAAQ,CAAC;IACvD;IACA;AACJ;AACA;AACA;AACA;IACIU,mBAAmBA,CAACje,IAAI,EAAE;MACtB;MACA,IAAIie,mBAAmB;MACvB,IAAI,IAAI,CAAC3J,UAAU,IAAI,IAAI,EAAE;QACzB2J,mBAAmB,GAAI8G,KAAK,IAAK,KAAK,CAAC9G,mBAAmB,CAAC8G,KAAK,CAAC;MACrE,CAAC,MACI;QACD9G,mBAAmB,GAAI8G,KAAK,IAAK,IAAI,CAACzQ,UAAU,CAAC2J,mBAAmB,CAAC8G,KAAK,CAAC;MAC/E;MACA,OAAOx6B,IAAI,CAACoV,GAAG,CAAC,CAAC,EAAEse,mBAAmB,CAACje,IAAI,KAAK,IAAI,CAACc,WAAW,KAAK,YAAY,GAAG,OAAO,GAAG,KAAK,CAAC,CAAC,GACjG,IAAI,CAACkkB,qBAAqB,CAAC,CAAC,CAAC;IACrC;IACA;AACJ;AACA;AACA;IACIA,qBAAqBA,CAAChlB,IAAI,EAAE;MACxB,IAAIilB,QAAQ;MACZ,MAAMvb,IAAI,GAAG,MAAM;MACnB,MAAMC,KAAK,GAAG,OAAO;MACrB,MAAMmX,KAAK,GAAG,IAAI,CAAClgC,GAAG,EAAE1D,KAAK,IAAI,KAAK;MACtC,IAAI8iB,IAAI,IAAI,OAAO,EAAE;QACjBilB,QAAQ,GAAGnE,KAAK,GAAGnX,KAAK,GAAGD,IAAI;MACnC,CAAC,MACI,IAAI1J,IAAI,IAAI,KAAK,EAAE;QACpBilB,QAAQ,GAAGnE,KAAK,GAAGpX,IAAI,GAAGC,KAAK;MACnC,CAAC,MACI,IAAI3J,IAAI,EAAE;QACXilB,QAAQ,GAAGjlB,IAAI;MACnB,CAAC,MACI;QACDilB,QAAQ,GAAG,IAAI,CAACnkB,WAAW,KAAK,YAAY,GAAG,MAAM,GAAG,KAAK;MACjE;MACA,MAAMokB,kBAAkB,GAAG,IAAI,CAAC5Q,UAAU,CAACkQ,yCAAyC,CAACS,QAAQ,CAAC;MAC9F,MAAME,kBAAkB,GAAG,IAAI,CAAC7E,UAAU,CAACnS,aAAa,CAAC1oB,qBAAqB,CAAC,CAAC,CAACw/B,QAAQ,CAAC;MAC1F,OAAOE,kBAAkB,GAAGD,kBAAkB;IAClD;IACA;IACAJ,0BAA0BA,CAAA,EAAG;MACzB,MAAMM,SAAS,GAAG,IAAI,CAACnC,eAAe,CAAC9U,aAAa;MACpD,OAAO,IAAI,CAACrN,WAAW,KAAK,YAAY,GAAGskB,SAAS,CAACC,WAAW,GAAGD,SAAS,CAACE,YAAY;IAC7F;IACA;AACJ;AACA;AACA;IACIC,gBAAgBA,CAACd,KAAK,EAAE;MACpB,IAAI,CAAC,IAAI,CAAChB,MAAM,EAAE;QACd,OAAO,CAAC;MACZ;MACA,OAAO,IAAI,CAACA,MAAM,CAAC8B,gBAAgB,CAACd,KAAK,EAAE,IAAI,CAAC3jB,WAAW,CAAC;IAChE;IACA;IACAmjB,iBAAiBA,CAAA,EAAG;MAChB;MACA,IAAI,CAACC,oBAAoB,CAAC,CAAC;MAC3B,IAAI,CAACpF,eAAe,CAAC3B,mBAAmB,CAAC,CAAC;IAC9C;IACA;IACA+G,oBAAoBA,CAAA,EAAG;MACnB,IAAI,CAAC/C,aAAa,GAAG,IAAI,CAAC7M,UAAU,CAAC4N,mBAAmB,CAAC,IAAI,CAACphB,WAAW,CAAC;IAC9E;IACA;IACAqjB,0BAA0BA,CAACqB,QAAQ,EAAE;MACjC,IAAIA,QAAQ,EAAE;QACV,IAAI,CAAC3B,wBAAwB,CAAChhB,IAAI,CAAC2iB,QAAQ,CAAC;MAChD;MACA;MACA;MACA,IAAI,CAAC,IAAI,CAAC5B,yBAAyB,EAAE;QACjC,IAAI,CAACA,yBAAyB,GAAG,IAAI;QACrC,IAAI,CAACpD,MAAM,CAAC/sB,iBAAiB,CAAC,MAAMgI,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC1D,IAAI,CAAC,MAAM;UAC7D,IAAI,CAACusB,kBAAkB,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;MACP;IACJ;IACA;IACAA,kBAAkBA,CAAA,EAAG;MACjB,IAAI,IAAI,CAACR,YAAY,EAAE;QACnB;MACJ;MACA,IAAI,CAACvD,MAAM,CAACvpB,GAAG,CAAC,MAAM;QAClB;QACA;QACA;QACA,IAAI,CAACoY,kBAAkB,CAACqC,YAAY,CAAC,CAAC;QACtC;QACA;QACA;QACA;QACA,IAAI,CAACuR,eAAe,CAAC9U,aAAa,CAACrkB,KAAK,CAACI,SAAS,GAAG,IAAI,CAACo5B,yBAAyB;QACnFthC,8DAAe,CAAC,MAAM;UAClB,IAAI,CAAC4hC,yBAAyB,GAAG,KAAK;UACtC,MAAM6B,uBAAuB,GAAG,IAAI,CAAC5B,wBAAwB;UAC7D,IAAI,CAACA,wBAAwB,GAAG,EAAE;UAClC,KAAK,MAAM6B,EAAE,IAAID,uBAAuB,EAAE;YACtCC,EAAE,CAAC,CAAC;UACR;QACJ,CAAC,EAAE;UAAEnV,QAAQ,EAAE,IAAI,CAACT;QAAU,CAAC,CAAC;MACpC,CAAC,CAAC;IACN;IACA;IACAiT,oBAAoBA,CAAA,EAAG;MACnB,IAAI,CAACM,mBAAmB,CAACtiC,GAAG,CAAC,IAAI,CAAC+f,WAAW,KAAK,YAAY,GAAG,EAAE,GAAG,GAAG,IAAI,CAACqiB,iBAAiB,IAAI,CAAC;MACpG,IAAI,CAACC,kBAAkB,CAACriC,GAAG,CAAC,IAAI,CAAC+f,WAAW,KAAK,YAAY,GAAG,GAAG,IAAI,CAACqiB,iBAAiB,IAAI,GAAG,EAAE,CAAC;IACvG;IACA,OAAOnkC,IAAI,YAAA2mC,iCAAAzmC,iBAAA;MAAA,YAAAA,iBAAA,IAAwFyjC,wBAAwB;IAAA;IAC3H,OAAOhY,IAAI,kBAl1B8EttB,+DAAE;MAAA4H,IAAA,EAk1BJ09B,wBAAwB;MAAA9X,SAAA;MAAA+a,SAAA,WAAAC,+BAAA3a,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UAl1BtB7tB,yDAAE,CAAA2+B,GAAA;QAAA;QAAA,IAAA9Q,EAAA;UAAA,IAAA6a,EAAA;UAAF1oC,4DAAE,CAAA0oC,EAAA,GAAF1oC,yDAAE,QAAA8tB,GAAA,CAAA8X,eAAA,GAAA8C,EAAA,CAAAG,KAAA;QAAA;MAAA;MAAApb,SAAA;MAAAsH,QAAA;MAAAC,YAAA,WAAA8T,sCAAAjb,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UAAF7tB,yDAAE,8CAAA8tB,GAAA,CAAArK,WAAA,KAk1BY,YAAO,CAAC,4CAAAqK,GAAA,CAAArK,WAAA,KAAR,YAAO,CAAC;QAAA;MAAA;MAAA6N,MAAA;QAAA7N,WAAA;QAAAkiB,UAAA,kCAA8IthC,2DAAgB;MAAA;MAAA8wB,OAAA;QAAA8J,mBAAA;MAAA;MAAA1N,QAAA,GAl1BpLvxB,gEAAE,CAk1B4e,CAC/jB;QACIyxB,OAAO,EAAEnrB,aAAa;QACtBs7B,UAAU,EAAEA,CAACmH,iBAAiB,EAAEtJ,QAAQ,KAAKsJ,iBAAiB,IAAItJ,QAAQ;QAC1EoC,IAAI,EAAE,CAAC,CAAC,IAAI3D,mDAAQ,CAAC,CAAC,EAAE,IAAIC,iDAAM,CAACwG,kBAAkB,CAAC,CAAC,EAAEW,wBAAwB;MACrF,CAAC,CACJ,GAx1BoFtlC,wEAAE;MAAAgpC,kBAAA,EAAApK,GAAA;MAAAlR,KAAA;MAAAC,IAAA;MAAAsb,MAAA;MAAA34B,QAAA,WAAA44B,kCAAArb,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UAAF7tB,6DAAE;UAAFA,+DAAE,eAw1BoR,CAAC;UAx1BvRA,0DAAE,EAw1BiT,CAAC;UAx1BpTA,6DAAE,CAw1ByT,CAAC;UAx1B5TA,0DAAE,YAw1BknB,CAAC;QAAA;QAAA,IAAA6tB,EAAA;UAx1BrnB7tB,uDAAE,EAw1BkkB,CAAC;UAx1BrkBA,yDAAE,UAAA8tB,GAAA,CAAAiY,kBAAA,EAw1BkkB,CAAC,WAAAjY,GAAA,CAAAkY,mBAAA,EAAwC,CAAC;QAAA;MAAA;MAAA/kB,MAAA;MAAA8M,aAAA;MAAAC,eAAA;IAAA;EAC3sB;EAAC,OAhYKsX,wBAAwB;AAAA;AAiY9B;EAAA,QAAAnjC,SAAA,oBAAAA,SAAA;AAAA;;AAyBA;AACA,SAASunC,SAASA,CAACjmB,WAAW,EAAE3L,SAAS,EAAEnR,IAAI,EAAE;EAC7C,MAAM68B,EAAE,GAAG78B,IAAI;EACf,IAAI,CAAC68B,EAAE,CAACp7B,qBAAqB,EAAE;IAC3B,OAAO,CAAC;EACZ;EACA,MAAMD,IAAI,GAAGq7B,EAAE,CAACp7B,qBAAqB,CAAC,CAAC;EACvC,IAAIqb,WAAW,KAAK,YAAY,EAAE;IAC9B,OAAO3L,SAAS,KAAK,OAAO,GAAG3P,IAAI,CAACK,IAAI,GAAGL,IAAI,CAACG,KAAK;EACzD;EACA,OAAOwP,SAAS,KAAK,OAAO,GAAG3P,IAAI,CAACE,GAAG,GAAGF,IAAI,CAACI,MAAM;AACzD;AACA;AACA;AACA;AACA;AAHA,IAIMohC,eAAe;EAArB,MAAMA,eAAe,CAAC;IAClB7X,iBAAiB,GAAG7xB,qDAAM,CAACuE,2DAAgB,CAAC;IAC5ColC,SAAS,GAAG3pC,qDAAM,CAAC6E,sDAAW,CAAC;IAC/B+kC,QAAQ,GAAG5pC,qDAAM,CAACo+B,0DAAe,CAAC;IAClCyL,aAAa,GAAG7pC,qDAAM,CAAC87B,2EAAuB,CAAC;IAC/CmD,SAAS,GAAGj/B,qDAAM,CAACqlC,wBAAwB,EAAE;MAAE1U,QAAQ,EAAE;IAAK,CAAC,CAAC;IAChE;IACAmZ,UAAU,GAAG,IAAI/kC,yCAAO,CAAC,CAAC;IAC1B;IACAglC,kBAAkB,GAAG,IAAIhlC,yCAAO,CAAC,CAAC;IAClC;IACA,IAAIilC,eAAeA,CAAA,EAAG;MAClB,OAAO,IAAI,CAACC,gBAAgB;IAChC;IACA,IAAID,eAAeA,CAACpqC,KAAK,EAAE;MACvB,IAAI,CAACqqC,gBAAgB,GAAGrqC,KAAK;MAC7B,IAAID,6DAAY,CAACC,KAAK,CAAC,EAAE;QACrB,IAAI,CAACmqC,kBAAkB,CAACxxB,IAAI,CAAC3Y,KAAK,CAAC;MACvC,CAAC,MACI;QACD;QACA,IAAI,CAACmqC,kBAAkB,CAACxxB,IAAI,CAAC,IAAImjB,2EAAe,CAACF,kDAAY,CAAC57B,KAAK,CAAC,GAAGA,KAAK,GAAGiR,KAAK,CAAC6R,IAAI,CAAC9iB,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC;MAC5G;IACJ;IACAqqC,gBAAgB;IAChB;AACJ;AACA;AACA;IACI,IAAIC,oBAAoBA,CAAA,EAAG;MACvB,OAAO,IAAI,CAACC,qBAAqB;IACrC;IACA,IAAID,oBAAoBA,CAAC9B,EAAE,EAAE;MACzB,IAAI,CAACgC,YAAY,GAAG,IAAI;MACxB,IAAI,CAACD,qBAAqB,GAAG/B,EAAE,GACzB,CAACrjB,KAAK,EAAE9H,IAAI,KAAKmrB,EAAE,CAACrjB,KAAK,IAAI,IAAI,CAACkhB,cAAc,GAAG,IAAI,CAACA,cAAc,CAACtqB,KAAK,GAAG,CAAC,CAAC,EAAEsB,IAAI,CAAC,GACxF3G,SAAS;IACnB;IACA6zB,qBAAqB;IACrB;IACA,IAAIE,qBAAqBA,CAACzqC,KAAK,EAAE;MAC7B,IAAIA,KAAK,EAAE;QACP,IAAI,CAACwqC,YAAY,GAAG,IAAI;QACxB,IAAI,CAACT,SAAS,GAAG/pC,KAAK;MAC1B;IACJ;IACA;AACJ;AACA;AACA;IACI,IAAI0qC,8BAA8BA,CAAA,EAAG;MACjC,OAAO,IAAI,CAACT,aAAa,CAAC7N,aAAa;IAC3C;IACA,IAAIsO,8BAA8BA,CAACrf,IAAI,EAAE;MACrC,IAAI,CAAC4e,aAAa,CAAC7N,aAAa,GAAGt2B,wDAAoB,CAACulB,IAAI,CAAC;IACjE;IACA;IACA8b,UAAU,GAAG,IAAI,CAACgD,kBAAkB,CAAChe,IAAI;IACzC;IACA/lB,yDAAS,CAAC,IAAI,CAAC;IACf;IACAw4B,wDAAQ,CAAC,CAAC;IACV;IACA;IACA;IACAz4B,yDAAS,CAAC,CAAC,CAACwkC,IAAI,EAAEC,GAAG,CAAC,KAAK,IAAI,CAACC,iBAAiB,CAACF,IAAI,EAAEC,GAAG,CAAC,CAAC;IAC7D;IACA/L,2DAAW,CAAC,CAAC,CAAC,CAAC;IACf;IACAiM,OAAO,GAAG,IAAI;IACd;IACA/O,KAAK;IACL;IACAgP,cAAc;IACd;IACA1E,cAAc;IACd;IACAmE,YAAY,GAAG,KAAK;IACpBlY,UAAU,GAAG,IAAIntB,yCAAO,CAAC,CAAC;IAC1BtD,WAAWA,CAAA,EAAG;MACV,MAAMyhC,MAAM,GAAGljC,qDAAM,CAACiE,iDAAM,CAAC;MAC7B,IAAI,CAAC8iC,UAAU,CAACnwB,SAAS,CAAC3B,IAAI,IAAI;QAC9B,IAAI,CAAC0mB,KAAK,GAAG1mB,IAAI;QACjB,IAAI,CAAC21B,qBAAqB,CAAC,CAAC;MAChC,CAAC,CAAC;MACF,IAAI,CAAC3L,SAAS,CAAC2G,mBAAmB,CAAC7Z,IAAI,CAACpmB,yDAAS,CAAC,IAAI,CAACusB,UAAU,CAAC,CAAC,CAACtb,SAAS,CAACuwB,KAAK,IAAI;QACnF,IAAI,CAAClB,cAAc,GAAGkB,KAAK;QAC3B,IAAI,IAAI,CAAC2C,UAAU,CAAC7vB,SAAS,CAAChT,MAAM,EAAE;UAClCi8B,MAAM,CAACvpB,GAAG,CAAC,MAAM,IAAI,CAACmwB,UAAU,CAACvxB,IAAI,CAAC,IAAI,CAAC0tB,cAAc,CAAC,CAAC;QAC/D;QACA,IAAI,CAAC2E,qBAAqB,CAAC,CAAC;MAChC,CAAC,CAAC;MACF,IAAI,CAAC3L,SAAS,CAAC9vB,MAAM,CAAC,IAAI,CAAC;IAC/B;IACA;AACJ;AACA;AACA;AACA;IACI84B,gBAAgBA,CAACd,KAAK,EAAE3jB,WAAW,EAAE;MACjC,IAAI2jB,KAAK,CAACxrB,KAAK,IAAIwrB,KAAK,CAAC/gB,GAAG,EAAE;QAC1B,OAAO,CAAC;MACZ;MACA,IAAI,CAAC+gB,KAAK,CAACxrB,KAAK,GAAG,IAAI,CAACsqB,cAAc,CAACtqB,KAAK,IAAIwrB,KAAK,CAAC/gB,GAAG,GAAG,IAAI,CAAC6f,cAAc,CAAC7f,GAAG,MAC9E,OAAOlkB,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;QACjD,MAAM2oB,KAAK,CAAC,0DAA0D,CAAC;MAC3E;MACA;MACA,MAAMggB,kBAAkB,GAAG1D,KAAK,CAACxrB,KAAK,GAAG,IAAI,CAACsqB,cAAc,CAACtqB,KAAK;MAClE;MACA,MAAMmvB,QAAQ,GAAG3D,KAAK,CAAC/gB,GAAG,GAAG+gB,KAAK,CAACxrB,KAAK;MACxC;MACA;MACA,IAAIovB,SAAS;MACb,IAAIC,QAAQ;MACZ;MACA,KAAK,IAAIxrC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsrC,QAAQ,EAAEtrC,CAAC,EAAE,EAAE;QAC/B,MAAMk9B,IAAI,GAAG,IAAI,CAAC7K,iBAAiB,CAAClnB,GAAG,CAACnL,CAAC,GAAGqrC,kBAAkB,CAAC;QAC/D,IAAInO,IAAI,IAAIA,IAAI,CAACnxB,SAAS,CAACtE,MAAM,EAAE;UAC/B8jC,SAAS,GAAGC,QAAQ,GAAGtO,IAAI,CAACnxB,SAAS,CAAC,CAAC,CAAC;UACxC;QACJ;MACJ;MACA;MACA,KAAK,IAAI/L,CAAC,GAAGsrC,QAAQ,GAAG,CAAC,EAAEtrC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;QACpC,MAAMk9B,IAAI,GAAG,IAAI,CAAC7K,iBAAiB,CAAClnB,GAAG,CAACnL,CAAC,GAAGqrC,kBAAkB,CAAC;QAC/D,IAAInO,IAAI,IAAIA,IAAI,CAACnxB,SAAS,CAACtE,MAAM,EAAE;UAC/B+jC,QAAQ,GAAGtO,IAAI,CAACnxB,SAAS,CAACmxB,IAAI,CAACnxB,SAAS,CAACtE,MAAM,GAAG,CAAC,CAAC;UACpD;QACJ;MACJ;MACA,OAAO8jC,SAAS,IAAIC,QAAQ,GACtBvB,SAAS,CAACjmB,WAAW,EAAE,KAAK,EAAEwnB,QAAQ,CAAC,GAAGvB,SAAS,CAACjmB,WAAW,EAAE,OAAO,EAAEunB,SAAS,CAAC,GACpF,CAAC;IACX;IACAE,SAASA,CAAA,EAAG;MACR,IAAI,IAAI,CAACP,OAAO,IAAI,IAAI,CAACN,YAAY,EAAE;QACnC;QACA;QACA;QACA,MAAMjX,OAAO,GAAG,IAAI,CAACuX,OAAO,CAACQ,IAAI,CAAC,IAAI,CAACP,cAAc,CAAC;QACtD,IAAI,CAACxX,OAAO,EAAE;UACV,IAAI,CAACgY,cAAc,CAAC,CAAC;QACzB,CAAC,MACI;UACD,IAAI,CAACC,aAAa,CAACjY,OAAO,CAAC;QAC/B;QACA,IAAI,CAACiX,YAAY,GAAG,KAAK;MAC7B;IACJ;IACA1mC,WAAWA,CAAA,EAAG;MACV,IAAI,CAACu7B,SAAS,CAAC7B,MAAM,CAAC,CAAC;MACvB,IAAI,CAAC2M,kBAAkB,CAACxxB,IAAI,CAACjC,SAAS,CAAC;MACvC,IAAI,CAACyzB,kBAAkB,CAACpmC,QAAQ,CAAC,CAAC;MAClC,IAAI,CAACmmC,UAAU,CAACnmC,QAAQ,CAAC,CAAC;MAC1B,IAAI,CAACuuB,UAAU,CAAC3Z,IAAI,CAAC,CAAC;MACtB,IAAI,CAAC2Z,UAAU,CAACvuB,QAAQ,CAAC,CAAC;MAC1B,IAAI,CAACkmC,aAAa,CAACzM,MAAM,CAAC,CAAC;IAC/B;IACA;IACAwN,qBAAqBA,CAAA,EAAG;MACpB,IAAI,CAAC,IAAI,CAAC3E,cAAc,EAAE;QACtB;MACJ;MACA,IAAI,CAAC0E,cAAc,GAAG,IAAI,CAAChP,KAAK,CAAC9W,KAAK,CAAC,IAAI,CAACohB,cAAc,CAACtqB,KAAK,EAAE,IAAI,CAACsqB,cAAc,CAAC7f,GAAG,CAAC;MAC1F,IAAI,CAAC,IAAI,CAACskB,OAAO,EAAE;QACf;QACA;QACA,IAAI,CAACA,OAAO,GAAG,IAAI,CAACd,QAAQ,CAAC/7B,IAAI,CAAC,IAAI,CAAC88B,cAAc,CAAC,CAACU,MAAM,CAAC,CAACtmB,KAAK,EAAE9H,IAAI,KAAK;UAC3E,OAAO,IAAI,CAACitB,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,CAACnlB,KAAK,EAAE9H,IAAI,CAAC,GAAGA,IAAI;QACpF,CAAC,CAAC;MACN;MACA,IAAI,CAACmtB,YAAY,GAAG,IAAI;IAC5B;IACA;IACAK,iBAAiBA,CAACa,KAAK,EAAEC,KAAK,EAAE;MAC5B,IAAID,KAAK,EAAE;QACPA,KAAK,CAAC1P,UAAU,CAAC,IAAI,CAAC;MAC1B;MACA,IAAI,CAACwO,YAAY,GAAG,IAAI;MACxB,OAAOmB,KAAK,GAAGA,KAAK,CAAC1rC,OAAO,CAAC,IAAI,CAAC,GAAG47B,wCAAE,CAAC,CAAC;IAC7C;IACA;IACA0P,cAAcA,CAAA,EAAG;MACb,MAAMK,KAAK,GAAG,IAAI,CAAC7P,KAAK,CAAC10B,MAAM;MAC/B,IAAIzH,CAAC,GAAG,IAAI,CAACqyB,iBAAiB,CAAC5qB,MAAM;MACrC,OAAOzH,CAAC,EAAE,EAAE;QACR,MAAMk9B,IAAI,GAAG,IAAI,CAAC7K,iBAAiB,CAAClnB,GAAG,CAACnL,CAAC,CAAC;QAC1Ck9B,IAAI,CAAC70B,OAAO,CAACkd,KAAK,GAAG,IAAI,CAACkhB,cAAc,CAACtqB,KAAK,GAAGnc,CAAC;QAClDk9B,IAAI,CAAC70B,OAAO,CAAC2jC,KAAK,GAAGA,KAAK;QAC1B,IAAI,CAACC,gCAAgC,CAAC/O,IAAI,CAAC70B,OAAO,CAAC;QACnD60B,IAAI,CAAC/rB,aAAa,CAAC,CAAC;MACxB;IACJ;IACA;IACAy6B,aAAaA,CAACjY,OAAO,EAAE;MACnB,IAAI,CAAC0W,aAAa,CAAC3N,YAAY,CAAC/I,OAAO,EAAE,IAAI,CAACtB,iBAAiB,EAAE,CAAC2K,MAAM,EAAEkP,sBAAsB,EAAE5uB,YAAY,KAAK,IAAI,CAAC6uB,oBAAoB,CAACnP,MAAM,EAAE1f,YAAY,CAAC,EAAE0f,MAAM,IAAIA,MAAM,CAACvf,IAAI,CAAC;MAC1L;MACAkW,OAAO,CAACyY,qBAAqB,CAAEpP,MAAM,IAAK;QACtC,MAAME,IAAI,GAAG,IAAI,CAAC7K,iBAAiB,CAAClnB,GAAG,CAAC6xB,MAAM,CAAC1f,YAAY,CAAC;QAC5D4f,IAAI,CAAC70B,OAAO,CAAC01B,SAAS,GAAGf,MAAM,CAACvf,IAAI;MACxC,CAAC,CAAC;MACF;MACA,MAAMuuB,KAAK,GAAG,IAAI,CAAC7P,KAAK,CAAC10B,MAAM;MAC/B,IAAIzH,CAAC,GAAG,IAAI,CAACqyB,iBAAiB,CAAC5qB,MAAM;MACrC,OAAOzH,CAAC,EAAE,EAAE;QACR,MAAMk9B,IAAI,GAAG,IAAI,CAAC7K,iBAAiB,CAAClnB,GAAG,CAACnL,CAAC,CAAC;QAC1Ck9B,IAAI,CAAC70B,OAAO,CAACkd,KAAK,GAAG,IAAI,CAACkhB,cAAc,CAACtqB,KAAK,GAAGnc,CAAC;QAClDk9B,IAAI,CAAC70B,OAAO,CAAC2jC,KAAK,GAAGA,KAAK;QAC1B,IAAI,CAACC,gCAAgC,CAAC/O,IAAI,CAAC70B,OAAO,CAAC;MACvD;IACJ;IACA;IACA4jC,gCAAgCA,CAAC5jC,OAAO,EAAE;MACtCA,OAAO,CAAC+gC,KAAK,GAAG/gC,OAAO,CAACkd,KAAK,KAAK,CAAC;MACnCld,OAAO,CAACgkC,IAAI,GAAGhkC,OAAO,CAACkd,KAAK,KAAKld,OAAO,CAAC2jC,KAAK,GAAG,CAAC;MAClD3jC,OAAO,CAACikC,IAAI,GAAGjkC,OAAO,CAACkd,KAAK,GAAG,CAAC,KAAK,CAAC;MACtCld,OAAO,CAACkkC,GAAG,GAAG,CAAClkC,OAAO,CAACikC,IAAI;IAC/B;IACAH,oBAAoBA,CAACnP,MAAM,EAAEzX,KAAK,EAAE;MAChC;MACA;MACA;MACA;MACA,OAAO;QACHiP,WAAW,EAAE,IAAI,CAAC2V,SAAS;QAC3B9hC,OAAO,EAAE;UACL01B,SAAS,EAAEf,MAAM,CAACvf,IAAI;UACtB;UACA;UACA+sB,eAAe,EAAE,IAAI,CAACC,gBAAgB;UACtCllB,KAAK,EAAE,CAAC,CAAC;UACTymB,KAAK,EAAE,CAAC,CAAC;UACT5C,KAAK,EAAE,KAAK;UACZiD,IAAI,EAAE,KAAK;UACXE,GAAG,EAAE,KAAK;UACVD,IAAI,EAAE;QACV,CAAC;QACD/mB;MACJ,CAAC;IACL;IACA,OAAOinB,sBAAsBA,CAACC,SAAS,EAAEpkC,OAAO,EAAE;MAC9C,OAAO,IAAI;IACf;IACA,OAAOnG,IAAI,YAAAwqC,wBAAAtqC,iBAAA;MAAA,YAAAA,iBAAA,IAAwF8nC,eAAe;IAAA;IAClH,OAAOvY,IAAI,kBAxnC8EpxB,+DAAE;MAAA4H,IAAA,EAwnCJ+hC,eAAe;MAAAnc,SAAA;MAAA8D,MAAA;QAAA2Y,eAAA;QAAAE,oBAAA;QAAAG,qBAAA;QAAAC,8BAAA;MAAA;MAAAhZ,QAAA,GAxnCbvxB,gEAAE,CAwnC0S,CAAC;QAAEyxB,OAAO,EAAEsK,2EAAuB;QAAEqQ,QAAQ,EAAEpQ,2EAA4BA;MAAC,CAAC,CAAC;IAAA;EACvd;EAAC,OAtPK2N,eAAe;AAAA;AAuPrB;EAAA,QAAAxnC,SAAA,oBAAAA,SAAA;AAAA;;AAgBA;AACA;AACA;AAFA,IAGMkqC,2BAA2B;EAAjC,MAAMA,2BAA2B,SAASzH,oBAAoB,CAAC;IAC3DljC,WAAWA,CAAA,EAAG;MACV,KAAK,CAAC,CAAC;IACX;IACAylC,yCAAyCA,CAACxkB,IAAI,EAAE;MAC5C,OAAQ,IAAI,CAACuU,aAAa,CAAC,CAAC,CAACpG,aAAa,CAAC1oB,qBAAqB,CAAC,CAAC,CAACua,IAAI,CAAC,GACpE,IAAI,CAACie,mBAAmB,CAACje,IAAI,CAAC;IACtC;IACA,OAAOhhB,IAAI,YAAA2qC,oCAAAzqC,iBAAA;MAAA,YAAAA,iBAAA,IAAwFwqC,2BAA2B;IAAA;IAC9H,OAAOjb,IAAI,kBAtpC8EpxB,+DAAE;MAAA4H,IAAA,EAspCJykC,2BAA2B;MAAA7e,SAAA;MAAAC,SAAA;MAAA8D,QAAA,GAtpCzBvxB,gEAAE,CAspCsJ,CAAC;QAAEyxB,OAAO,EAAEkT,kBAAkB;QAAEjT,WAAW,EAAE2a;MAA4B,CAAC,CAAC,GAtpCnOrsC,wEAAE;IAAA;EAupC/F;EAAC,OAVKqsC,2BAA2B;AAAA;AAWjC;EAAA,QAAAlqC,SAAA,oBAAAA,SAAA;AAAA;;AAWA;AACA;AACA;AAFA,IAGMoqC,0BAA0B;EAAhC,MAAMA,0BAA0B,SAAS3H,oBAAoB,CAAC;IAC1DljC,WAAWA,CAAA,EAAG;MACV,KAAK,CAAC,CAAC;MACP,MAAMf,QAAQ,GAAGV,qDAAM,CAACqC,mDAAQ,CAAC;MACjC,IAAI,CAAC2gC,UAAU,GAAG,IAAI7+B,qDAAU,CAACzD,QAAQ,CAAC8C,eAAe,CAAC;MAC1D,IAAI,CAAC2/B,cAAc,GAAGziC,QAAQ;IAClC;IACAwmC,yCAAyCA,CAACxkB,IAAI,EAAE;MAC5C,OAAO,IAAI,CAACuU,aAAa,CAAC,CAAC,CAACpG,aAAa,CAAC1oB,qBAAqB,CAAC,CAAC,CAACua,IAAI,CAAC;IAC3E;IACA,OAAOhhB,IAAI,YAAA6qC,mCAAA3qC,iBAAA;MAAA,YAAAA,iBAAA,IAAwF0qC,0BAA0B;IAAA;IAC7H,OAAOnb,IAAI,kBAjrC8EpxB,+DAAE;MAAA4H,IAAA,EAirCJ2kC,0BAA0B;MAAA/e,SAAA;MAAA+D,QAAA,GAjrCxBvxB,gEAAE,CAirC8G,CAAC;QAAEyxB,OAAO,EAAEkT,kBAAkB;QAAEjT,WAAW,EAAE6a;MAA2B,CAAC,CAAC,GAjrC1LvsC,wEAAE;IAAA;EAkrC/F;EAAC,OAZKusC,0BAA0B;AAAA;AAahC;EAAA,QAAApqC,SAAA,oBAAAA,SAAA;AAAA;AAMwC,IAElCkE,mBAAmB;EAAzB,MAAMA,mBAAmB,CAAC;IACtB,OAAO1E,IAAI,YAAA8qC,4BAAA5qC,iBAAA;MAAA,YAAAA,iBAAA,IAAwFwE,mBAAmB;IAAA;IACtH,OAAO+xB,IAAI,kBA7rC8Ep4B,8DAAE;MAAA4H,IAAA,EA6rCSvB;IAAmB;IACvH,OAAOiyB,IAAI,kBA9rC8Et4B,8DAAE;EA+rC/F;EAAC,OAJKqG,mBAAmB;AAAA;AAKzB;EAAA,QAAAlE,SAAA,oBAAAA,SAAA;AAAA;AAOA;AACA;AACA;AAFA,IAGMuqC,eAAe;EAArB,MAAMA,eAAe,CAAC;IAClB,OAAO/qC,IAAI,YAAAgrC,wBAAA9qC,iBAAA;MAAA,YAAAA,iBAAA,IAAwF6qC,eAAe;IAAA;IAClH,OAAOtU,IAAI,kBA5sC8Ep4B,8DAAE;MAAA4H,IAAA,EA4sCS8kC;IAAe;IASnH,OAAOpU,IAAI,kBArtC8Et4B,8DAAE;MAAAy4B,OAAA,GAqtCoCmC,iDAAU,EACjIv0B,mBAAmB,EAAEu0B,iDAAU,EAAEv0B,mBAAmB;IAAA;EAChE;EAAC,OAbKqmC,eAAe;AAAA;AAcrB;EAAA,QAAAvqC,SAAA,oBAAAA,SAAA;AAAA;;;;;;;;;;;;;;;;AC55CoC;AAC+E;;AAEnH;AACA,MAAM4qC,eAAe,gBAAG,IAAIpd,OAAO,CAAC,CAAC;AACrC;AACA;AACA;AACA;AAHA,IAIMzpB,sBAAsB;EAA5B,MAAMA,sBAAsB,CAAC;IACzB8mC,OAAO;IACPva,SAAS,GAAGxyB,qDAAM,CAACyE,mDAAQ,CAAC;IAC5BuoC,oBAAoB,GAAGhtC,qDAAM,CAAC2sC,8DAAmB,CAAC;IAClD;AACJ;AACA;AACA;IACI/d,IAAIA,CAACqe,MAAM,EAAE;MACT;MACA,MAAMC,MAAM,GAAI,IAAI,CAACH,OAAO,GAAG,IAAI,CAACA,OAAO,IAAI,IAAI,CAACva,SAAS,CAAC7nB,GAAG,CAACiiC,yDAAc,CAAE;MAClF,IAAI33B,IAAI,GAAG63B,eAAe,CAACniC,GAAG,CAACuiC,MAAM,CAAC;MACtC;MACA,IAAI,CAACj4B,IAAI,EAAE;QACPA,IAAI,GAAG;UAAEk4B,OAAO,EAAE,IAAI7+B,GAAG,CAAC,CAAC;UAAE8+B,IAAI,EAAE;QAAG,CAAC;QACvCN,eAAe,CAACrpC,GAAG,CAACypC,MAAM,EAAEj4B,IAAI,CAAC;QACjC;QACAi4B,MAAM,CAACG,SAAS,CAAC,MAAM;UACnBP,eAAe,CAACniC,GAAG,CAACuiC,MAAM,CAAC,EAAEE,IAAI,CAAC/iC,OAAO,CAAC2mB,GAAG,IAAIA,GAAG,CAACzhB,OAAO,CAAC,CAAC,CAAC;UAC/Du9B,eAAe,CAACn1B,MAAM,CAACu1B,MAAM,CAAC;QAClC,CAAC,CAAC;MACN;MACA;MACA,IAAI,CAACj4B,IAAI,CAACk4B,OAAO,CAAChhC,GAAG,CAAC8gC,MAAM,CAAC,EAAE;QAC3Bh4B,IAAI,CAACk4B,OAAO,CAACt9B,GAAG,CAACo9B,MAAM,CAAC;QACxBh4B,IAAI,CAACm4B,IAAI,CAAC7nB,IAAI,CAACsnB,8DAAe,CAACI,MAAM,EAAE;UAAEK,mBAAmB,EAAE,IAAI,CAACN;QAAqB,CAAC,CAAC,CAAC;MAC/F;IACJ;IACA,OAAOtrC,IAAI,YAAA6rC,+BAAA3rC,iBAAA;MAAA,YAAAA,iBAAA,IAAwFqE,sBAAsB;IAAA;IACzH,OAAOpE,KAAK,kBAD6E9B,gEAAE;MAAAgC,KAAA,EACYkE,sBAAsB;MAAAjE,OAAA,EAAtBiE,sBAAsB,CAAAvE,IAAA;MAAAO,UAAA,EAAc;IAAM;EACrJ;EAAC,OA9BKgE,sBAAsB;AAAA;AA+B5B;EAAA,QAAA/D,SAAA,oBAAAA,SAAA;AAAA;;;;;;;;;;;;;;;;;;ACxC2C;AAE3C,SAASwD,oBAAoBA,CAAC9F,KAAK,EAAE4tC,aAAa,GAAG,CAAC,EAAE;EACpD,IAAIC,cAAc,CAAC7tC,KAAK,CAAC,EAAE;IACvB,OAAO2nC,MAAM,CAAC3nC,KAAK,CAAC;EACxB;EACA,OAAO8tC,SAAS,CAACzmC,MAAM,KAAK,CAAC,GAAGumC,aAAa,GAAG,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAAC7tC,KAAK,EAAE;EAC3B;EACA;EACA;EACA,OAAO,CAAC+tC,KAAK,CAACrgC,UAAU,CAAC1N,KAAK,CAAC,CAAC,IAAI,CAAC+tC,KAAK,CAACpG,MAAM,CAAC3nC,KAAK,CAAC,CAAC;AAC7D;;AAEA;AACA;AACA;AACA;AACA,SAAS4F,aAAaA,CAACooC,YAAY,EAAE;EACjC,OAAOA,YAAY,YAAYzpC,qDAAU,GAAGypC,YAAY,CAAC/c,aAAa,GAAG+c,YAAY;AACzF;;;;;;;;;;;;;;;ACzBA,SAASpnC,WAAWA,CAAC5G,KAAK,EAAE;EACxB,OAAOiR,KAAK,CAACC,OAAO,CAAClR,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;AACjD","sources":["./node_modules/@angular/cdk/fesm2022/fake-event-detection-DWOdFTFz.mjs","./node_modules/@angular/cdk/fesm2022/data-source-D34wiQZj.mjs","./node_modules/@angular/cdk/fesm2022/platform-DNDzkVcI.mjs","./node_modules/@angular/cdk/fesm2022/directionality-CChdj3az.mjs","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/@angular/cdk/fesm2022/id-generator-LuoRZSid.mjs","./node_modules/@angular/cdk/fesm2022/scrolling-BkvA05C8.mjs","./node_modules/@angular/cdk/fesm2022/bidi.mjs","./node_modules/@angular/cdk/fesm2022/shadow-dom-B0oHn41l.mjs","./node_modules/@angular/cdk/fesm2022/recycle-view-repeater-strategy-SfuyU210.mjs","./node_modules/@angular/cdk/fesm2022/scrolling.mjs","./node_modules/@angular/cdk/fesm2022/style-loader-B2sGQXxD.mjs","./node_modules/@angular/cdk/fesm2022/element-x4z00URv.mjs","./node_modules/@angular/cdk/fesm2022/array-I1yfCXUO.mjs"],"sourcesContent":["/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n    // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n    // a clickable element. We can distinguish these events when `event.buttons` is zero, or\n    // `event.detail` is zero depending on the browser:\n    // - `event.buttons` works on Firefox, but fails on Chrome.\n    // - `detail` works on Chrome, but fails on Firefox.\n    return event.buttons === 0 || event.detail === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n    const touch = (event.touches && event.touches[0]) || (event.changedTouches && event.changedTouches[0]);\n    // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n    // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n    // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n    // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n    return (!!touch &&\n        touch.identifier === -1 &&\n        (touch.radiusX == null || touch.radiusX === 1) &&\n        (touch.radiusY == null || touch.radiusY === 1));\n}\n\nexport { isFakeTouchstartFromScreenReader as a, isFakeMousedownFromScreenReader as i };\n","import { ConnectableObservable } from 'rxjs';\n\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n    // here, because of some internal apps.\n    return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\nexport { DataSource as D, isDataSource as i };\n","import * as i0 from '@angular/core';\nimport { inject, PLATFORM_ID, Injectable } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n}\ncatch {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nclass Platform {\n    _platformId = inject(PLATFORM_ID);\n    // We want to use the Angular platform check because if the Document is shimmed\n    // without the navigator, the following checks will fail. This is preferred because\n    // sometimes the Document may be shimmed without the user's knowledge or intention\n    /** Whether the Angular application is being rendered in the browser. */\n    isBrowser = this._platformId\n        ? isPlatformBrowser(this._platformId)\n        : typeof document === 'object' && !!document;\n    /** Whether the current browser is Microsoft Edge. */\n    EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n    /** Whether the current rendering engine is Microsoft Trident. */\n    TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n    // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n    /** Whether the current rendering engine is Blink. */\n    BLINK = this.isBrowser &&\n        !!(window.chrome || hasV8BreakIterator) &&\n        typeof CSS !== 'undefined' &&\n        !this.EDGE &&\n        !this.TRIDENT;\n    // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n    // ensure that Webkit runs standalone and is not used as another engine's base.\n    /** Whether the current rendering engine is WebKit. */\n    WEBKIT = this.isBrowser &&\n        /AppleWebKit/i.test(navigator.userAgent) &&\n        !this.BLINK &&\n        !this.EDGE &&\n        !this.TRIDENT;\n    /** Whether the current platform is Apple iOS. */\n    IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n    // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n    // them self as Gecko-like browsers and modify the userAgent's according to that.\n    // Since we only cover one explicit Firefox case, we can simply check for Firefox\n    // instead of having an unstable check for Gecko.\n    /** Whether the current browser is Firefox. */\n    FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n    /** Whether the current platform is Android. */\n    // Trident on mobile adds the android platform to the userAgent to trick detections.\n    ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n    // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n    // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n    // Safari browser should also use Webkit as its layout engine.\n    /** Whether the current browser is Safari. */\n    SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Platform, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Platform, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Platform, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\nexport { Platform as P };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, DOCUMENT, signal, EventEmitter, Injectable } from '@angular/core';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n/** Resolves a string value to a specific direction. */\nfunction _resolveDirectionality(rawValue) {\n    const value = rawValue?.toLowerCase() || '';\n    if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n        return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n    }\n    return value === 'rtl' ? 'rtl' : 'ltr';\n}\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    /** The current 'ltr' or 'rtl' value. */\n    get value() {\n        return this.valueSignal();\n    }\n    /**\n     * The current 'ltr' or 'rtl' value.\n     */\n    valueSignal = signal('ltr');\n    /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n    change = new EventEmitter();\n    constructor() {\n        const _document = inject(DIR_DOCUMENT, { optional: true });\n        if (_document) {\n            const bodyDir = _document.body ? _document.body.dir : null;\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            this.valueSignal.set(_resolveDirectionality(bodyDir || htmlDir || 'ltr'));\n        }\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Directionality, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Directionality, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Directionality, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\nexport { Directionality as D, _resolveDirectionality as _, DIR_DOCUMENT as a };\n","import * as i0 from '@angular/core';\nimport { signal, Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, DOCUMENT, RendererFactory2, Injectable, InjectionToken, ElementRef, booleanAttribute, Directive, Input, ViewContainerRef, ChangeDetectorRef, EventEmitter, Injector, afterNextRender, numberAttribute, Output, TemplateRef, NgModule } from '@angular/core';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { _ as _getEventTarget, a as _getShadowRoot } from './shadow-dom-B0oHn41l.mjs';\nimport { a as isFakeTouchstartFromScreenReader, i as isFakeMousedownFromScreenReader } from './fake-event-detection-DWOdFTFz.mjs';\nimport { a as coerceElement, c as coerceNumberProperty } from './element-x4z00URv.mjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport { _ as _CdkPrivateStyleLoader } from './style-loader-B2sGQXxD.mjs';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from './scrolling.mjs';\nexport { CdkScrollable as ɵɵCdkScrollable } from './scrolling.mjs';\nimport { D as Directionality } from './directionality-CChdj3az.mjs';\nimport { _ as _IdGenerator } from './id-generator-LuoRZSid.mjs';\nimport { c as coerceArray } from './array-I1yfCXUO.mjs';\nimport './platform-DNDzkVcI.mjs';\nimport '@angular/common';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\nimport './recycle-view-repeater-strategy-SfuyU210.mjs';\nimport './data-source-D34wiQZj.mjs';\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Checks if the child element is overflowing from its parent.\n * @param parentRect - The bounding rect of the parent element.\n * @param childRect - The bounding rect of the child element.\n */\nfunction isOverflowingParent(parentRect, childRect) {\n    // check for horizontal overflow (left and right)\n    const isLeftOverflowing = childRect.left < parentRect.left;\n    const isRightOverflowing = childRect.left + childRect.width > parentRect.right;\n    // check for vertical overflow (top and bottom)\n    const isTopOverflowing = childRect.top < parentRect.top;\n    const isBottomOverflowing = childRect.top + childRect.height > parentRect.bottom;\n    return isLeftOverflowing || isRightOverflowing || isTopOverflowing || isBottomOverflowing;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    _document;\n    /** Cached positions of the scrollable parent elements. */\n    positions = new Map();\n    constructor(_document) {\n        this._document = _document;\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    _document;\n    _rootElement;\n    _direction;\n    _initialDomRect;\n    _previewTemplate;\n    _previewClass;\n    _pickupPositionOnPage;\n    _initialTransform;\n    _zIndex;\n    _renderer;\n    /** Reference to the view of the preview element. */\n    _previewEmbeddedView;\n    /** Reference to the preview element. */\n    _preview;\n    get element() {\n        return this._preview;\n    }\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex, _renderer) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n        this._renderer = _renderer;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if (supportsPopover(this._preview)) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        return this._renderer.listen(this._preview, name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n            // value for `margin-right` needs to be `auto` when opened as a popover, because our\n            // positioning is always top/left based, but native popover seems to position itself\n            // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n            // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n            'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element) {\n    return 'showPopover' in element;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = { passive: true };\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = { passive: false };\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = {\n    passive: false,\n    capture: true,\n};\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Class applied to the drag placeholder. */\nconst PLACEHOLDER_CLASS = 'cdk-drag-placeholder';\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    _config;\n    _document;\n    _ngZone;\n    _viewportRuler;\n    _dragDropRegistry;\n    _renderer;\n    _rootElementCleanups;\n    _cleanupShadowRootSelectStart;\n    /** Element displayed next to the user's pointer while the element is dragged. */\n    _preview;\n    /** Container into which to insert the preview. */\n    _previewContainer;\n    /** Reference to the view of the placeholder element. */\n    _placeholderRef;\n    /** Element that is rendered instead of the draggable item while it is being sorted. */\n    _placeholder;\n    /** Coordinates within the element at which the user picked up the element. */\n    _pickupPositionInElement;\n    /** Coordinates on the page at which the user picked up the element. */\n    _pickupPositionOnPage;\n    /**\n     * Marker node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     */\n    _marker;\n    /**\n     * Element indicating the position from which the item was picked up initially.\n     */\n    _anchor = null;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n    _passiveTransform = { x: 0, y: 0 };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n    _activeTransform = { x: 0, y: 0 };\n    /** Inline `transform` value that the element had before the first dragging sequence. */\n    _initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n    _hasStartedDragging = signal(false);\n    /** Whether the element has moved since the user started dragging it. */\n    _hasMoved;\n    /** Drop container in which the DragRef resided when dragging began. */\n    _initialContainer;\n    /** Index at which the item started in its initial container. */\n    _initialIndex;\n    /** Cached positions of scrollable parent elements. */\n    _parentPositions;\n    /** Emits when the item is being moved. */\n    _moveEvents = new Subject();\n    /** Keeps track of the direction in which the user is dragging along each axis. */\n    _pointerDirectionDelta;\n    /** Pointer position at which the last change in the delta occurred. */\n    _pointerPositionAtLastDirectionChange;\n    /** Position of the pointer at the last pointer event. */\n    _lastKnownPointerPosition;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     */\n    _rootElement;\n    /**\n     * Nearest ancestor SVG, relative to which coordinates are calculated if dragging SVGElement\n     */\n    _ownerSVGElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     */\n    _rootElementTapHighlight;\n    /** Subscription to pointer movement events. */\n    _pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n    _pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n    _scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n    _resizeSubscription = Subscription.EMPTY;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     */\n    _lastTouchEventTime;\n    /** Time at which the last dragging sequence was started. */\n    _dragStartTime;\n    /** Cached reference to the boundary element. */\n    _boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n    _nativeInteractionsEnabled = true;\n    /** Client rect of the root element when the dragging sequence has started. */\n    _initialDomRect;\n    /** Cached dimensions of the preview element. Should be read via `_getPreviewRect`. */\n    _previewRect;\n    /** Cached dimensions of the boundary element. */\n    _boundaryRect;\n    /** Element that will be used as a template to create the draggable item's preview. */\n    _previewTemplate;\n    /** Template for placeholder element rendered to show where a draggable would be dropped. */\n    _placeholderTemplate;\n    /** Elements that can be used to drag the draggable item. */\n    _handles = [];\n    /** Registered handles that are currently disabled. */\n    _disabledHandles = new Set();\n    /** Droppable container that the draggable is a part of. */\n    _dropContainer;\n    /** Layout direction of the item. */\n    _direction = 'ltr';\n    /** Ref that the current drag item is nested in. */\n    _parentDragRef;\n    /**\n     * Cached shadow root that the element is placed in. `null` means that the element isn't in\n     * the shadow DOM and `undefined` means that it hasn't been resolved yet. Should be read via\n     * `_getShadowRoot`, not directly.\n     */\n    _cachedShadowRoot;\n    /** Axis along which dragging is locked. */\n    lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay = 0;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    _disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n    beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n    started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = this._moveEvents;\n    /** Arbitrary data that can be attached to the drag item. */\n    data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry, _renderer) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        this._renderer = _renderer;\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            this._removeRootElementListeners();\n            const renderer = this._renderer;\n            this._rootElementCleanups = this._ngZone.runOutsideAngular(() => [\n                renderer.listen(element, 'mousedown', this._pointerDown, activeEventListenerOptions),\n                renderer.listen(element, 'touchstart', this._pointerDown, passiveEventListenerOptions),\n                renderer.listen(element, 'dragstart', this._nativeDragStart, activeEventListenerOptions),\n            ]);\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners();\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._marker?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._marker =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /** Resets drag item to end of boundary element. */\n    resetToBoundary() {\n        if (\n        // can be null if the drag item was never dragged.\n        this._boundaryElement &&\n            this._rootElement &&\n            // check if we are overflowing off our boundary element\n            isOverflowingParent(this._boundaryElement.getBoundingClientRect(), this._rootElement.getBoundingClientRect())) {\n            const parentRect = this._boundaryElement.getBoundingClientRect();\n            const childRect = this._rootElement.getBoundingClientRect();\n            let offsetX = 0;\n            let offsetY = 0;\n            // check if we are overflowing from left or right\n            if (childRect.left < parentRect.left) {\n                offsetX = parentRect.left - childRect.left;\n            }\n            else if (childRect.right > parentRect.right) {\n                offsetX = parentRect.right - childRect.right;\n            }\n            // check if we are overflowing from top or bottom\n            if (childRect.top < parentRect.top) {\n                offsetY = parentRect.top - childRect.top;\n            }\n            else if (childRect.bottom > parentRect.bottom) {\n                offsetY = parentRect.bottom - childRect.bottom;\n            }\n            const currentLeft = this._activeTransform.x;\n            const currentTop = this._activeTransform.y;\n            let x = currentLeft + offsetX, y = currentTop + offsetY;\n            this._rootElement.style.transform = getTransform(x, y);\n            this._activeTransform = { x, y };\n            this._passiveTransform = { x, y };\n        }\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._cleanupShadowRootSelectStart?.();\n        this._cleanupShadowRootSelectStart = undefined;\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._anchor?.remove();\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._anchor = this._placeholderRef = null;\n    }\n    /** Handler for the `mousedown`/`touchstart` events. */\n    _pointerDown = (event) => {\n        this.beforeStarted.next();\n        // Delegate the event based on whether it started from a handle or the element itself.\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                this._initializeDragSequence(targetHandle, event);\n            }\n        }\n        else if (!this.disabled) {\n            this._initializeDragSequence(this._rootElement, event);\n        }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n    _pointerMove = (event) => {\n        const pointerPosition = this._getPointerPositionOnPage(event);\n        if (!this._hasStartedDragging()) {\n            const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n            const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n            const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n            // Only start dragging after the user has moved more than the minimum distance in either\n            // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n            // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n            // per pixel of movement (e.g. if the user moves their pointer quickly).\n            if (isOverThreshold) {\n                const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                const container = this._dropContainer;\n                if (!isDelayElapsed) {\n                    this._endDragSequence(event);\n                    return;\n                }\n                // Prevent other drag sequences from starting while something in the container is still\n                // being dragged. This can happen while we're waiting for the drop animation to finish\n                // and can cause errors, because some elements might still be moving around.\n                if (!container || (!container.isDragging() && !container.isReceiving())) {\n                    // Prevent the default action as soon as the dragging sequence is considered as\n                    // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                    if (event.cancelable) {\n                        event.preventDefault();\n                    }\n                    this._hasStartedDragging.set(true);\n                    this._ngZone.run(() => this._startDragSequence(event));\n                }\n            }\n            return;\n        }\n        // We prevent the default action down here so that we know that dragging has started. This is\n        // important for touch devices where doing this too early can unnecessarily block scrolling,\n        // if there's a dragging delay.\n        if (event.cancelable) {\n            event.preventDefault();\n        }\n        const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n        this._hasMoved = true;\n        this._lastKnownPointerPosition = pointerPosition;\n        this._updatePointerDirectionDelta(constrainedPointerPosition);\n        if (this._dropContainer) {\n            this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n        }\n        else {\n            // If there's a position constraint function, we want the element's top/left to be at the\n            // specific position on the page. Use the initial position as a reference if that's the case.\n            const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n            const activeTransform = this._activeTransform;\n            activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n            activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n            this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n        }\n        // Since this event gets fired for every pixel while dragging, we only\n        // want to fire it if the consumer opted into it. Also we have to\n        // re-enter the zone because we run all of the events on the outside.\n        if (this._moveEvents.observers.length) {\n            this._ngZone.run(() => {\n                this._moveEvents.next({\n                    source: this,\n                    pointerPosition: constrainedPointerPosition,\n                    event,\n                    distance: this._getDragDistance(constrainedPointerPosition),\n                    delta: this._pointerDirectionDelta,\n                });\n            });\n        }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n    _pointerUp = (event) => {\n        this._endDragSequence(event);\n    };\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging()) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                this._cleanupShadowRootSelectStart = this._renderer.listen(shadowRoot, 'selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const marker = (this._marker =\n                this._marker ||\n                    this._document.createComment(typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-marker' : ''));\n            // Insert a marker node so that we can restore the element's position in the DOM.\n            parent.insertBefore(marker, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000, this._renderer);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasMoved = false;\n        this._hasStartedDragging.set(this._hasMoved);\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._marker.parentNode.replaceChild(this._rootElement, this._marker);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                const exitIndex = this._dropContainer.getItemIndex(this);\n                const nextItemElement = this._dropContainer.getItemAtIndex(exitIndex + 1)?.getVisibleElement() || null;\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                this._conditionallyInsertAnchor(newContainer, this._dropContainer, nextItemElement);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, \n                // If we're re-entering the initial container and sorting is disabled,\n                // put item the into its starting index to begin with.\n                newContainer === this._initialContainer && newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = (event) => {\n                    if (!event ||\n                        (this._preview &&\n                            _getEventTarget(event) === this._preview.element &&\n                            event.propertyName === 'transform')) {\n                        cleanupListener();\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                };\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                const cleanupListener = this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add(PLACEHOLDER_CLASS);\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners() {\n        this._rootElementCleanups?.forEach(cleanup => cleanup());\n        this._rootElementCleanups = undefined;\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const scale = 1 / this.scale;\n        const transform = getTransform(x * scale, y * scale);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Handles a native `dragstart` event. */\n    _nativeDragStart = (event) => {\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                event.preventDefault();\n            }\n        }\n        else if (!this.disabled) {\n            // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n            // but some cases like dragging of links can slip through (see #24403).\n            event.preventDefault();\n        }\n    };\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n    /** Inserts the anchor element, if it's valid. */\n    _conditionallyInsertAnchor(newContainer, exitContainer, nextItemElement) {\n        // Remove the anchor when returning to the initial container.\n        if (newContainer === this._initialContainer) {\n            this._anchor?.remove();\n            this._anchor = null;\n        }\n        else if (exitContainer === this._initialContainer && exitContainer.hasAnchor) {\n            // Insert the anchor when leaving the initial container.\n            const anchor = (this._anchor ??= deepCloneNode(this._placeholder));\n            anchor.classList.remove(PLACEHOLDER_CLASS);\n            anchor.classList.add('cdk-drag-anchor');\n            // Clear the transform since the single-axis strategy uses transforms to sort the items.\n            anchor.style.transform = '';\n            // When the item leaves the initial container, the container's DOM will be restored to\n            // its original state, except for the dragged item which is removed. Insert the anchor in\n            // the position from which the item left so that the list looks consistent.\n            if (nextItemElement) {\n                nextItemElement.before(anchor);\n            }\n            else {\n                coerceElement(exitContainer.element).appendChild(anchor);\n            }\n        }\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Cache of the dimensions of all the items inside the container. */\n    _itemPositions = [];\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeDraggables;\n    /** Direction in which the list is oriented. */\n    orientation = 'vertical';\n    /** Layout direction of the drop list. */\n    direction;\n    constructor(_dragDropRegistry) {\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        delta: 0,\n        overlaps: false,\n    };\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${transformAmount}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${transformAmount}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this._element.appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables?.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        return this._getVisualItemPositions().findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Gets the item at a specific index. */\n    getItemAtIndex(index) {\n        return this._getVisualItemPositions()[index]?.drag || null;\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        this._element = container;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    _getVisualItemPositions() {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        return this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nclass MixedSortStrategy {\n    _document;\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Lazily-resolved root node containing the list. Use `_getRootNode` to read this. */\n    _rootNode;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeItems;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        deltaX: 0,\n        deltaY: 0,\n        overlaps: false,\n    };\n    /**\n     * Keeps track of the relationship between a node and its next sibling. This information\n     * is used to restore the DOM to the order it was in before dragging started.\n     */\n    _relatedNodes = [];\n    constructor(_document, _dragDropRegistry) {\n        this._document = _document;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        const childNodes = this._element.childNodes;\n        this._relatedNodes = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const node = childNodes[i];\n            this._relatedNodes.push([node, node.nextSibling]);\n        }\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        const previousSwap = this._previousSwap;\n        if (newIndex === -1 || this._activeItems[newIndex] === item) {\n            return null;\n        }\n        const toSwapWith = this._activeItems[newIndex];\n        // Prevent too many swaps over the same item.\n        if (previousSwap.drag === toSwapWith &&\n            previousSwap.overlaps &&\n            previousSwap.deltaX === pointerDelta.x &&\n            previousSwap.deltaY === pointerDelta.y) {\n            return null;\n        }\n        const previousIndex = this.getItemIndex(item);\n        const current = item.getPlaceholderElement();\n        const overlapElement = toSwapWith.getRootElement();\n        if (newIndex > previousIndex) {\n            overlapElement.after(current);\n        }\n        else {\n            overlapElement.before(current);\n        }\n        moveItemInArray(this._activeItems, previousIndex, newIndex);\n        const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n        // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n        // break this functionality, because the same object is passed for all `sort` calls.\n        previousSwap.deltaX = pointerDelta.x;\n        previousSwap.deltaY = pointerDelta.y;\n        previousSwap.drag = toSwapWith;\n        previousSwap.overlaps =\n            overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n        return {\n            previousIndex,\n            currentIndex: newIndex,\n        };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        let enterIndex = index == null || index < 0\n            ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        // In some cases (e.g. when the container has padding) we might not be able to figure\n        // out which item to insert the dragged item next to, because the pointer didn't overlap\n        // with anything. In that case we find the item that's closest to the pointer.\n        if (enterIndex === -1) {\n            enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n        }\n        const targetItem = this._activeItems[enterIndex];\n        const currentIndex = this._activeItems.indexOf(item);\n        if (currentIndex > -1) {\n            this._activeItems.splice(currentIndex, 1);\n        }\n        if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n            this._activeItems.splice(enterIndex, 0, item);\n            targetItem.getRootElement().before(item.getPlaceholderElement());\n        }\n        else {\n            this._activeItems.push(item);\n            this._element.appendChild(item.getPlaceholderElement());\n        }\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeItems = items.slice();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        const root = this._element;\n        const previousSwap = this._previousSwap;\n        // Moving elements around in the DOM can break things like the `@for` loop, because it\n        // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n        // the DOM nodes in the list to their original order when the list is reset.\n        // Note that this could be simpler if we just saved all the nodes, cleared the root\n        // and then appended them in the original order. We don't do it, because it can break\n        // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n        // placeholder element which is removed after dragging.\n        for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n            const [node, nextSibling] = this._relatedNodes[i];\n            if (node.parentNode === root && node.nextSibling !== nextSibling) {\n                if (nextSibling === null) {\n                    root.appendChild(node);\n                }\n                else if (nextSibling.parentNode === root) {\n                    root.insertBefore(node, nextSibling);\n                }\n            }\n        }\n        this._relatedNodes = [];\n        this._activeItems = [];\n        previousSwap.drag = null;\n        previousSwap.deltaX = previousSwap.deltaY = 0;\n        previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeItems;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        return this._activeItems.indexOf(item);\n    }\n    /** Gets the item at a specific index. */\n    getItemAtIndex(index) {\n        return this._activeItems[index] || null;\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll() {\n        this._activeItems.forEach(item => {\n            if (this._dragDropRegistry.isDragging(item)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                item._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        if (container !== this._element) {\n            this._element = container;\n            this._rootNode = undefined;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY) {\n        const elementAtPoint = this._getRootNode().elementFromPoint(Math.floor(pointerX), Math.floor(pointerY));\n        const index = elementAtPoint\n            ? this._activeItems.findIndex(item => {\n                const root = item.getRootElement();\n                return elementAtPoint === root || root.contains(elementAtPoint);\n            })\n            : -1;\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n    /** Lazily resolves the list's root node. */\n    _getRootNode() {\n        // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n        if (!this._rootNode) {\n            this._rootNode = _getShadowRoot(this._element) || this._document;\n        }\n        return this._rootNode;\n    }\n    /**\n     * Finds the index of the item that's closest to the item being dragged.\n     * @param item Item being dragged.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _getClosestItemIndexToPointer(item, pointerX, pointerY) {\n        if (this._activeItems.length === 0) {\n            return -1;\n        }\n        if (this._activeItems.length === 1) {\n            return 0;\n        }\n        let minDistance = Infinity;\n        let minIndex = -1;\n        // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n        // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n        // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n        // for our purposes.\n        for (let i = 0; i < this._activeItems.length; i++) {\n            const current = this._activeItems[i];\n            if (current !== item) {\n                const { x, y } = current.getRootElement().getBoundingClientRect();\n                const distance = Math.hypot(pointerX - x, pointerY - y);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minIndex = i;\n                }\n            }\n        }\n        return minIndex;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    _dragDropRegistry;\n    _ngZone;\n    _viewportRuler;\n    /** Element that the drop list is attached to. */\n    element;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    disabled = false;\n    /** Whether sorting items within the list is disabled. */\n    sortingDisabled = false;\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n    autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep = 2;\n    /**\n     * Whether the items in the list should leave an anchor node when leaving the initial container.\n     */\n    hasAnchor = false;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Function that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n    beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n    dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new Subject();\n    /** Emits when a dragging sequence is started in a list connected to the current one. */\n    receivingStarted = new Subject();\n    /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n    receivingStopped = new Subject();\n    /** Arbitrary data that can be attached to the drop list. */\n    data;\n    /** Element that is the direct parent of the drag items. */\n    _container;\n    /** Whether an item in the list is being dragged. */\n    _isDragging = false;\n    /** Keeps track of the positions of any parent scrollable elements. */\n    _parentPositions;\n    /** Strategy being used to sort items within the list. */\n    _sortStrategy;\n    /** Cached `DOMRect` of the drop list. */\n    _domRect;\n    /** Draggable items in the container. */\n    _draggables = [];\n    /** Drop lists that are connected to the current one. */\n    _siblings = [];\n    /** Connected siblings that currently have a dragged item. */\n    _activeSiblings = new Set();\n    /** Subscription to the window being scrolled. */\n    _viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n    _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    /** Horizontal direction in which the list is currently scrolling. */\n    _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    /** Node that is being auto-scrolled. */\n    _scrollNode;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n    _stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n    _cachedShadowRoot = null;\n    /** Reference to the document. */\n    _document;\n    /** Elements that can be scrolled while the user is dragging. */\n    _scrollableElements = [];\n    /** Initial value for the element's `scroll-snap-type` style. */\n    _initialScrollSnap;\n    /** Direction of the list's layout. */\n    _direction = 'ltr';\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        const coercedElement = (this.element = coerceElement(element));\n        this._document = _document;\n        this.withOrientation('vertical').withElementContainer(coercedElement);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n            this._sortStrategy.direction = direction;\n        }\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        if (orientation === 'mixed') {\n            this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n        }\n        else {\n            const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n            strategy.direction = this._direction;\n            strategy.orientation = orientation;\n            this._sortStrategy = strategy;\n        }\n        this._sortStrategy.withElementContainer(this._container);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = this._container;\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /**\n     * Configures the drop list so that a different element is used as the container for the\n     * dragged items. This is useful for the cases when one might not have control over the\n     * full DOM that sets up the dragging.\n     * Note that the alternate container needs to be a descendant of the drop list.\n     * @param container New element container to be assigned.\n     */\n    withElementContainer(container) {\n        if (container === this._container) {\n            return this;\n        }\n        const element = coerceElement(this.element);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            container !== element &&\n            !element.contains(container)) {\n            throw new Error('Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.');\n        }\n        const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n        const newContainerIndex = this._scrollableElements.indexOf(container);\n        if (oldContainerIndex > -1) {\n            this._scrollableElements.splice(oldContainerIndex, 1);\n        }\n        if (newContainerIndex > -1) {\n            this._scrollableElements.splice(newContainerIndex, 1);\n        }\n        if (this._sortStrategy) {\n            this._sortStrategy.withElementContainer(container);\n        }\n        this._cachedShadowRoot = null;\n        this._scrollableElements.unshift(container);\n        this._container = container;\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Gets the item at a specific index.\n     * @param index Index at which to retrieve the item.\n     */\n    getItemAtIndex(index) {\n        return this._isDragging\n            ? this._sortStrategy.getItemAtIndex(index)\n            : this._draggables[index] || null;\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = this._container.style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // Prevent the check from running on apps not using an alternate container. Ideally we\n            // would always run it, but introducing it at this stage would be a breaking change.\n            this._container !== coerceElement(this.element)) {\n            for (const drag of this._draggables) {\n                if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n                    throw new Error('Invalid DOM structure for drop list. All items must be placed directly inside of the element container.');\n                }\n            }\n        }\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(this._container).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = this._container.style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /** Starts the interval that'll auto-scroll the element. */\n    _startScrollInterval = () => {\n        this._stopScrolling();\n        interval(0, animationFrameScheduler)\n            .pipe(takeUntil(this._stopScrollTimers))\n            .subscribe(() => {\n            const node = this._scrollNode;\n            const scrollStep = this.autoScrollStep;\n            if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                node.scrollBy(0, -scrollStep);\n            }\n            else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                node.scrollBy(0, scrollStep);\n            }\n            if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                node.scrollBy(-scrollStep, 0);\n            }\n            else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                node.scrollBy(scrollStep, 0);\n            }\n        });\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(this._container);\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind a capturing event. */\nconst capturingEventOptions = {\n    capture: true,\n};\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n    passive: false,\n    capture: true,\n};\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\\n\"] }]\n        }] });\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\nclass DragDropRegistry {\n    _ngZone = inject(NgZone);\n    _document = inject(DOCUMENT);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _cleanupDocumentTouchmove;\n    _scroll = new Subject();\n    /** Registered drop container instances. */\n    _dropInstances = new Set();\n    /** Registered drag item instances. */\n    _dragInstances = new Set();\n    /** Drag item instances that are currently being dragged. */\n    _activeDragInstances = signal([]);\n    /** Keeps track of the event listeners that we've bound to the `document`. */\n    _globalListeners;\n    /**\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\n     * because it'll be called a lot and we don't want to create a new function every time.\n     */\n    _draggingPredicate = (item) => item.isDragging();\n    /**\n     * Map tracking DOM nodes and their corresponding drag directives. Note that this is different\n     * from looking through the `_dragInstances` and getting their root node, because the root node\n     * isn't necessarily the node that the directive is set on.\n     */\n    _domNodesToDirectives = null;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerMove = new Subject();\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerUp = new Subject();\n    constructor() { }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._cleanupDocumentTouchmove?.();\n                this._cleanupDocumentTouchmove = this._renderer.listen(this._document, 'touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._cleanupDocumentTouchmove?.();\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances().indexOf(drag) > -1) {\n            return;\n        }\n        this._styleLoader.load(_ResetsLoader);\n        this._activeDragInstances.update(instances => [...instances, drag]);\n        if (this._activeDragInstances().length === 1) {\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            const isTouchEvent = event.type.startsWith('touch');\n            const endEventHandler = (e) => this.pointerUp.next(e);\n            const toBind = [\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                ['scroll', (e) => this._scroll.next(e), capturingEventOptions],\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                ['selectstart', this._preventDefaultWhileDragging, activeCapturingEventOptions],\n            ];\n            if (isTouchEvent) {\n                toBind.push(['touchend', endEventHandler, capturingEventOptions], ['touchcancel', endEventHandler, capturingEventOptions]);\n            }\n            else {\n                toBind.push(['mouseup', endEventHandler, capturingEventOptions]);\n            }\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                toBind.push([\n                    'mousemove',\n                    (e) => this.pointerMove.next(e),\n                    activeCapturingEventOptions,\n                ]);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners = toBind.map(([name, handler, options]) => this._renderer.listen(this._document, name, handler, options));\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.update(instances => {\n            const index = instances.indexOf(drag);\n            if (index > -1) {\n                instances.splice(index, 1);\n                return [...instances];\n            }\n            return instances;\n        });\n        if (this._activeDragInstances().length === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances().indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this._scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const cleanup = this._renderer.listen(shadowRoot, 'scroll', (event) => {\n                        if (this._activeDragInstances().length) {\n                            observer.next(event);\n                        }\n                    }, capturingEventOptions);\n                    return () => {\n                        cleanup();\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    /**\n     * Tracks the DOM node which has a draggable directive.\n     * @param node Node to track.\n     * @param dragRef Drag directive set on the node.\n     */\n    registerDirectiveNode(node, dragRef) {\n        this._domNodesToDirectives ??= new WeakMap();\n        this._domNodesToDirectives.set(node, dragRef);\n    }\n    /**\n     * Stops tracking a draggable directive node.\n     * @param node Node to stop tracking.\n     */\n    removeDirectiveNode(node) {\n        this._domNodesToDirectives?.delete(node);\n    }\n    /**\n     * Gets the drag directive corresponding to a specific DOM node, if any.\n     * @param node Node for which to do the lookup.\n     */\n    getDragDirectiveForNode(node) {\n        return this._domNodesToDirectives?.get(node) || null;\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._domNodesToDirectives = null;\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * @param event Event whose default action should be prevented.\n     */\n    _preventDefaultWhileDragging = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            event.preventDefault();\n        }\n    };\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n    _persistentTouchmoveListener = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            // Note that we only want to prevent the default action after dragging has actually started.\n            // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n            // but it could be pushed back if the user has set up a drag delay or threshold.\n            if (this._activeDragInstances().some(this._draggingPredicate)) {\n                event.preventDefault();\n            }\n            this.pointerMove.next(event);\n        }\n    };\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners?.forEach(cleanup => cleanup());\n        this._globalListeners = undefined;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    _document = inject(DOCUMENT);\n    _ngZone = inject(NgZone);\n    _viewportRuler = inject(ViewportRuler);\n    _dragDropRegistry = inject(DragDropRegistry);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    constructor() { }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry, this._renderer);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDrop, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDrop, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    element = inject(ElementRef);\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    /** Emits when the state of the handle has changed. */\n    _stateChanges = new Subject();\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    _disabled = false;\n    constructor() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag?._addHandle(this);\n    }\n    ngAfterViewInit() {\n        if (!this._parentDrag) {\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const ref = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (ref) {\n                    this._parentDrag = ref;\n                    ref._addHandle(this);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragHandle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    element = inject(ElementRef);\n    dropContainer = inject(CDK_DROP_LIST, { optional: true, skipSelf: true });\n    _ngZone = inject(NgZone);\n    _viewContainerRef = inject(ViewContainerRef);\n    _dir = inject(Directionality, { optional: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _selfHandle = inject(CDK_DRAG_HANDLE, { optional: true, self: true });\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    _destroyed = new Subject();\n    _handles = new BehaviorSubject([]);\n    _previewTemplate;\n    _placeholderTemplate;\n    /** Reference to the underlying drag instance. */\n    _dragRef;\n    /** Arbitrary data to attach to this drag instance. */\n    data;\n    /** Locks the position of the dragged element along the specified axis. */\n    lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     */\n    rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     */\n    boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     */\n    freeDragPosition;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    _disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * Configures the place into which the preview of the item will be inserted. Can be configured\n     * globally through `CDK_DROP_LIST`. Possible values:\n     * - `global` - Preview will be inserted at the bottom of the `<body>`. The advantage is that\n     * you don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain\n     * its inherited styles.\n     * - `parent` - Preview will be inserted into the parent of the drag item. The advantage is that\n     * inherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be\n     * visible due to `z-index`. Furthermore, the preview is going to have an effect over selectors\n     * like `:nth-child` and some flexbox configurations.\n     * - `ElementRef<HTMLElement> | HTMLElement` - Preview will be inserted into a specific element.\n     * Same advantages and disadvantages as `parent`.\n     */\n    previewContainer;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Emits when the user starts dragging the item. */\n    started = new EventEmitter();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new EventEmitter();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new EventEmitter();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new EventEmitter();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new EventEmitter();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = new Observable((observer) => {\n        const subscription = this._dragRef.moved\n            .pipe(map(movedEvent => ({\n            source: this,\n            pointerPosition: movedEvent.pointerPosition,\n            event: movedEvent.event,\n            delta: movedEvent.delta,\n            distance: movedEvent.distance,\n        })))\n            .subscribe(observer);\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n    _injector = inject(Injector);\n    constructor() {\n        const dropContainer = this.dropContainer;\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        const dragDrop = inject(DragDrop);\n        this._dragRef = dragDrop.createDrag(this.element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        this._dragDropRegistry.registerDirectiveNode(this.element.nativeElement, this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n            // The drop container reads this so we need to sync it here.\n            dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._dragRef.scale = this.scale;\n            });\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /** Resets drag item to end of boundary element. */\n    resetToBoundary() {\n        this._dragRef.resetToBoundary();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // We need to wait until after render, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position, and then they get transferred to the portal.\n        afterNextRender(() => {\n            this._updateRootElement();\n            this._setupHandlesListener();\n            this._dragRef.scale = this.scale;\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }, { injector: this._injector });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in the `afterNextRender` queued up in the constructor.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Scale affects the free drag position so we need to sync it up here.\n        this._dragRef.scale = this.scale;\n        // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n        // constructor.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._dragDropRegistry.removeDirectiveNode(this.element.nativeElement);\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.scale = this.scale;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const parentDrag = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (parentDrag) {\n                    ref.withParent(parentDrag._dragRef);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDrag, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], scale: [\"cdkDragScale\", \"scale\", numberAttribute] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': 'cdk-drag',\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], scale: [{\n                type: Input,\n                args: [{ alias: 'cdkDragScale', transform: numberAttribute }]\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    /** Drop lists registered inside the group. */\n    _items = new Set();\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    disabled = false;\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    element = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _scrollDispatcher = inject(ScrollDispatcher);\n    _dir = inject(Directionality, { optional: true });\n    _group = inject(CDK_DROP_LIST_GROUP, {\n        optional: true,\n        skipSelf: true,\n    });\n    /** Refs that have been synced with the drop ref most recently. */\n    _latestSortedRefs;\n    /** Emits when the list has been destroyed. */\n    _destroyed = new Subject();\n    /** Whether the element's scrollable parents have been resolved. */\n    _scrollableParentsResolved;\n    /** Keeps track of the drop lists that are currently on the page. */\n    static _dropLists = [];\n    /** Reference to the underlying drop list instance. */\n    _dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     */\n    connectedTo = [];\n    /** Arbitrary data to attach to this container. */\n    data;\n    /** Direction in which the list is oriented. */\n    orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     */\n    id = inject(_IdGenerator).getId('cdk-drop-list-');\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    _disabled;\n    /** Whether sorting within this drop list is disabled. */\n    sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n    autoScrollDisabled;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep;\n    /**\n     * Selector that will be used to resolve an alternate element container for the drop list.\n     * Passing an alternate container is useful for the cases where one might not have control\n     * over the parent node of the draggable items within the list (e.g. due to content projection).\n     * This allows for usages like:\n     *\n     * ```\n     * <div cdkDropList cdkDropListElementContainer=\".inner\">\n     *   <div class=\"inner\">\n     *     <div cdkDrag></div>\n     *   </div>\n     * </div>\n     * ```\n     */\n    elementContainerSelector;\n    /**\n     * By default when an item leaves its initial container, its placeholder will be transferred\n     * to the new container. If that's not desirable for your use case, you can enable this option\n     * which will clone the placeholder and leave it inside the original container. If the item is\n     * returned to the initial container, the anchor element will be removed automatically.\n     *\n     * The cloned placeholder can be styled by targeting the `cdk-drag-anchor` class.\n     *\n     * This option is useful in combination with `cdkDropListSortingDisabled` to implement copying\n     * behavior in a drop list.\n     */\n    hasAnchor;\n    /** Emits when the user drops an item inside the container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new EventEmitter();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new EventEmitter();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new EventEmitter();\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     */\n    _unsortedItems = new Set();\n    constructor() {\n        const dragDrop = inject(DragDrop);\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(this.element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (this._group) {\n            this._group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        // Only sync the items while dragging since this method is\n        // called when items are being initialized one-by-one.\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef(this.getSortedItems().map(item => item._dragRef));\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        // This method might be called on destroy so we always want to sync with the ref.\n        // Note that we reuse the last set of synced items, rather than re-sorting the whole\n        // list, because it can slow down re-renders of large lists (see #30737).\n        if (this._latestSortedRefs) {\n            const index = this._latestSortedRefs.indexOf(item._dragRef);\n            if (index > -1) {\n                this._latestSortedRefs.splice(index, 1);\n                this._syncItemsWithRef(this._latestSortedRefs);\n            }\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._latestSortedRefs = undefined;\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            if (this.elementContainerSelector) {\n                const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n                if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throw new Error(`CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`);\n                }\n                ref.withElementContainer(container);\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref.hasAnchor = this.hasAnchor;\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef(this.getSortedItems().map(item => item._dragRef));\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef(items) {\n        this._latestSortedRefs = items;\n        this._dropListRef.withItems(items);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropList, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"], elementContainerSelector: [\"cdkDropListElementContainer\", \"elementContainerSelector\"], hasAnchor: [\"cdkDropListHasAnchor\", \"hasAnchor\", booleanAttribute] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], elementContainerSelector: [{\n                type: Input,\n                args: ['cdkDropListElementContainer']\n            }], hasAnchor: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListHasAnchor', transform: booleanAttribute }]\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the preview template instance. */\n    data;\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    matchSize = false;\n    constructor() {\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPreview, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the placeholder template instance. */\n    data;\n    constructor() {\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import * as i0 from '@angular/core';\nimport { inject, APP_ID, Injectable } from '@angular/core';\n\n/**\n * Keeps track of the ID count per prefix. This helps us make the IDs a bit more deterministic\n * like they were before the service was introduced. Note that ideally we wouldn't have to do\n * this, but there are some internal tests that rely on the IDs.\n */\nconst counters = {};\n/** Service that generates unique IDs for DOM nodes. */\nclass _IdGenerator {\n    _appId = inject(APP_ID);\n    /**\n     * Generates a unique ID with a specific prefix.\n     * @param prefix Prefix to add to the ID.\n     */\n    getId(prefix) {\n        // Omit the app ID if it's the default `ng`. Since the vast majority of pages have one\n        // Angular app on them, we can reduce the amount of breakages by not adding it.\n        if (this._appId !== 'ng') {\n            prefix += this._appId;\n        }\n        if (!counters.hasOwnProperty(prefix)) {\n            counters[prefix] = 0;\n        }\n        return `${prefix}${counters[prefix]++}`;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _IdGenerator, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _IdGenerator, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _IdGenerator, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nexport { _IdGenerator as _ };\n","/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nvar RtlScrollAxisType;\n(function (RtlScrollAxisType) {\n    /**\n     * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n     * all the way right.\n     */\n    RtlScrollAxisType[RtlScrollAxisType[\"NORMAL\"] = 0] = \"NORMAL\";\n    /**\n     * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n     * all the way right.\n     */\n    RtlScrollAxisType[RtlScrollAxisType[\"NEGATED\"] = 1] = \"NEGATED\";\n    /**\n     * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n     * all the way right.\n     */\n    RtlScrollAxisType[RtlScrollAxisType[\"INVERTED\"] = 2] = \"INVERTED\";\n})(RtlScrollAxisType || (RtlScrollAxisType = {}));\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType;\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported;\n/** Check whether the browser supports scroll behaviors. */\nfunction supportsScrollBehavior() {\n    if (scrollBehaviorSupported == null) {\n        // If we're not in the browser, it can't be supported. Also check for `Element`, because\n        // some projects stub out the global `document` during SSR which can throw us off.\n        if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n            scrollBehaviorSupported = false;\n            return scrollBehaviorSupported;\n        }\n        // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n        if ('scrollBehavior' in document.documentElement.style) {\n            scrollBehaviorSupported = true;\n        }\n        else {\n            // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n            // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n            const scrollToFunction = Element.prototype.scrollTo;\n            if (scrollToFunction) {\n                // We can detect if the function has been polyfilled by calling `toString` on it. Native\n                // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n                // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n                // polyfilled functions as supporting scroll behavior.\n                scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n            }\n            else {\n                scrollBehaviorSupported = false;\n            }\n        }\n    }\n    return scrollBehaviorSupported;\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nfunction getRtlScrollAxisType() {\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n    if (typeof document !== 'object' || !document) {\n        return RtlScrollAxisType.NORMAL;\n    }\n    if (rtlScrollAxisType == null) {\n        // Create a 1px wide scrolling container and a 2px wide content element.\n        const scrollContainer = document.createElement('div');\n        const containerStyle = scrollContainer.style;\n        scrollContainer.dir = 'rtl';\n        containerStyle.width = '1px';\n        containerStyle.overflow = 'auto';\n        containerStyle.visibility = 'hidden';\n        containerStyle.pointerEvents = 'none';\n        containerStyle.position = 'absolute';\n        const content = document.createElement('div');\n        const contentStyle = content.style;\n        contentStyle.width = '2px';\n        contentStyle.height = '1px';\n        scrollContainer.appendChild(content);\n        document.body.appendChild(scrollContainer);\n        rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n        // dealing with one of the other two types of browsers.\n        if (scrollContainer.scrollLeft === 0) {\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n            // return 0 when we read it again.\n            scrollContainer.scrollLeft = 1;\n            rtlScrollAxisType =\n                scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n        }\n        scrollContainer.remove();\n    }\n    return rtlScrollAxisType;\n}\n\nexport { RtlScrollAxisType as R, getRtlScrollAxisType as g, supportsScrollBehavior as s };\n","import { _ as _resolveDirectionality, D as Directionality } from './directionality-CChdj3az.mjs';\nexport { a as DIR_DOCUMENT } from './directionality-CChdj3az.mjs';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, signal, Directive, Output, Input, NgModule } from '@angular/core';\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    /** Whether the `value` has been set to its initial value. */\n    _isInitialized = false;\n    /** Direction as passed in by the consumer. */\n    _rawDir;\n    /** Event emitted when the direction changes. */\n    change = new EventEmitter();\n    /** @docs-private */\n    get dir() {\n        return this.valueSignal();\n    }\n    set dir(value) {\n        const previousValue = this.valueSignal();\n        // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n        // whereas the browser does it based on the content of the element. Since doing so based\n        // on the content can be expensive, for now we're doing the simpler matching.\n        this.valueSignal.set(_resolveDirectionality(value));\n        this._rawDir = value;\n        if (previousValue !== this.valueSignal() && this._isInitialized) {\n            this.change.emit(this.valueSignal());\n        }\n    }\n    /** Current layout direction of the element. */\n    get value() {\n        return this.dir;\n    }\n    valueSignal = signal('ltr');\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Dir, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: Dir, isStandalone: true, selector: \"[dir]\", inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, host: { properties: { \"attr.dir\": \"_rawDir\" } }, providers: [{ provide: Directionality, useExisting: Dir }], exportAs: [\"dir\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Dir, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[dir]',\n                    providers: [{ provide: Directionality, useExisting: Dir }],\n                    host: { '[attr.dir]': '_rawDir' },\n                    exportAs: 'dir',\n                }]\n        }], propDecorators: { change: [{\n                type: Output,\n                args: ['dirChange']\n            }], dir: [{\n                type: Input\n            }] } });\n\nclass BidiModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: BidiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: BidiModule, imports: [Dir], exports: [Dir] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: BidiModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: BidiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [Dir],\n                    exports: [Dir],\n                }]\n        }] });\n\nexport { BidiModule, Dir, Directionality };\n","let shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\nfunction _supportsShadowDom() {\n    if (shadowDomIsSupported == null) {\n        const head = typeof document !== 'undefined' ? document.head : null;\n        shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n    }\n    return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nfunction _getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        // Note that this should be caught by `_supportsShadowDom`, but some\n        // teams have been able to hit this code path on unsupported browsers.\n        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nfunction _getFocusedElementPierceShadowDom() {\n    let activeElement = typeof document !== 'undefined' && document\n        ? document.activeElement\n        : null;\n    while (activeElement && activeElement.shadowRoot) {\n        const newActiveElement = activeElement.shadowRoot.activeElement;\n        if (newActiveElement === activeElement) {\n            break;\n        }\n        else {\n            activeElement = newActiveElement;\n        }\n    }\n    return activeElement;\n}\n/** Gets the target of an event while accounting for Shadow DOM. */\nfunction _getEventTarget(event) {\n    // If an event is bound outside the Shadow DOM, the `event.target` will\n    // point to the shadow root so we have to use `composedPath` instead.\n    return (event.composedPath ? event.composedPath()[0] : event.target);\n}\n\nexport { _getEventTarget as _, _getShadowRoot as a, _supportsShadowDom as b, _getFocusedElementPierceShadowDom as c };\n","import { isObservable, of } from 'rxjs';\nimport { D as DataSource } from './data-source-D34wiQZj.mjs';\nimport { InjectionToken } from '@angular/core';\n\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    _data;\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/** Indicates how a view was changed by a `_ViewRepeater`. */\nvar _ViewRepeaterOperation;\n(function (_ViewRepeaterOperation) {\n    /** The content of an existing view was replaced with another item. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"REPLACED\"] = 0] = \"REPLACED\";\n    /** A new view was created with `createEmbeddedView`. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"INSERTED\"] = 1] = \"INSERTED\";\n    /** The position of a view changed, but the content remains the same. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"MOVED\"] = 2] = \"MOVED\";\n    /** A view was detached from the view container. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"REMOVED\"] = 3] = \"REMOVED\";\n})(_ViewRepeaterOperation || (_ViewRepeaterOperation = {}));\n/**\n * Injection token for `_ViewRepeater`. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * A repeater that caches views when they are removed from a\n * `ViewContainerRef`. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    /**\n     * The size of the cache used to store unused views.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n     */\n    viewCacheSize = 20;\n    /**\n     * View cache that stores embedded view instances that have been previously stamped out,\n     * but don't are not currently rendered. The view repeater will reuse these views rather than\n     * creating brand new ones.\n     *\n     * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n     */\n    _viewCache = [];\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n            }\n            else if (currentIndex == null) {\n                // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = _ViewRepeaterOperation.REMOVED;\n            }\n            else {\n                // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = _ViewRepeaterOperation.MOVED;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\nexport { ArrayDataSource as A, _RecycleViewRepeaterStrategy as _, _ViewRepeaterOperation as a, _VIEW_REPEATER_STRATEGY as b };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, inject, NgZone, RendererFactory2, Injectable, ElementRef, Renderer2, DOCUMENT, ChangeDetectorRef, signal, Injector, afterNextRender, booleanAttribute, Optional, Inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, NgModule } from '@angular/core';\nimport { Subject, of, Observable, Subscription, animationFrameScheduler, asapScheduler, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, startWith, takeUntil, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { c as coerceNumberProperty, a as coerceElement } from './element-x4z00URv.mjs';\nimport { P as Platform } from './platform-DNDzkVcI.mjs';\nimport { D as Directionality } from './directionality-CChdj3az.mjs';\nimport { g as getRtlScrollAxisType, R as RtlScrollAxisType, s as supportsScrollBehavior } from './scrolling-BkvA05C8.mjs';\nimport { BidiModule } from './bidi.mjs';\nexport { Dir as ɵɵDir } from './bidi.mjs';\nimport { b as _VIEW_REPEATER_STRATEGY, A as ArrayDataSource, _ as _RecycleViewRepeaterStrategy } from './recycle-view-repeater-strategy-SfuyU210.mjs';\nimport { i as isDataSource } from './data-source-D34wiQZj.mjs';\nimport '@angular/common';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    _scrolledIndexChange = new Subject();\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /** The attached viewport. */\n    _viewport = null;\n    /** The size of the items in the virtually scrolling list. */\n    _itemSize;\n    /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n    _minBufferPx;\n    /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n    _maxBufferPx;\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    _itemSize = 20;\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    _minBufferPx = 100;\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    _maxBufferPx = 200;\n    /** The scroll strategy used by this directive. */\n    _scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkFixedSizeVirtualScroll, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n            {\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n            },\n        ], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    _ngZone = inject(NgZone);\n    _platform = inject(Platform);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _cleanupGlobalListener;\n    constructor() { }\n    /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n    _scrolled = new Subject();\n    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n    _scrolledCount = 0;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n    scrollContainers = new Map();\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._cleanupGlobalListener) {\n                this._cleanupGlobalListener = this._ngZone.runOutsideAngular(() => this._renderer.listen('document', 'scroll', () => this._scrolled.next()));\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._cleanupGlobalListener?.();\n                    this._cleanupGlobalListener = undefined;\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._cleanupGlobalListener?.();\n        this._cleanupGlobalListener = undefined;\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => !target || ancestors.indexOf(target) > -1));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ScrollDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    elementRef = inject(ElementRef);\n    scrollDispatcher = inject(ScrollDispatcher);\n    ngZone = inject(NgZone);\n    dir = inject(Directionality, { optional: true });\n    _scrollElement = this.elementRef.nativeElement;\n    _destroyed = new Subject();\n    _renderer = inject(Renderer2);\n    _cleanupScroll;\n    _elementScrolled = new Subject();\n    constructor() { }\n    ngOnInit() {\n        this._cleanupScroll = this.ngZone.runOutsideAngular(() => this._renderer.listen(this._scrollElement, 'scroll', event => this._elementScrolled.next(event)));\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this._cleanupScroll?.();\n        this._elementScrolled.complete();\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkScrollable, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkScrollable, isStandalone: true, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                }]\n        }], ctorParameters: () => [] });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    _platform = inject(Platform);\n    _listeners;\n    /** Cached viewport dimensions. */\n    _viewportSize;\n    /** Stream of viewport change events. */\n    _change = new Subject();\n    /** Used to reference correct document/window */\n    _document = inject(DOCUMENT);\n    constructor() {\n        const ngZone = inject(NgZone);\n        const renderer = inject(RendererFactory2).createRenderer(null, null);\n        ngZone.runOutsideAngular(() => {\n            if (this._platform.isBrowser) {\n                const changeListener = (event) => this._change.next(event);\n                this._listeners = [\n                    renderer.listen('window', 'resize', changeListener),\n                    renderer.listen('window', 'orientationchange', changeListener),\n                ];\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        this._listeners?.forEach(cleanup => cleanup());\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a DOMRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ViewportRuler, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ViewportRuler, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the `CdkScrollable` to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor() {\n        super();\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkVirtualScrollable, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkVirtualScrollable, isStandalone: true, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [] });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    elementRef = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _scrollStrategy = inject(VIRTUAL_SCROLL_STRATEGY, {\n        optional: true,\n    });\n    scrollable = inject(VIRTUAL_SCROLLABLE, { optional: true });\n    _platform = inject(Platform);\n    /** Emits when the viewport is detached from a CdkVirtualForOf. */\n    _detachedSubject = new Subject();\n    /** Emits when the rendered range changes. */\n    _renderedRangeSubject = new Subject();\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    _orientation = 'vertical';\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    appendOnly = false;\n    // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n    // depending on how the strategy calculates the scrolled index, it may come at a cost to\n    // performance.\n    /** Emits when the index of the first element visible in the viewport changes. */\n    scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n    /** The element that wraps the rendered content. */\n    _contentWrapper;\n    /** A stream that emits whenever the rendered range changes. */\n    renderedRangeStream = this._renderedRangeSubject;\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     */\n    _totalContentSize = 0;\n    /** A string representing the `style.width` property value to be used for the spacer element. */\n    _totalContentWidth = signal('');\n    /** A string representing the `style.height` property value to be used for the spacer element. */\n    _totalContentHeight = signal('');\n    /**\n     * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n     * of the visible viewport.\n     */\n    _renderedContentTransform;\n    /** The currently rendered range of indices. */\n    _renderedRange = { start: 0, end: 0 };\n    /** The length of the data bound to this viewport (in number of items). */\n    _dataLength = 0;\n    /** The size of the viewport (in pixels). */\n    _viewportSize = 0;\n    /** the currently attached CdkVirtualScrollRepeater. */\n    _forOf;\n    /** The last rendered content offset that was set. */\n    _renderedContentOffset = 0;\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     */\n    _renderedContentOffsetNeedsRewrite = false;\n    /** Whether there is a pending change detection cycle. */\n    _isChangeDetectionPending = false;\n    /** A list of functions to run after the next change detection cycle. */\n    _runAfterChangeDetection = [];\n    /** Subscription to changes in the viewport size. */\n    _viewportChanges = Subscription.EMPTY;\n    _injector = inject(Injector);\n    _isDestroyed = false;\n    constructor() {\n        super();\n        const viewportRuler = inject(ViewportRuler);\n        if (!this._scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    ngOnInit() {\n        // Scrolling depends on the element dimensions which we can't get during SSR.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER), \n            // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n            // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n            // to unsubscribe here just in case.\n            takeUntil(this._destroyed))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        this._isDestroyed = true;\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = this.dir?.value == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        if (this._isDestroyed) {\n            return;\n        }\n        this.ngZone.run(() => {\n            // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n            // from the root, since the repeated items are content projected in. Calling `detectChanges`\n            // instead does not properly check the projected content.\n            this._changeDetectorRef.markForCheck();\n            // Apply the content transform. The transform can't be set via an Angular binding because\n            // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n            // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n            // the `Number` function first to coerce it to a numeric value.\n            this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n            afterNextRender(() => {\n                this._isChangeDetectionPending = false;\n                const runAfterChangeDetection = this._runAfterChangeDetection;\n                this._runAfterChangeDetection = [];\n                for (const fn of runAfterChangeDetection) {\n                    fn();\n                }\n            }, { injector: this._injector });\n        });\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight.set(this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`);\n        this._totalContentWidth.set(this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '');\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkVirtualScrollViewport, isStandalone: true, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: [\"appendOnly\", \"appendOnly\", booleanAttribute] }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n            },\n        ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth()\\\" [style.height]=\\\"_totalContentHeight()\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth()\\\" [style.height]=\\\"_totalContentHeight()\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    _viewContainerRef = inject(ViewContainerRef);\n    _template = inject(TemplateRef);\n    _differs = inject(IterableDiffers);\n    _viewRepeater = inject(_VIEW_REPEATER_STRATEGY);\n    _viewport = inject(CdkVirtualScrollViewport, { skipSelf: true });\n    /** Emits when the rendered view of the data changes. */\n    viewChange = new Subject();\n    /** Subject that emits when a new DataSource instance is given. */\n    _dataSourceChanges = new Subject();\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    _cdkVirtualForOf;\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    _cdkVirtualForTrackBy;\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /** Emits whenever the data in the current DataSource changes. */\n    dataStream = this._dataSourceChanges.pipe(\n    // Start off with null `DataSource`.\n    startWith(null), \n    // Bundle up the previous and current data sources so we can work with both.\n    pairwise(), \n    // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n    // Replay the last emitted data when someone subscribes.\n    shareReplay(1));\n    /** The differ used to calculate changes to the data. */\n    _differ = null;\n    /** The most recent data emitted from the DataSource. */\n    _data;\n    /** The currently rendered items. */\n    _renderedItems;\n    /** The currently rendered range of indices. */\n    _renderedRange;\n    /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n    _needsUpdate = false;\n    _destroyed = new Subject();\n    constructor() {\n        const ngZone = inject(NgZone);\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n    static ngTemplateContextGuard(directive, context) {\n        return true;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkVirtualForOf, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkVirtualForOf, isStandalone: true, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor() {\n        super();\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkVirtualScrollableElement, isStandalone: true, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor() {\n        super();\n        const document = inject(DOCUMENT);\n        this.elementRef = new ElementRef(document.documentElement);\n        this._scrollElement = document;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkVirtualScrollableWindow, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                }]\n        }], ctorParameters: () => [] });\n\nclass CdkScrollableModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkScrollableModule, imports: [CdkScrollable], exports: [CdkScrollable] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkScrollableModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    imports: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport,\n            CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollViewport,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule,\n            CdkScrollableModule, BidiModule, CdkScrollableModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkVirtualScrollViewport,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n","import * as i0 from '@angular/core';\nimport { inject, Injector, EnvironmentInjector, ApplicationRef, createComponent, Injectable } from '@angular/core';\n\n/** Apps in which we've loaded styles. */\nconst appsWithLoaders = new WeakMap();\n/**\n * Service that loads structural styles dynamically\n * and ensures that they're only loaded once per app.\n */\nclass _CdkPrivateStyleLoader {\n    _appRef;\n    _injector = inject(Injector);\n    _environmentInjector = inject(EnvironmentInjector);\n    /**\n     * Loads a set of styles.\n     * @param loader Component which will be instantiated to load the styles.\n     */\n    load(loader) {\n        // Resolve the app ref lazily to avoid circular dependency errors if this is called too early.\n        const appRef = (this._appRef = this._appRef || this._injector.get(ApplicationRef));\n        let data = appsWithLoaders.get(appRef);\n        // If we haven't loaded for this app before, we have to initialize it.\n        if (!data) {\n            data = { loaders: new Set(), refs: [] };\n            appsWithLoaders.set(appRef, data);\n            // When the app is destroyed, we need to clean up all the related loaders.\n            appRef.onDestroy(() => {\n                appsWithLoaders.get(appRef)?.refs.forEach(ref => ref.destroy());\n                appsWithLoaders.delete(appRef);\n            });\n        }\n        // If the loader hasn't been loaded before, we need to instatiate it.\n        if (!data.loaders.has(loader)) {\n            data.loaders.add(loader);\n            data.refs.push(createComponent(loader, { environmentInjector: this._environmentInjector }));\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _CdkPrivateStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _CdkPrivateStyleLoader, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _CdkPrivateStyleLoader, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nexport { _CdkPrivateStyleLoader as _ };\n","import { ElementRef } from '@angular/core';\n\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    if (_isNumberValue(value)) {\n        return Number(value);\n    }\n    return arguments.length === 2 ? fallbackValue : 0;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\nexport { _isNumberValue as _, coerceElement as a, coerceNumberProperty as c };\n","function coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\nexport { coerceArray as c };\n"],"names":["isFakeMousedownFromScreenReader","event","buttons","detail","isFakeTouchstartFromScreenReader","touch","touches","changedTouches","identifier","radiusX","radiusY","a","i","ConnectableObservable","DataSource","isDataSource","value","connect","D","i0","inject","PLATFORM_ID","Injectable","isPlatformBrowser","hasV8BreakIterator","Intl","v8BreakIterator","Platform","_platformId","isBrowser","document","EDGE","test","navigator","userAgent","TRIDENT","BLINK","window","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","constructor","ɵfac","Platform_Factory","__ngFactoryType__","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","P","InjectionToken","DOCUMENT","signal","EventEmitter","DIR_DOCUMENT","DIR_DOCUMENT_FACTORY","RTL_LOCALE_PATTERN","_resolveDirectionality","rawValue","toLowerCase","language","Directionality","valueSignal","change","_document","optional","bodyDir","body","dir","htmlDir","documentElement","set","ngOnDestroy","complete","Directionality_Factory","_","Component","ViewEncapsulation","ChangeDetectionStrategy","NgZone","RendererFactory2","ElementRef","booleanAttribute","Directive","Input","ViewContainerRef","ChangeDetectorRef","Injector","afterNextRender","numberAttribute","Output","TemplateRef","NgModule","Subject","Subscription","interval","animationFrameScheduler","Observable","merge","BehaviorSubject","_getEventTarget","_getShadowRoot","coerceElement","c","coerceNumberProperty","takeUntil","map","take","tap","switchMap","startWith","_CdkPrivateStyleLoader","ViewportRuler","ScrollDispatcher","CdkScrollableModule","CdkScrollable","ɵɵCdkScrollable","_IdGenerator","coerceArray","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","source","type","name","context","getContext","drawImage","getMutableClientRect","element","rect","getBoundingClientRect","top","right","bottom","left","width","height","x","y","isInsideClientRect","clientRect","isOverflowingParent","parentRect","childRect","isLeftOverflowing","isRightOverflowing","isTopOverflowing","isBottomOverflowing","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","positions","Map","clear","cache","elements","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","target","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","contains","scrollY","scrollX","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","extendStyles","dest","importantProperties","key","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","enable","userSelect","style","toggleVisibility","opacity","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","getTransform","Math","round","parseCssTimeUnitsToMs","multiplier","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","getPropertyValue","split","part","trim","Set","PreviewRef","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","_renderer","_previewEmbeddedView","_preview","attach","parent","_createPreview","supportsPopover","destroy","remove","setTransform","addClass","className","classList","add","getTransitionDuration","addEventListener","handler","listen","previewConfig","previewClass","previewTemplate","template","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","setAttribute","Array","isArray","passiveEventListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","MOUSE_EVENT_IGNORE_TIME","PLACEHOLDER_CLASS","dragImportantProperties","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_rootElementCleanups","_cleanupShadowRootSelectStart","_previewContainer","_placeholderRef","_placeholder","_pickupPositionInElement","_marker","_anchor","_passiveTransform","_activeTransform","_hasStartedDragging","_hasMoved","_initialContainer","_initialIndex","_parentPositions","_moveEvents","_pointerDirectionDelta","_pointerPositionAtLastDirectionChange","_lastKnownPointerPosition","_ownerSVGElement","_rootElementTapHighlight","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_lastTouchEventTime","_dragStartTime","_boundaryElement","_nativeInteractionsEnabled","_previewRect","_boundaryRect","_placeholderTemplate","_handles","_disabledHandles","_dropContainer","_parentDragRef","_cachedShadowRoot","lockAxis","dragStartDelay","scale","disabled","_disabled","_toggleNativeDragInteractions","handle","beforeStarted","started","released","ended","entered","exited","dropped","moved","data","constrainPosition","withRootElement","withParent","parentDragRef","registerDragItem","getPlaceholderElement","getRootElement","getVisibleElement","isDragging","withHandles","handles","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","rootElement","_removeRootElementListeners","renderer","runOutsideAngular","_pointerDown","_nativeDragStart","undefined","SVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","subscribe","_containInsideBoundaryOnResize","dispose","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","reset","resetToBoundary","offsetX","offsetY","currentLeft","currentTop","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","setFreeDragPosition","_applyRootElementTransform","withPreviewContainer","_sortFromLastPointerPosition","_updateActiveDropContainer","_getConstrainedPointerPosition","next","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","abs","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_getDragStartDelay","_endDragSequence","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_updatePointerDirectionDelta","offset","activeTransform","observers","distance","_getDragDistance","delta","_pointerUp","stopDragging","webkitTapHighlightColor","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","shadowRoot","dropContainer","shadowDomSelectStart","parentNode","placeholder","_createPlaceholderElement","marker","createComment","insertBefore","zIndex","_getPreviewInsertionPoint","replaceChild","start","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exitIndex","nextItemElement","getItemAtIndex","exit","_conditionallyInsertAnchor","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","cleanupListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","cleanup","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","mouse","scrollDifference","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","exitContainer","hasAnchor","anchor","before","min","max","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","SingleAxisSortStrategy","_element","_sortPredicate","_itemPositions","_activeDraggables","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","transformAmount","activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","push","_cacheItemPositions","withSortPredicate","predicate","p","getActiveItemsSnapshot","_getVisualItemPositions","updateOnScroll","withElementContainer","elementToMeasure","b","reverse","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","floor","MixedSortStrategy","_rootNode","_activeItems","deltaX","deltaY","_relatedNodes","childNodes","nextSibling","previousSwap","toSwapWith","current","overlapElement","after","newOverlapElement","_getRootNode","elementFromPoint","enterIndex","_getClosestItemIndexToPointer","targetItem","root","elementAtPoint","minDistance","Infinity","minIndex","hypot","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AutoScrollVerticalDirection","AutoScrollHorizontalDirection","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_container","_isDragging","_sortStrategy","_domRect","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","NONE","_horizontalScrollDirection","_scrollNode","_stopScrollTimers","_scrollableElements","_initialScrollSnap","coercedElement","withOrientation","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","draggedItems","filter","every","connectedTo","strategy","withScrollableParents","Error","oldContainerIndex","newContainerIndex","unshift","size","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","_startScrollInterval","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","pipe","scrollStep","UP","scrollBy","DOWN","LEFT","RIGHT","_canReceive","_startReceiving","activeSiblings","initiator","receiver","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","capturingEventOptions","activeCapturingEventOptions","_ResetsLoader","_ResetsLoader_Factory","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","decls","vars","_ResetsLoader_Template","rf","ctx","encapsulation","changeDetection","DragDropRegistry","_styleLoader","createRenderer","_cleanupDocumentTouchmove","_scroll","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","_domNodesToDirectives","_persistentTouchmoveListener","load","update","instances","startsWith","endEventHandler","e","toBind","_preventDefaultWhileDragging","options","_clearGlobalListeners","streams","observer","registerDirectiveNode","dragRef","WeakMap","removeDirectiveNode","getDragDirectiveForNode","instance","some","DragDropRegistry_Factory","DEFAULT_CONFIG","DragDrop","createDrag","config","createDropList","DragDrop_Factory","CDK_DRAG_PARENT","assertElementNode","CDK_DRAG_HANDLE","CdkDragHandle","_parentDrag","skipSelf","_stateChanges","nativeElement","_addHandle","ngAfterViewInit","ref","_removeHandle","CdkDragHandle_Factory","ɵdir","ɵɵdefineDirective","inputs","features","ɵɵProvidersFeature","provide","useExisting","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_viewContainerRef","_dir","_changeDetectorRef","_selfHandle","self","_destroyed","_dragRef","rootElementSelector","freeDragPosition","subscription","movedEvent","_injector","dragDrop","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","_updateRootElement","_setupHandlesListener","injector","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","closest","_getBoundaryElement","boundary","templateRef","parentDrag","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","handleElements","handleInstance","CdkDrag_Factory","hostVars","hostBindings","CdkDrag_HostBindings","ɵɵclassProp","outputs","exportAs","ɵɵNgOnChangesFeature","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropListGroup_Factory","CdkDropList","_scrollDispatcher","_group","_latestSortedRefs","_scrollableParentsResolved","_dropLists","id","getId","elementContainerSelector","_unsortedItems","_setupInputSyncSubscription","_syncItemsWithRef","getSortedItems","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","correspondingDropList","list","console","warn","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","querySelector","listAutoScrollDisabled","listOrientation","CdkDropList_Factory","CdkDropList_HostBindings","ɵɵattribute","useValue","CDK_DRAG_PREVIEW","CdkDragPreview","_drag","CdkDragPreview_Factory","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","CdkDragPlaceholder_Factory","DRAG_DROP_DIRECTIVES","DragDropModule","DragDropModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","APP_ID","counters","_appId","prefix","_IdGenerator_Factory","RtlScrollAxisType","rtlScrollAxisType","scrollBehaviorSupported","supportsScrollBehavior","Element","scrollToFunction","prototype","scrollTo","toString","getRtlScrollAxisType","NORMAL","scrollContainer","containerStyle","overflow","visibility","content","contentStyle","NEGATED","INVERTED","R","g","s","Dir","_isInitialized","_rawDir","previousValue","ngAfterContentInit","Dir_Factory","Dir_HostBindings","BidiModule","BidiModule_Factory","shadowDomIsSupported","_supportsShadowDom","head","createShadowRoot","attachShadow","rootNode","ShadowRoot","_getFocusedElementPierceShadowDom","activeElement","newActiveElement","composedPath","isObservable","of","ArrayDataSource","_data","disconnect","_ViewRepeaterOperation","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","viewCacheSize","_viewCache","applyChanges","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","view","operation","viewArgsFactory","_insertView","INSERTED","REPLACED","_detachAndCacheView","REMOVED","_moveView","MOVED","detach","cachedView","_insertViewFromCache","$implicit","viewArgs","detachedView","_maybeCacheView","move","pop","insert","A","forwardRef","Renderer2","Optional","Inject","ViewChild","IterableDiffers","asapScheduler","distinctUntilChanged","auditTime","pairwise","shareReplay","_c0","_c1","ɵɵDir","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","_scrolledIndexChange","scrolledIndexChange","_viewport","_itemSize","_minBufferPx","_maxBufferPx","itemSize","minBufferPx","maxBufferPx","viewport","_updateTotalContentSize","_updateRenderedRange","updateItemAndBufferSize","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","viewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","ceil","newVisibleIndex","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","CdkFixedSizeVirtualScroll_Factory","useFactory","deps","DEFAULT_SCROLL_TIME","_platform","_cleanupGlobalListener","_scrolled","_scrolledCount","scrollContainers","register","elementScrolled","deregister","scrollableReference","auditTimeInMs","ancestorScrolled","elementOrElementRef","ancestors","scrollingContainers","_subscription","_scrollableContainsElement","scrollableElement","ScrollDispatcher_Factory","elementRef","scrollDispatcher","ngZone","_scrollElement","_cleanupScroll","_elementScrolled","ngOnInit","el","isRtl","_applyScrollToOptions","CdkScrollable_Factory","DEFAULT_RESIZE_TIME","_listeners","_viewportSize","_change","changeListener","_updateViewportSize","output","getViewportRect","_getWindow","documentRect","throttleTime","defaultView","innerWidth","innerHeight","ViewportRuler_Factory","VIRTUAL_SCROLLABLE","CdkVirtualScrollable","measureViewportSize","viewportEl","CdkVirtualScrollable_Factory","ɵɵInheritDefinitionFeature","rangesEqual","r1","r2","SCROLL_SCHEDULER","requestAnimationFrame","CdkVirtualScrollViewport","_detachedSubject","_renderedRangeSubject","_orientation","_calculateSpacerSize","appendOnly","_contentWrapper","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedContentTransform","_renderedRange","_dataLength","_forOf","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","_isDestroyed","viewportRuler","checkViewportSize","_measureViewportSize","_markChangeDetectionNeeded","forOf","dataStream","newLength","_doChangeDetection","measureBoundingClientRectWithScrollOffset","range","getOffsetToRenderedContentStart","axis","axisDirection","Number","measureRenderedContentSize","_from","measureViewportOffset","fromRect","scrollerClientRect","viewportClientRect","contentEl","offsetWidth","offsetHeight","measureRangeSize","runAfter","runAfterChangeDetection","fn","CdkVirtualScrollViewport_Factory","viewQuery","CdkVirtualScrollViewport_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","CdkVirtualScrollViewport_HostBindings","virtualScrollable","ngContentSelectors","consts","CdkVirtualScrollViewport_Template","ɵɵprojectionDef","ɵɵdomElementStart","ɵɵprojection","ɵɵdomElementEnd","ɵɵdomElement","ɵɵadvance","ɵɵstyleProp","getOffset","CdkVirtualForOf","_template","_differs","_viewRepeater","viewChange","_dataSourceChanges","cdkVirtualForOf","_cdkVirtualForOf","cdkVirtualForTrackBy","_cdkVirtualForTrackBy","_needsUpdate","cdkVirtualForTemplate","cdkVirtualForTemplateCacheSize","prev","cur","_changeDataSource","_differ","_renderedItems","_onRenderedDataChange","renderedStartIndex","rangeLen","firstNode","lastNode","ngDoCheck","diff","_updateContext","_applyChanges","create","oldDs","newDs","count","_updateComputedContextProperties","_adjustedPreviousIndex","_getEmbeddedViewArgs","forEachIdentityChange","last","even","odd","ngTemplateContextGuard","directive","CdkVirtualForOf_Factory","useClass","CdkVirtualScrollableElement","CdkVirtualScrollableElement_Factory","CdkVirtualScrollableWindow","CdkVirtualScrollableWindow_Factory","CdkScrollableModule_Factory","ScrollingModule","ScrollingModule_Factory","EnvironmentInjector","ApplicationRef","createComponent","appsWithLoaders","_appRef","_environmentInjector","loader","appRef","loaders","refs","onDestroy","environmentInjector","_CdkPrivateStyleLoader_Factory","fallbackValue","_isNumberValue","arguments","isNaN","elementOrRef"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13]}