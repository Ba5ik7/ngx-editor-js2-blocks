{"version":3,"file":"2814.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAA4G;AACpD;AACkB;AACnD;;AAEvB;AACA,SAASQ,qBAAqBA,CAACC,KAAK,EAAE;EAClC,OAAOA,KAAK,IAAI,IAAI,IAAI,GAAGA,KAAK,EAAE,KAAK,OAAO;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACD,KAAK,EAAEE,SAAS,GAAG,KAAK,EAAE;EACjD,MAAMC,MAAM,GAAG,EAAE;EACjB,IAAIH,KAAK,IAAI,IAAI,EAAE;IACf,MAAMI,YAAY,GAAGC,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,GAAGA,KAAK,GAAG,GAAGA,KAAK,EAAE,CAACO,KAAK,CAACL,SAAS,CAAC;IAC/E,KAAK,MAAMM,WAAW,IAAIJ,YAAY,EAAE;MACpC,MAAMK,aAAa,GAAG,GAAGD,WAAW,EAAE,CAACE,IAAI,CAAC,CAAC;MAC7C,IAAID,aAAa,EAAE;QACfN,MAAM,CAACQ,IAAI,CAACF,aAAa,CAAC;MAC9B;IACJ;EACJ;EACA,OAAON,MAAM;AACjB;;;;;;;;;;;;;;;ACvCA;AACA,SAASL,mBAAmBA,CAACE,KAAK,EAAE;EAChC,IAAIA,KAAK,IAAI,IAAI,EAAE;IACf,OAAO,EAAE;EACb;EACA,OAAO,OAAOA,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,GAAGA,KAAK,IAAI;AAC3D;;;;;;;;;;;;;;;;;;ACN2C;AAE3C,SAASJ,oBAAoBA,CAACI,KAAK,EAAEa,aAAa,GAAG,CAAC,EAAE;EACpD,IAAIrB,cAAc,CAACQ,KAAK,CAAC,EAAE;IACvB,OAAOc,MAAM,CAACd,KAAK,CAAC;EACxB;EACA,OAAOe,SAAS,CAACC,MAAM,KAAK,CAAC,GAAGH,aAAa,GAAG,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA,SAASrB,cAAcA,CAACQ,KAAK,EAAE;EAC3B;EACA;EACA;EACA,OAAO,CAACiB,KAAK,CAACC,UAAU,CAAClB,KAAK,CAAC,CAAC,IAAI,CAACiB,KAAK,CAACH,MAAM,CAACd,KAAK,CAAC,CAAC;AAC7D;;AAEA;AACA;AACA;AACA;AACA,SAASN,aAAaA,CAACyB,YAAY,EAAE;EACjC,OAAOA,YAAY,YAAYP,qDAAU,GAAGO,YAAY,CAACC,aAAa,GAAGD,YAAY;AACzF;;;;;;;;;;;;;;;ACzBA,SAAStB,WAAWA,CAACG,KAAK,EAAE;EACxB,OAAOK,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;AACjD","sources":["./node_modules/@angular/cdk/fesm2022/coercion.mjs","./node_modules/@angular/cdk/fesm2022/css-pixel-value-C_HEqLhI.mjs","./node_modules/@angular/cdk/fesm2022/element-x4z00URv.mjs","./node_modules/@angular/cdk/fesm2022/array-I1yfCXUO.mjs"],"sourcesContent":["export { _ as _isNumberValue, a as coerceElement, c as coerceNumberProperty } from './element-x4z00URv.mjs';\nexport { c as coerceArray } from './array-I1yfCXUO.mjs';\nexport { c as coerceCssPixelValue } from './css-pixel-value-C_HEqLhI.mjs';\nimport '@angular/core';\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n    const result = [];\n    if (value != null) {\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n        for (const sourceValue of sourceValues) {\n            const trimmedString = `${sourceValue}`.trim();\n            if (trimmedString) {\n                result.push(trimmedString);\n            }\n        }\n    }\n    return result;\n}\n\nexport { coerceBooleanProperty, coerceStringArray };\n","/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n\nexport { coerceCssPixelValue as c };\n","import { ElementRef } from '@angular/core';\n\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    if (_isNumberValue(value)) {\n        return Number(value);\n    }\n    return arguments.length === 2 ? fallbackValue : 0;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\nexport { _isNumberValue as _, coerceElement as a, coerceNumberProperty as c };\n","function coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\nexport { coerceArray as c };\n"],"names":["_","_isNumberValue","a","coerceElement","c","coerceNumberProperty","coerceArray","coerceCssPixelValue","coerceBooleanProperty","value","coerceStringArray","separator","result","sourceValues","Array","isArray","split","sourceValue","trimmedString","trim","push","ElementRef","fallbackValue","Number","arguments","length","isNaN","parseFloat","elementOrRef","nativeElement"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3]}