{"version":3,"file":"268.js","mappings":"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","sources":["./projects/ngx-editor-js2-image/src/lib/image-config/image-config.component.ts","./projects/ngx-editor-js2-image/src/lib/ngx-editor-js2-image.component.ts","./projects/ngx-editor-js2-image/src/public-api.ts","./projects/ngx-editor-js2-image/src/tmdjr-ngx-editor-js2-image.ts"],"sourcesContent":["import { AsyncPipe } from '@angular/common';\nimport { Component, inject, input, output } from '@angular/core';\nimport { toObservable } from '@angular/core/rxjs-interop';\nimport {\n  FormBuilder,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { MatButton } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { map, mergeMap, of, startWith, tap, withLatestFrom } from 'rxjs';\n\ntype Value = { url: string; title: string };\ntype ViewModel = {\n  imageConfigForm: FormGroup;\n  configFormErrorMessages: { [key: string]: string };\n  errorMessages: { [key: string]: string };\n};\n\n@Component({\n  selector: 'image-config',\n  imports: [\n    MatInput,\n    MatButton,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    AsyncPipe,\n  ],\n  template: `\n    <div class=\"image-block-modal\">\n      @if (viewModel$ | async; as vm) {\n      <form [formGroup]=\"vm.imageConfigForm\">\n        <h2 mat-dialog-title>Image Configurations</h2>\n        <mat-form-field>\n          <mat-label>Title</mat-label>\n          <input matInput type=\"text\" formControlName=\"title\" />\n          @if (vm.imageConfigForm.get('title')?.errors) {\n          <mat-error>{{ vm.configFormErrorMessages['title'] }}</mat-error>\n          }\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>URL</mat-label>\n          <input matInput type=\"text\" formControlName=\"url\" />\n          @if (vm.imageConfigForm.get('url')?.errors) {\n          <mat-error>{{ vm.configFormErrorMessages['url'] }}</mat-error>\n          }\n        </mat-form-field>\n        <div class=\"action-group\">\n          <button\n            type=\"button\"\n            mat-flat-button\n            (click)=\"updateImage(vm.imageConfigForm)\"\n            [disabled]=\"vm.imageConfigForm.invalid\"\n          >\n            Update\n          </button>\n          <button type=\"button\" mat-button (click)=\"closeConfig()\">\n            Cancel\n          </button>\n        </div>\n      </form>\n      }\n    </div>\n  `,\n  styles: [\n    `\n      :host {\n        border: 1px solid #ccc;\n        border-radius: var(\n          --mat-card-outlined-container-shape,\n          var(--mat-sys-corner-medium)\n        );\n        padding: 20px;\n        form {\n          display: flex;\n          flex-direction: column;\n          .action-group {\n            display: flex;\n            justify-content: flex-end;\n            gap: 10px;\n          }\n        }\n      }\n    `,\n  ],\n})\nexport class ImageConfigComponent {\n  formBuilder = inject(FormBuilder);\n\n  value = input<Value>({ url: '', title: '' });\n  value$ = toObservable(this.value);\n\n  imageValue = output<Value>();\n\n  viewModel$ = this.value$.pipe(\n    map((value) => ({\n      imageConfigForm: this.formBuilder.group({\n        url: [value.url, [Validators.required]],\n        title: [value.title, [Validators.required]],\n      }),\n      errorMessages: {\n        required: 'Required',\n      },\n      configFormErrorMessages: {\n        url: '',\n        title: '',\n      },\n    })),\n    mergeMap((viewModel: ViewModel) =>\n      this.watchStatusChanges(viewModel).pipe(\n        startWith(null),\n        withLatestFrom(of(viewModel)),\n        map(([_status, vm]) => vm)\n      )\n    )\n  );\n\n  watchStatusChanges(viewModel: ViewModel) {\n    return viewModel.imageConfigForm.statusChanges.pipe(\n      tap(() => this.setErrorsMessages(viewModel))\n    );\n  }\n\n  updateImage(imageConfigForm: FormGroup) {\n    this.imageValue.emit(imageConfigForm.value);\n  }\n\n  closeConfig() {\n    this.imageValue.emit(\n      this.value().url ? this.value() : { url: '', title: '' }\n    );\n  }\n\n  // ! Quick and Drity way to set error messages\n  // ! Breaks all my believes in \"clean code\"\n  setErrorsMessages({\n    imageConfigForm,\n    configFormErrorMessages,\n    errorMessages,\n  }: ViewModel): void {\n    Object.keys(imageConfigForm.controls).forEach((element) => {\n      const errors = imageConfigForm.get(element)?.errors;\n      if (errors) {\n        const error = Object.keys(errors)[0];\n        configFormErrorMessages[element] = errorMessages[error];\n      }\n    });\n  }\n}\n","import { NgClass } from '@angular/common';\nimport { Component, input, signal } from '@angular/core';\nimport { MatFabButton } from '@angular/material/button';\nimport { MatIcon } from '@angular/material/icon';\nimport { FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AutofocusDirective,\n  BlockComponent,\n  BlockOptionAction,\n  ControlAccessorDirective,\n  ToolbarFabDirective,\n} from '@tmdjr/ngx-editor-js2';\nimport { CdkDrag } from '@angular/cdk/drag-drop';\nimport { ImageConfigComponent } from './image-config/image-config.component';\n\ntype Value = { url: string; title: string };\n\n@Component({\n  selector: 'ngx-editor-js2-image',\n  host: { class: 'cdk-drag-animating no-toolbar-inline' },\n  hostDirectives: [CdkDrag],\n  imports: [\n    ReactiveFormsModule,\n    ControlAccessorDirective,\n    AutofocusDirective,\n    ToolbarFabDirective,\n    ImageConfigComponent,\n    MatFabButton,\n    MatIcon,\n    NgClass,\n  ],\n  template: `\n    <ng-container [formGroup]=\"formGroup()\">\n      <span\n        controlAccessor\n        toolbarFab\n        class=\"image-container-overlay\"\n        [actionCallback]=\"actionCallbackBind\"\n        [autofocus]=\"autofocus()\"\n        [blockOptionActions]=\"blockOptionActions()\"\n        [formControlName]=\"formControlName()\"\n        [componentContextPositionIndex]=\"sortIndex()\"\n      ></span>\n      @if (!openOverlay()) {\n      <div class=\"image-container\" [ngClass]=\"savedAction()\">\n        <img\n          class=\"image-block\"\n          [src]=\"value().url\"\n          [title]=\"value().title\"\n          onerror=\"this.onerror=null;this.src='https://dummyimage.com/600x400/000/fff'\"\n        />\n        <button\n          mat-fab\n          class=\"image-block-button\"\n          (click)=\"openEditUrlOverlay()\"\n        >\n          <mat-icon>edit</mat-icon>\n        </button>\n      </div>\n      } @else {\n      <image-config\n        [value]=\"value()\"\n        (imageValue)=\"updateImage($event)\"\n      ></image-config>\n      }\n    </ng-container>\n  `,\n  styles: [\n    `\n      :host {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        margin: 1.5rem 0;\n        .flex-start {\n          justify-content: flex-start;\n        }\n        .flex-end {\n          justify-content: flex-end;\n        }\n        .center {\n          justify-content: center;\n        }\n        .stretch img {\n          width: 100%;\n        }\n        .image-container-overlay {\n          display: flex;\n          height: 100%;\n          width: 100%;\n          position: absolute;\n        }\n        .image-container-overlay:hover ~ .image-container .image-block-button,\n        .image-block-button:hover {\n          display: block;\n        }\n\n        .image-container {\n          display: flex;\n          .image-block {\n            min-width: 0;\n          }\n        }\n\n        .image-block-button {\n          position: absolute;\n          top: 6px;\n          left: 6px;\n          display: none;\n        }\n      }\n    `,\n  ],\n})\nexport class NgxEditorJs2ImageComponent implements BlockComponent {\n  sortIndex = input<number>(0);\n  componentInstanceName = 'NgxEditorJs2ImageComponent';\n  autofocus = input<boolean>(true);\n  formGroup = input.required<FormGroup>();\n  formControlName = input.required<string>();\n  blockOptionActions = input<BlockOptionAction[]>([\n    { action: 'flex-start', icon: 'format_align_left' },\n    { action: 'center', icon: 'format_align_center' },\n    { action: 'flex-end', icon: 'format_align_right' },\n    { action: 'stretch', icon: 'format_align_justify' },\n  ]);\n\n  value = signal<Value>({ url: '', title: '' });\n  savedAction = signal<string>('flex-start');\n  actionCallbackBind = this.actionCallback.bind(this);\n\n  openOverlay = signal<boolean>(true);\n\n  ngOnInit() {\n    try {\n      const possibleSavedValue = this.formGroup().get(this.formControlName());\n\n      this.value.set(\n        JSON.parse(possibleSavedValue?.value ? possibleSavedValue.value : '{}')\n      );\n      this.value()?.url && this.openOverlay.set(false);\n    } catch (error) {\n      console.warn('Error parseing Image setting value', error);\n    }\n  }\n\n  actionCallback(action: string) {\n    this.savedAction.update(() => action);\n  }\n\n  openEditUrlOverlay() {\n    this.openOverlay.set(true);\n  }\n\n  updateImage(value: Value) {\n    this.value.set(value);\n    this.formGroup()\n      .get(this.formControlName())\n      ?.setValue(JSON.stringify(value));\n    this.openOverlay.set(false);\n  }\n}\n","/*\n * Public API Surface of ngx-editor-js2-image\n */\n\nexport * from './lib/ngx-editor-js2-image.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["ImageConfigComponent","formBuilder","inject","FormBuilder","value","input","url","title","ngDevMode","debugName","value$","toObservable","imageValue","output","viewModel$","pipe","map","imageConfigForm","group","Validators","required","errorMessages","configFormErrorMessages","mergeMap","viewModel","watchStatusChanges","startWith","withLatestFrom","of","_status","vm","statusChanges","tap","setErrorsMessages","updateImage","emit","closeConfig","Object","keys","controls","forEach","element","errors","get","error","ɵcmp","selectors","inputs","outputs","decls","vars","consts","template","ImageConfigComponent_Template","rf","ctx","MatInput","MatButton","MatFormFieldModule","i1","MatFormField","MatLabel","MatError","ReactiveFormsModule","i2","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","AsyncPipe","styles","NgxEditorJs2ImageComponent","sortIndex","componentInstanceName","autofocus","formGroup","formControlName","blockOptionActions","action","icon","signal","savedAction","actionCallbackBind","actionCallback","bind","openOverlay","ngOnInit","possibleSavedValue","set","JSON","parse","console","warn","update","openEditUrlOverlay","setValue","stringify","hostAttrs","features","i1$1","CdkDrag","NgxEditorJs2ImageComponent_Template","ControlAccessorDirective","AutofocusDirective","ToolbarFabDirective","MatFabButton","MatIcon","NgClass"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}