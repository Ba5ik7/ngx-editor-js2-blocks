{"version":3,"file":"9189.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2022/overlay.mjs"],"sourcesContent":["import { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, NgZone, Injectable, RendererFactory2, Component, ChangeDetectionStrategy, ViewEncapsulation, untracked, afterRender, afterNextRender, ElementRef, Injector, ANIMATION_MODULE_TYPE, EnvironmentInjector, ApplicationRef, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, booleanAttribute, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray } from '@angular/cdk/coercion';\nimport { supportsScrollBehavior, Platform, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport { filter, takeUntil, takeWhile } from 'rxjs/operators';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { _IdGenerator } from '@angular/cdk/a11y';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    _viewportRuler;\n    _previousHTMLStyles = { top: '', left: '' };\n    _previousScrollPosition;\n    _isEnabled = false;\n    _document;\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    _scrollDispatcher;\n    _ngZone;\n    _viewportRuler;\n    _config;\n    _scrollSubscription = null;\n    _overlayRef;\n    _initialScrollPosition;\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0).pipe(filter(scrollable => {\n            return (!scrollable ||\n                !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement));\n        }));\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n    /** Detaches the overlay ref and disables the scroll strategy. */\n    _detach = () => {\n        this.disable();\n        if (this._overlayRef.hasAttached()) {\n            this._ngZone.run(() => this._overlayRef.detach());\n        }\n    };\n}\n\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    _scrollDispatcher;\n    _viewportRuler;\n    _ngZone;\n    _config;\n    _scrollSubscription = null;\n    _overlayRef;\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    _scrollDispatcher = inject(ScrollDispatcher);\n    _viewportRuler = inject(ViewportRuler);\n    _ngZone = inject(NgZone);\n    _document = inject(DOCUMENT);\n    constructor() { }\n    /** Do nothing on scroll. */\n    noop = () => new NoopScrollStrategy();\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * @param config Configuration to be used inside the scroll strategy.\n     */\n    close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n    /** Block scrolling. */\n    block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n    /**\n     * Update the overlay's position on scroll.\n     * @param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     */\n    reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: ScrollStrategyOptions, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    /** Strategy with which to position the overlay. */\n    positionStrategy;\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    scrollStrategy = new NoopScrollStrategy();\n    /** Custom class to add to the overlay pane. */\n    panelClass = '';\n    /** Whether the overlay has a backdrop. */\n    hasBackdrop = false;\n    /** Custom class to add to the backdrop */\n    backdropClass = 'cdk-overlay-dark-backdrop';\n    /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n    width;\n    /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n    height;\n    /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n    minWidth;\n    /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n    minHeight;\n    /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n    maxWidth;\n    /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n    maxHeight;\n    /**\n     * Direction of the text in the overlay panel. If a `Directionality` instance\n     * is passed in, the overlay will handle changes to its value automatically.\n     */\n    direction;\n    /**\n     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    disposeOnNavigation = false;\n    constructor(config) {\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    offsetX;\n    offsetY;\n    panelClass;\n    /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n    originX;\n    /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n    originY;\n    /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n    overlayX;\n    /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n    overlayY;\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n    isOriginClipped;\n    isOriginOutsideView;\n    isOverlayClipped;\n    isOverlayOutsideView;\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    connectionPair;\n    scrollableViewProperties;\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    /** Currently attached overlays in the order they were attached. */\n    _attachedOverlays = [];\n    _document = inject(DOCUMENT);\n    _isAttached;\n    constructor() { }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: BaseOverlayDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    _ngZone = inject(NgZone);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _cleanupKeydown;\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._ngZone.runOutsideAngular(() => {\n                this._cleanupKeydown = this._renderer.listen('body', 'keydown', this._keydownListener);\n            });\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._cleanupKeydown?.();\n            this._isAttached = false;\n        }\n    }\n    /** Keyboard event listener that will be attached to the body. */\n    _keydownListener = (event) => {\n        const overlays = this._attachedOverlays;\n        for (let i = overlays.length - 1; i > -1; i--) {\n            // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n            // We want to target the most recent overlay, rather than trying to match where the event came\n            // from, because some components might open an overlay, but keep focus on a trigger element\n            // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n            // because we don't want overlays that don't handle keyboard events to block the ones below\n            // them that do.\n            if (overlays[i]._keydownEvents.observers.length > 0) {\n                this._ngZone.run(() => overlays[i]._keydownEvents.next(event));\n                break;\n            }\n        }\n    };\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone, { optional: true });\n    _cursorOriginalValue;\n    _cursorStyleIsSet = false;\n    _pointerDownEventTarget;\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n    /** Store pointerdown event target to track origin of click. */\n    _pointerDownListener = (event) => {\n        this._pointerDownEventTarget = _getEventTarget(event);\n    };\n    /** Click event listener that will be attached to the body propagate phase. */\n    _clickListener = (event) => {\n        const target = _getEventTarget(event);\n        // In case of a click event, we want to check the origin of the click\n        // (e.g. in case where a user starts a click inside the overlay and\n        // releases the click outside of it).\n        // This is done by using the event target of the preceding pointerdown event.\n        // Every click event caused by a pointer device has a preceding pointerdown\n        // event, unless the click was programmatically triggered (e.g. in a unit test).\n        const origin = event.type === 'click' && this._pointerDownEventTarget\n            ? this._pointerDownEventTarget\n            : target;\n        // Reset the stored pointerdown event target, to avoid having it interfere\n        // in subsequent events.\n        this._pointerDownEventTarget = null;\n        // We copy the array because the original may be modified asynchronously if the\n        // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n        // the for loop.\n        const overlays = this._attachedOverlays.slice();\n        // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n        // We want to target all overlays for which the click could be considered as outside click.\n        // As soon as we reach an overlay for which the click is not outside click we break off\n        // the loop.\n        for (let i = overlays.length - 1; i > -1; i--) {\n            const overlayRef = overlays[i];\n            if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                continue;\n            }\n            // If it's a click inside the overlay, just break - we should do nothing\n            // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n            // and proceed with the next overlay\n            if (containsPierceShadowDom(overlayRef.overlayElement, target) ||\n                containsPierceShadowDom(overlayRef.overlayElement, origin)) {\n                break;\n            }\n            const outsidePointerEvents = overlayRef._outsidePointerEvents;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.run(() => outsidePointerEvents.next(event));\n            }\n            else {\n                outsidePointerEvents.next(event);\n            }\n        }\n    };\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** Version of `Element.contains` that transcends shadow DOM boundaries. */\nfunction containsPierceShadowDom(parent, child) {\n    const supportsShadowRoot = typeof ShadowRoot !== 'undefined' && ShadowRoot;\n    let current = child;\n    while (current) {\n        if (current === parent) {\n            return true;\n        }\n        current =\n            supportsShadowRoot && current instanceof ShadowRoot ? current.host : current.parentNode;\n    }\n    return false;\n}\n\nclass _CdkOverlayStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: _CdkOverlayStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.1.3\", type: _CdkOverlayStyleLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-overlay-style-loader\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\".cdk-overlay-container,.cdk-global-overlay-wrapper{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{position:fixed}@layer cdk-overlay{.cdk-overlay-container{z-index:1000}}.cdk-overlay-container:empty{display:none}.cdk-global-overlay-wrapper{display:flex;position:absolute}@layer cdk-overlay{.cdk-global-overlay-wrapper{z-index:1000}}.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;display:flex;max-width:100%;max-height:100%}@layer cdk-overlay{.cdk-overlay-pane{z-index:1000}}.cdk-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;pointer-events:auto;-webkit-tap-highlight-color:rgba(0,0,0,0);opacity:0}@layer cdk-overlay{.cdk-overlay-backdrop{z-index:1000;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}}.cdk-overlay-backdrop-showing{opacity:1}@media(forced-colors: active){.cdk-overlay-backdrop-showing{opacity:.6}}@layer cdk-overlay{.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.32)}}.cdk-overlay-transparent-backdrop{transition:visibility 1ms linear,opacity 1ms linear;visibility:hidden;opacity:1}.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing,.cdk-high-contrast-active .cdk-overlay-transparent-backdrop{opacity:0;visibility:visible}.cdk-overlay-backdrop-noop-animation{transition:none}.cdk-overlay-connected-position-bounding-box{position:absolute;display:flex;flex-direction:column;min-width:1px;min-height:1px}@layer cdk-overlay{.cdk-overlay-connected-position-bounding-box{z-index:1000}}.cdk-global-scrollblock{position:fixed;width:100%;overflow-y:scroll}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: _CdkOverlayStyleLoader, decorators: [{\n            type: Component,\n            args: [{ template: '', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: { 'cdk-overlay-style-loader': '' }, styles: [\".cdk-overlay-container,.cdk-global-overlay-wrapper{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{position:fixed}@layer cdk-overlay{.cdk-overlay-container{z-index:1000}}.cdk-overlay-container:empty{display:none}.cdk-global-overlay-wrapper{display:flex;position:absolute}@layer cdk-overlay{.cdk-global-overlay-wrapper{z-index:1000}}.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;display:flex;max-width:100%;max-height:100%}@layer cdk-overlay{.cdk-overlay-pane{z-index:1000}}.cdk-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;pointer-events:auto;-webkit-tap-highlight-color:rgba(0,0,0,0);opacity:0}@layer cdk-overlay{.cdk-overlay-backdrop{z-index:1000;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}}.cdk-overlay-backdrop-showing{opacity:1}@media(forced-colors: active){.cdk-overlay-backdrop-showing{opacity:.6}}@layer cdk-overlay{.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.32)}}.cdk-overlay-transparent-backdrop{transition:visibility 1ms linear,opacity 1ms linear;visibility:hidden;opacity:1}.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing,.cdk-high-contrast-active .cdk-overlay-transparent-backdrop{opacity:0;visibility:visible}.cdk-overlay-backdrop-noop-animation{transition:none}.cdk-overlay-connected-position-bounding-box{position:absolute;display:flex;flex-direction:column;min-width:1px;min-height:1px}@layer cdk-overlay{.cdk-overlay-connected-position-bounding-box{z-index:1000}}.cdk-global-scrollblock{position:fixed;width:100%;overflow-y:scroll}\"] }]\n        }] });\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    _platform = inject(Platform);\n    _containerElement;\n    _document = inject(DOCUMENT);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    constructor() { }\n    ngOnDestroy() {\n        this._containerElement?.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        this._loadStyles();\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n    /** Loads the structural styles necessary for the overlay to work. */\n    _loadStyles() {\n        this._styleLoader.load(_CdkOverlayStyleLoader);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayContainer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    _portalOutlet;\n    _host;\n    _pane;\n    _config;\n    _ngZone;\n    _keyboardDispatcher;\n    _document;\n    _location;\n    _outsideClickDispatcher;\n    _animationsDisabled;\n    _injector;\n    _renderer;\n    _backdropElement = null;\n    _backdropTimeout;\n    _backdropClick = new Subject();\n    _attachments = new Subject();\n    _detachments = new Subject();\n    _positionStrategy;\n    _scrollStrategy;\n    _locationChanges = Subscription.EMPTY;\n    _cleanupBackdropClick;\n    _cleanupBackdropTransitionEnd;\n    /**\n     * Reference to the parent of the `_host` at the time it was detached. Used to restore\n     * the `_host` to its original position in the DOM when it gets re-attached.\n     */\n    _previousHostParent;\n    /** Stream of keydown events dispatched to this overlay. */\n    _keydownEvents = new Subject();\n    /** Stream of mouse outside events dispatched to this overlay. */\n    _outsidePointerEvents = new Subject();\n    _renders = new Subject();\n    _afterRenderRef;\n    /** Reference to the currently-running `afterNextRender` call. */\n    _afterNextRenderRef;\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false, _injector, _renderer) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._injector = _injector;\n        this._renderer = _renderer;\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n        // Users could open the overlay from an `effect`, in which case we need to\n        // run the `afterRender` as `untracked`. We don't recommend that users do\n        // this, but we also don't want to break users who are doing it.\n        this._afterRenderRef = untracked(() => afterRender(() => {\n            this._renders.next();\n        }, { injector: this._injector }));\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // We need to clean this up ourselves, because we're passing in an\n        // `EnvironmentInjector` below which won't ever be destroyed.\n        // Otherwise it causes some callbacks to be retained (see #29696).\n        this._afterNextRenderRef?.destroy();\n        // Update the position once the overlay is fully rendered before attempting to position it,\n        // as the position may depend on the size of the rendered content.\n        this._afterNextRenderRef = afterNextRender(() => {\n            // The overlay could've been detached before the callback executed.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        }, { injector: this._injector });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n        // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n        // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n        if (typeof attachResult?.onDestroy === 'function') {\n            // In most cases we control the portal and we know when it is being detached so that\n            // we can finish the disposal process. The exception is if the user passes in a custom\n            // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n            // `detach` here instead of `dispose`, because we don't know if the user intends to\n            // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n            attachResult.onDestroy(() => {\n                if (this.hasAttached()) {\n                    // We have to delay the `detach` call, because detaching immediately prevents\n                    // other destroy hooks from running. This is likely a framework bug similar to\n                    // https://github.com/angular/angular/issues/46119\n                    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n                }\n            });\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenEmpty();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        this._host?.remove();\n        this._afterNextRenderRef?.destroy();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n        this._afterRenderRef.destroy();\n        this._renders.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._cleanupBackdropClick?.();\n        this._cleanupBackdropClick = this._renderer.listen(this._backdropElement, 'click', (event) => this._backdropClick.next(event));\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            this._cleanupBackdropTransitionEnd?.();\n            this._cleanupBackdropTransitionEnd = this._renderer.listen(backdropToDetach, 'transitionend', (event) => {\n                this._disposeBackdrop(event.target);\n            });\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenEmpty() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._renders\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        this._cleanupBackdropClick?.();\n        this._cleanupBackdropTransitionEnd?.();\n        if (backdrop) {\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    _viewportRuler;\n    _document;\n    _platform;\n    _overlayContainer;\n    /** The overlay to which this strategy is attached. */\n    _overlayRef;\n    /** Whether we're performing the very first positioning of the overlay. */\n    _isInitialRender;\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n    _lastBoundingBoxSize = { width: 0, height: 0 };\n    /** Whether the overlay was pushed in a previous positioning. */\n    _isPushed = false;\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n    _canPush = true;\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n    _growAfterOpen = false;\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    _hasFlexibleDimensions = true;\n    /** Whether the overlay position is locked. */\n    _positionLocked = false;\n    /** Cached origin dimensions */\n    _originRect;\n    /** Cached overlay dimensions */\n    _overlayRect;\n    /** Cached viewport dimensions */\n    _viewportRect;\n    /** Cached container dimensions */\n    _containerRect;\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n    _viewportMargin = 0;\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n    _scrollables = [];\n    /** Ordered list of preferred positions, from most to least desirable. */\n    _preferredPositions = [];\n    /** The origin element against which the overlay will be positioned. */\n    _origin;\n    /** The overlay pane element. */\n    _pane;\n    /** Whether the strategy has been disposed of already. */\n    _isDisposed;\n    /**\n     * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n     * within the viewport.\n     */\n    _boundingBox;\n    /** The last position to have been calculated as the best fit position. */\n    _lastPosition;\n    /** The last calculated scroll visibility. Only tracked  */\n    _lastScrollVisibility;\n    /** Subject that emits whenever the position changes. */\n    _positionChanges = new Subject();\n    /** Subscription to viewport size changes. */\n    _resizeSubscription = Subscription.EMPTY;\n    /** Default offset for the overlay along the x axis. */\n    _offsetX = 0;\n    /** Default offset for the overlay along the y axis. */\n    _offsetY = 0;\n    /** Selector to be used when finding the elements on which to set the transform origin. */\n    _transformOriginSelector;\n    /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n    _appliedPanelClasses = [];\n    /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n    _previousPushAmount;\n    /** Observable sequence of position changes. */\n    positionChanges = this._positionChanges;\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        this.setOrigin(connectedTo);\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollVisibility = this._getScrollVisibility();\n            // We're recalculating on scroll, but we only want to emit if anything\n            // changed since downstream code might be hitting the `NgZone`.\n            if (position !== this._lastPosition ||\n                !this._lastScrollVisibility ||\n                !compareScrollVisibility(this._lastScrollVisibility, scrollVisibility)) {\n                const changeEvent = new ConnectedOverlayPositionChange(position, scrollVisibility);\n                this._positionChanges.next(changeEvent);\n            }\n            this._lastScrollVisibility = scrollVisibility;\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `DOMRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin * 2;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breaking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the DOMRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `DOMRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `DOMRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\n/** Returns whether two `ScrollingVisibility` objects are identical. */\nfunction compareScrollVisibility(a, b) {\n    if (a === b) {\n        return true;\n    }\n    return (a.isOriginClipped === b.isOriginClipped &&\n        a.isOriginOutsideView === b.isOriginOutsideView &&\n        a.isOverlayClipped === b.isOverlayClipped &&\n        a.isOverlayOutsideView === b.isOverlayOutsideView);\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    /** The overlay to which this strategy is attached. */\n    _overlayRef;\n    _cssPosition = 'static';\n    _topOffset = '';\n    _bottomOffset = '';\n    _alignItems = '';\n    _xPosition = '';\n    _xOffset = '';\n    _width = '';\n    _height = '';\n    _isDisposed = false;\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    _viewportRuler = inject(ViewportRuler);\n    _document = inject(DOCUMENT);\n    _platform = inject(Platform);\n    _overlayContainer = inject(OverlayContainer);\n    constructor() { }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayPositionBuilder, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    scrollStrategies = inject(ScrollStrategyOptions);\n    _overlayContainer = inject(OverlayContainer);\n    _positionBuilder = inject(OverlayPositionBuilder);\n    _keyboardDispatcher = inject(OverlayKeyboardDispatcher);\n    _injector = inject(Injector);\n    _ngZone = inject(NgZone);\n    _document = inject(DOCUMENT);\n    _directionality = inject(Directionality);\n    _location = inject(Location);\n    _outsideClickDispatcher = inject(OverlayOutsideClickDispatcher);\n    _animationsModuleType = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _idGenerator = inject(_IdGenerator);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _appRef;\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    constructor() { }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        // This is done in the overlay container as well, but we have it here\n        // since it's common to mock out the overlay container in tests.\n        this._styleLoader.load(_CdkOverlayStyleLoader);\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations', this._injector.get(EnvironmentInjector), this._renderer);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = this._idGenerator.getId('cdk-overlay-');\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, null, this._appRef, this._injector, this._document);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: Overlay, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: Overlay, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    elementRef = inject(ElementRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkOverlayOrigin, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.3\", type: CdkOverlayOrigin, isStandalone: true, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    _overlay = inject(Overlay);\n    _dir = inject(Directionality, { optional: true });\n    _overlayRef;\n    _templatePortal;\n    _backdropSubscription = Subscription.EMPTY;\n    _attachSubscription = Subscription.EMPTY;\n    _detachSubscription = Subscription.EMPTY;\n    _positionSubscription = Subscription.EMPTY;\n    _offsetX;\n    _offsetY;\n    _position;\n    _scrollStrategyFactory = inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY);\n    _disposeOnNavigation = false;\n    _ngZone = inject(NgZone);\n    /** Origin for the connected overlay. */\n    origin;\n    /** Registered connected position pairs. */\n    positions;\n    /**\n     * This input overrides the positions input if specified. It lets users pass\n     * in arbitrary positioning strategies.\n     */\n    positionStrategy;\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The width of the overlay panel. */\n    width;\n    /** The height of the overlay panel. */\n    height;\n    /** The min width of the overlay panel. */\n    minWidth;\n    /** The min height of the overlay panel. */\n    minHeight;\n    /** The custom class to be set on the backdrop element. */\n    backdropClass;\n    /** The custom class to add to the overlay pane element. */\n    panelClass;\n    /** Margin between the overlay and the viewport edges. */\n    viewportMargin = 0;\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    scrollStrategy;\n    /** Whether the overlay is open. */\n    open = false;\n    /** Whether the overlay can be closed by user interaction. */\n    disableClose = false;\n    /** CSS selector which to set the transform origin. */\n    transformOriginSelector;\n    /** Whether or not the overlay should attach a backdrop. */\n    hasBackdrop = false;\n    /** Whether or not the overlay should be locked when scrolling. */\n    lockPosition = false;\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    flexibleDimensions = false;\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    growAfterOpen = false;\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    push = false;\n    /** Whether the overlay should be disposed of when the user goes backwards/forwards in history. */\n    get disposeOnNavigation() {\n        return this._disposeOnNavigation;\n    }\n    set disposeOnNavigation(value) {\n        this._disposeOnNavigation = value;\n    }\n    /** Event emitted when the backdrop is clicked. */\n    backdropClick = new EventEmitter();\n    /** Event emitted when the position has changed. */\n    positionChange = new EventEmitter();\n    /** Event emitted when the overlay has been attached. */\n    attach = new EventEmitter();\n    /** Event emitted when the overlay has been detached. */\n    detach = new EventEmitter();\n    /** Emits when there are keyboard events that are targeted at the overlay. */\n    overlayKeydown = new EventEmitter();\n    /** Emits when there are mouse outside click events that are targeted at the overlay. */\n    overlayOutsideClick = new EventEmitter();\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor() {\n        const templateRef = inject(TemplateRef);\n        const viewContainerRef = inject(ViewContainerRef);\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            const origin = this._getOriginElement();\n            const target = _getEventTarget(event);\n            if (!origin || (origin !== target && !origin.contains(target))) {\n                this.overlayOutsideClick.next(event);\n            }\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir || 'ltr',\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n            disposeOnNavigation: this.disposeOnNavigation,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay.position().flexibleConnectedTo(this._getOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    _getOriginElement() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef.nativeElement;\n        }\n        if (this.origin instanceof ElementRef) {\n            return this.origin.nativeElement;\n        }\n        if (typeof Element !== 'undefined' && this.origin instanceof Element) {\n            return this.origin;\n        }\n        return null;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this._ngZone.run(() => this.positionChange.emit(position));\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkConnectedOverlay, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.1.3\", type: CdkConnectedOverlay, isStandalone: true, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\", booleanAttribute], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\", booleanAttribute], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\", booleanAttribute], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\", booleanAttribute], push: [\"cdkConnectedOverlayPush\", \"push\", booleanAttribute], disposeOnNavigation: [\"cdkConnectedOverlayDisposeOnNavigation\", \"disposeOnNavigation\", booleanAttribute] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: () => [], propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayHasBackdrop', transform: booleanAttribute }]\n            }], lockPosition: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayLockPosition', transform: booleanAttribute }]\n            }], flexibleDimensions: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayFlexibleDimensions', transform: booleanAttribute }]\n            }], growAfterOpen: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayGrowAfterOpen', transform: booleanAttribute }]\n            }], push: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayPush', transform: booleanAttribute }]\n            }], disposeOnNavigation: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayDisposeOnNavigation', transform: booleanAttribute }]\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nclass OverlayModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayModule, imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _fullScreenEventName;\n    _cleanupFullScreenListener;\n    constructor() {\n        super();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._cleanupFullScreenListener?.();\n    }\n    _createContainer() {\n        const eventName = this._getEventName();\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        if (eventName) {\n            this._cleanupFullScreenListener?.();\n            this._cleanupFullScreenListener = this._renderer.listen('document', eventName, () => {\n                this._adjustParentForFullscreenChange();\n            });\n        }\n    }\n    _adjustParentForFullscreenChange() {\n        if (this._containerElement) {\n            const fullscreenElement = this.getFullscreenElement();\n            const parent = fullscreenElement || this._document.body;\n            parent.appendChild(this._containerElement);\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: FullscreenOverlayContainer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n"],"names":["ScrollDispatcher","ViewportRuler","ScrollingModule","CdkScrollable","DOCUMENT","Location","i0","inject","NgZone","Injectable","RendererFactory2","Component","ChangeDetectionStrategy","ViewEncapsulation","untracked","afterRender","afterNextRender","ElementRef","Injector","ANIMATION_MODULE_TYPE","EnvironmentInjector","ApplicationRef","InjectionToken","Directive","EventEmitter","TemplateRef","ViewContainerRef","booleanAttribute","Input","Output","NgModule","coerceCssPixelValue","coerceArray","supportsScrollBehavior","Platform","_getEventTarget","_isTestEnvironment","filter","takeUntil","takeWhile","Directionality","BidiModule","DomPortalOutlet","TemplatePortal","PortalModule","_IdGenerator","_CdkPrivateStyleLoader","Subject","Subscription","merge","ESCAPE","hasModifierKey","scrollBehaviorSupported","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","top","left","_previousScrollPosition","_isEnabled","_document","constructor","document","attach","enable","_canBeEnabled","root","documentElement","getViewportScrollPosition","style","classList","add","disable","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_overlayRef","_initialScrollPosition","overlayRef","ngDevMode","stream","scrolled","pipe","scrollable","overlayElement","getElementRef","nativeElement","threshold","subscribe","scrollPosition","Math","abs","_detach","updatePosition","unsubscribe","detach","hasAttached","run","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","ScrollStrategyOptions_Factory","__ngFactoryType__","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","OverlayConfig","positionStrategy","scrollStrategy","panelClass","hasBackdrop","backdropClass","minWidth","minHeight","maxWidth","maxHeight","direction","disposeOnNavigation","configKeys","Object","keys","key","undefined","ConnectionPositionPair","offsetX","offsetY","originX","originY","overlayX","overlayY","origin","overlay","ScrollingVisibility","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","BaseOverlayDispatcher","_attachedOverlays","_isAttached","ngOnDestroy","push","index","indexOf","splice","length","BaseOverlayDispatcher_Factory","OverlayKeyboardDispatcher","_renderer","createRenderer","_cleanupKeydown","runOutsideAngular","listen","_keydownListener","event","overlays","i","_keydownEvents","observers","next","ɵOverlayKeyboardDispatcher_BaseFactory","OverlayKeyboardDispatcher_Factory","ɵɵgetInheritedFactory","OverlayOutsideClickDispatcher","_platform","optional","_cursorOriginalValue","_cursorStyleIsSet","_pointerDownEventTarget","_addEventListeners","IOS","cursor","removeEventListener","_pointerDownListener","_clickListener","addEventListener","target","type","slice","_outsidePointerEvents","containsPierceShadowDom","outsidePointerEvents","ɵOverlayOutsideClickDispatcher_BaseFactory","OverlayOutsideClickDispatcher_Factory","parent","child","supportsShadowRoot","ShadowRoot","current","host","parentNode","_CdkOverlayStyleLoader","_CdkOverlayStyleLoader_Factory","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","decls","vars","template","_CdkOverlayStyleLoader_Template","rf","ctx","styles","encapsulation","changeDetection","OverlayContainer","_containerElement","_styleLoader","getContainerElement","_loadStyles","_createContainer","containerClass","isBrowser","oppositePlatformContainers","querySelectorAll","container","createElement","setAttribute","appendChild","load","OverlayContainer_Factory","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_injector","_backdropElement","_backdropTimeout","_backdropClick","_attachments","_detachments","_positionStrategy","_scrollStrategy","_locationChanges","EMPTY","_cleanupBackdropClick","_cleanupBackdropTransitionEnd","_previousHostParent","_renders","_afterRenderRef","_afterNextRenderRef","injector","backdropElement","hostElement","portal","parentElement","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","destroy","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","onDestroy","Promise","resolve","then","detachBackdrop","detachmentResult","_detachContentWhenEmpty","isAttached","_disposeScrollStrategy","_disposeBackdrop","complete","backdropClick","attachments","detachments","keydownEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","nextSibling","backdropToDetach","setTimeout","cssClasses","isAdd","c","subscription","children","backdrop","clearTimeout","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","_overlayContainer","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_originRect","_overlayRect","_viewportRect","_containerRect","_viewportMargin","_scrollables","_preferredPositions","_origin","_isDisposed","_boundingBox","_lastPosition","_lastScrollVisibility","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_transformOriginSelector","_appliedPanelClasses","_previousPushAmount","positionChanges","positions","connectedTo","setOrigin","_validatePositions","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_getNarrowedViewportRect","_getOriginRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","verticalFit","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","scrollVisibility","_getScrollVisibility","compareScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","overflows","reduce","currentValue","currentOverflow","axis","forEach","pair","cssClass","Element","destination","source","hasOwnProperty","input","units","split","parseFloat","clientRect","floor","a","b","STANDARD_DROPDOWN_BELOW_POSITIONS","STANDARD_DROPDOWN_ADJACENT_POSITIONS","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","end","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","OverlayPositionBuilder","global","flexibleConnectedTo","OverlayPositionBuilder_Factory","Overlay","scrollStrategies","_positionBuilder","_directionality","_animationsModuleType","_idGenerator","_appRef","create","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","get","id","getId","Overlay_Factory","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","elementRef","CdkOverlayOrigin_Factory","ɵdir","ɵɵdefineDirective","exportAs","CdkConnectedOverlay","_overlay","_dir","_templatePortal","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","_position","_scrollStrategyFactory","_disposeOnNavigation","_updatePositionStrategy","viewportMargin","open","disableClose","transformOriginSelector","lockPosition","positionChange","overlayKeydown","overlayOutsideClick","templateRef","viewContainerRef","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","emit","keyCode","preventDefault","_getOriginElement","_createPositionStrategy","currentPosition","_getOrigin","CdkConnectedOverlay_Factory","inputs","outputs","features","ɵɵInputTransformsFeature","ɵɵNgOnChangesFeature","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","OverlayModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","FullscreenOverlayContainer","_fullScreenEventName","_cleanupFullScreenListener","eventName","_getEventName","_adjustParentForFullscreenChange","fullscreenElement","getFullscreenElement","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}