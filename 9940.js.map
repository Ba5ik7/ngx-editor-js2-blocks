{"version":3,"file":"9940.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2022/platform-DNDzkVcI.mjs","./node_modules/@angular/cdk/fesm2022/text-field.mjs","./node_modules/@angular/cdk/fesm2022/style-loader-B2sGQXxD.mjs","./node_modules/@angular/cdk/fesm2022/element-x4z00URv.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { inject, PLATFORM_ID, Injectable } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n}\ncatch {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nclass Platform {\n    _platformId = inject(PLATFORM_ID);\n    // We want to use the Angular platform check because if the Document is shimmed\n    // without the navigator, the following checks will fail. This is preferred because\n    // sometimes the Document may be shimmed without the user's knowledge or intention\n    /** Whether the Angular application is being rendered in the browser. */\n    isBrowser = this._platformId\n        ? isPlatformBrowser(this._platformId)\n        : typeof document === 'object' && !!document;\n    /** Whether the current browser is Microsoft Edge. */\n    EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n    /** Whether the current rendering engine is Microsoft Trident. */\n    TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n    // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n    /** Whether the current rendering engine is Blink. */\n    BLINK = this.isBrowser &&\n        !!(window.chrome || hasV8BreakIterator) &&\n        typeof CSS !== 'undefined' &&\n        !this.EDGE &&\n        !this.TRIDENT;\n    // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n    // ensure that Webkit runs standalone and is not used as another engine's base.\n    /** Whether the current rendering engine is WebKit. */\n    WEBKIT = this.isBrowser &&\n        /AppleWebKit/i.test(navigator.userAgent) &&\n        !this.BLINK &&\n        !this.EDGE &&\n        !this.TRIDENT;\n    /** Whether the current platform is Apple iOS. */\n    IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n    // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n    // them self as Gecko-like browsers and modify the userAgent's according to that.\n    // Since we only cover one explicit Firefox case, we can simply check for Firefox\n    // instead of having an unstable check for Gecko.\n    /** Whether the current browser is Firefox. */\n    FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n    /** Whether the current platform is Android. */\n    // Trident on mobile adds the android platform to the userAgent to trick detections.\n    ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n    // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n    // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n    // Safari browser should also use Webkit as its layout engine.\n    /** Whether the current browser is Safari. */\n    SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Platform, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Platform, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Platform, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\nexport { Platform as P };\n","import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, inject, NgZone, RendererFactory2, Injectable, ElementRef, EventEmitter, Directive, Output, Renderer2, DOCUMENT, booleanAttribute, Input, NgModule } from '@angular/core';\nimport { EMPTY, Subject } from 'rxjs';\nimport { P as Platform } from './platform-DNDzkVcI.mjs';\nimport { _ as _CdkPrivateStyleLoader } from './style-loader-B2sGQXxD.mjs';\nimport { a as coerceElement, c as coerceNumberProperty } from './element-x4z00URv.mjs';\nimport { auditTime } from 'rxjs/operators';\nimport '@angular/common';\n\n/** Component used to load the structural styles of the text field. */\nclass _CdkTextFieldStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _CdkTextFieldStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: _CdkTextFieldStyleLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-text-field-style-loader\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{padding:2px 0 !important;box-sizing:content-box !important;height:auto !important;overflow:hidden !important}textarea.cdk-textarea-autosize-measuring-firefox{padding:2px 0 !important;box-sizing:content-box !important;height:0 !important}@keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _CdkTextFieldStyleLoader, decorators: [{\n            type: Component,\n            args: [{ template: '', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: { 'cdk-text-field-style-loader': '' }, styles: [\"textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{padding:2px 0 !important;box-sizing:content-box !important;height:auto !important;overflow:hidden !important}textarea.cdk-textarea-autosize-measuring-firefox{padding:2px 0 !important;box-sizing:content-box !important;height:0 !important}@keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}\\n\"] }]\n        }] });\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = { passive: true };\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    _monitoredElements = new Map();\n    constructor() { }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        this._styleLoader.load(_CdkTextFieldStyleLoader);\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const subject = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = (event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => subject.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => subject.next({ target: event.target, isAutofilled: false }));\n            }\n        };\n        const unlisten = this._ngZone.runOutsideAngular(() => {\n            element.classList.add('cdk-text-field-autofill-monitored');\n            return this._renderer.listen(element, 'animationstart', listener, listenerOptions);\n        });\n        this._monitoredElements.set(element, { subject, unlisten });\n        return subject;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: AutofillMonitor, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    _elementRef = inject(ElementRef);\n    _autofillMonitor = inject(AutofillMonitor);\n    /** Emits when the autofill state of the element changes. */\n    cdkAutofill = new EventEmitter();\n    constructor() { }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkAutofill, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkAutofill, isStandalone: true, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                }]\n        }], ctorParameters: () => [], propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _renderer = inject(Renderer2);\n    _resizeEvents = new Subject();\n    /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n    _previousValue;\n    _initialHeight;\n    _destroyed = new Subject();\n    _listenerCleanups;\n    _minRows;\n    _maxRows;\n    _enabled = true;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     */\n    _previousMinRows = -1;\n    _textareaElement;\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    /** Cached height of a textarea with a single row. */\n    _cachedLineHeight;\n    /** Cached height of a textarea with only the placeholder. */\n    _cachedPlaceholderHeight;\n    /** Cached scroll top of a textarea */\n    _cachedScrollTop;\n    /** Used to reference correct document/window */\n    _document = inject(DOCUMENT, { optional: true });\n    _hasFocus;\n    _isViewInited = false;\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_CdkTextFieldStyleLoader);\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                this._listenerCleanups = [\n                    this._renderer.listen('window', 'resize', () => this._resizeEvents.next()),\n                    this._renderer.listen(this._textareaElement, 'focus', this._handleFocusEvent),\n                    this._renderer.listen(this._textareaElement, 'blur', this._handleFocusEvent),\n                ];\n                this._resizeEvents.pipe(auditTime(16)).subscribe(() => {\n                    // Clear the cached heights since the styles can change\n                    // when the window is resized (e.g. by media queries).\n                    this._cachedLineHeight = this._cachedPlaceholderHeight = undefined;\n                    this.resizeToFitContent(true);\n                });\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._listenerCleanups?.forEach(cleanup => cleanup());\n        this._resizeEvents.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        const textareaClone = this._textareaElement.cloneNode(false);\n        const cloneStyles = textareaClone.style;\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        cloneStyles.position = 'absolute';\n        cloneStyles.visibility = 'hidden';\n        cloneStyles.border = 'none';\n        cloneStyles.padding = '0';\n        cloneStyles.height = '';\n        cloneStyles.minHeight = '';\n        cloneStyles.maxHeight = '';\n        // App styles might be messing with the height through the positioning properties.\n        cloneStyles.top = cloneStyles.bottom = cloneStyles.left = cloneStyles.right = 'auto';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        cloneStyles.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    /** Handles `focus` and `blur` events. */\n    _handleFocusEvent = (event) => {\n        this._hasFocus = event.type === 'focus';\n    };\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        this._cachedScrollTop = this._textareaElement.scrollTop;\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n            textarea.scrollTop = this._cachedScrollTop;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTextareaAutosize, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkTextareaAutosize, isStandalone: true, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\", booleanAttribute], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: [{ alias: 'cdkTextareaAutosize', transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }] } });\n\nclass TextFieldModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: TextFieldModule, imports: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: TextFieldModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import * as i0 from '@angular/core';\nimport { inject, Injector, EnvironmentInjector, ApplicationRef, createComponent, Injectable } from '@angular/core';\n\n/** Apps in which we've loaded styles. */\nconst appsWithLoaders = new WeakMap();\n/**\n * Service that loads structural styles dynamically\n * and ensures that they're only loaded once per app.\n */\nclass _CdkPrivateStyleLoader {\n    _appRef;\n    _injector = inject(Injector);\n    _environmentInjector = inject(EnvironmentInjector);\n    /**\n     * Loads a set of styles.\n     * @param loader Component which will be instantiated to load the styles.\n     */\n    load(loader) {\n        // Resolve the app ref lazily to avoid circular dependency errors if this is called too early.\n        const appRef = (this._appRef = this._appRef || this._injector.get(ApplicationRef));\n        let data = appsWithLoaders.get(appRef);\n        // If we haven't loaded for this app before, we have to initialize it.\n        if (!data) {\n            data = { loaders: new Set(), refs: [] };\n            appsWithLoaders.set(appRef, data);\n            // When the app is destroyed, we need to clean up all the related loaders.\n            appRef.onDestroy(() => {\n                appsWithLoaders.get(appRef)?.refs.forEach(ref => ref.destroy());\n                appsWithLoaders.delete(appRef);\n            });\n        }\n        // If the loader hasn't been loaded before, we need to instatiate it.\n        if (!data.loaders.has(loader)) {\n            data.loaders.add(loader);\n            data.refs.push(createComponent(loader, { environmentInjector: this._environmentInjector }));\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _CdkPrivateStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _CdkPrivateStyleLoader, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _CdkPrivateStyleLoader, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nexport { _CdkPrivateStyleLoader as _ };\n","import { ElementRef } from '@angular/core';\n\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    if (_isNumberValue(value)) {\n        return Number(value);\n    }\n    return arguments.length === 2 ? fallbackValue : 0;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\nexport { _isNumberValue as _, coerceElement as a, coerceNumberProperty as c };\n"],"names":["i0","inject","PLATFORM_ID","Injectable","isPlatformBrowser","hasV8BreakIterator","Intl","v8BreakIterator","Platform","_platformId","isBrowser","document","EDGE","test","navigator","userAgent","TRIDENT","BLINK","window","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","constructor","ɵfac","Platform_Factory","__ngFactoryType__","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","P","Component","ChangeDetectionStrategy","ViewEncapsulation","NgZone","RendererFactory2","ElementRef","EventEmitter","Directive","Output","Renderer2","DOCUMENT","booleanAttribute","Input","NgModule","EMPTY","Subject","_","_CdkPrivateStyleLoader","a","coerceElement","c","coerceNumberProperty","auditTime","_CdkTextFieldStyleLoader","_CdkTextFieldStyleLoader_Factory","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","decls","vars","template","_CdkTextFieldStyleLoader_Template","rf","ctx","styles","encapsulation","changeDetection","listenerOptions","passive","AutofillMonitor","_platform","_ngZone","_renderer","createRenderer","_styleLoader","_monitoredElements","Map","monitor","elementOrRef","load","element","info","get","subject","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","unlisten","runOutsideAngular","listen","set","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","AutofillMonitor_Factory","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","ngOnInit","subscribe","emit","CdkAutofill_Factory","ɵdir","ɵɵdefineDirective","outputs","CdkTextareaAutosize","_resizeEvents","_previousValue","_initialHeight","_destroyed","_listenerCleanups","_minRows","_maxRows","_enabled","_previousMinRows","_textareaElement","minRows","value","_setMinHeight","maxRows","_setMaxHeight","enabled","resizeToFitContent","reset","placeholder","_cachedPlaceholderHeight","undefined","setAttribute","removeAttribute","_cacheTextareaPlaceholderHeight","_cachedLineHeight","_cachedScrollTop","_document","optional","_hasFocus","_isViewInited","styleLoader","nativeElement","minHeight","style","maxHeight","ngAfterViewInit","height","_handleFocusEvent","pipe","cleanup","_cacheTextareaLineHeight","textareaClone","cloneNode","cloneStyles","rows","position","visibility","border","padding","top","bottom","left","right","overflow","parentNode","appendChild","clientHeight","_measureScrollHeight","previousMargin","marginBottom","isFirefox","needsMarginFiller","measuringClass","scrollHeight","ngDoCheck","force","scrollTop","textarea","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","_noopInputHandler","selectionStart","selectionEnd","isStopped","setSelectionRange","CdkTextareaAutosize_Factory","hostBindings","CdkTextareaAutosize_HostBindings","ɵɵlistener","CdkTextareaAutosize_input_HostBindingHandler","inputs","exportAs","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","Injector","EnvironmentInjector","ApplicationRef","createComponent","appsWithLoaders","WeakMap","_appRef","_injector","_environmentInjector","loader","appRef","data","loaders","Set","refs","onDestroy","ref","destroy","has","push","environmentInjector","_CdkPrivateStyleLoader_Factory","fallbackValue","_isNumberValue","Number","arguments","length","isNaN","parseFloat"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3]}