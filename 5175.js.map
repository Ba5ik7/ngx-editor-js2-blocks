{"version":3,"file":"5175.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2022/select.mjs"],"sourcesContent":["import { Overlay, CdkOverlayOrigin, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, ElementRef, EventEmitter, HostAttributeToken, booleanAttribute, numberAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, Input, ViewChild, Output, Directive, NgModule } from '@angular/core';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, _ErrorStateTracker, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nexport { MatOptgroup, MatOption } from '@angular/material/core';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _IdGenerator, LiveAnnouncer, removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgControl, Validators, NgForm, FormGroupDirective } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, filter, map, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\nimport { NgClass } from '@angular/common';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    source;\n    value;\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nclass MatSelect {\n    _viewportRuler = inject(ViewportRuler);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dir = inject(Directionality, { optional: true });\n    _idGenerator = inject(_IdGenerator);\n    _parentFormField = inject(MAT_FORM_FIELD, { optional: true });\n    ngControl = inject(NgControl, { self: true, optional: true });\n    _liveAnnouncer = inject(LiveAnnouncer);\n    _defaultOptions = inject(MAT_SELECT_CONFIG, { optional: true });\n    _initialized = new Subject();\n    /** All of the defined select options. */\n    options;\n    // TODO(crisbeto): this is only necessary for the non-MDC select, but it's technically a\n    // public API so we have to keep it. It should be deprecated and removed eventually.\n    /** All of the defined groups of options. */\n    optionGroups;\n    /** User-supplied override of the trigger element. */\n    customTrigger;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top',\n        },\n        {\n            originX: 'end',\n            originY: 'bottom',\n            overlayX: 'end',\n            overlayY: 'top',\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            panelClass: 'mat-mdc-select-panel-above',\n        },\n        {\n            originX: 'end',\n            originY: 'top',\n            overlayX: 'end',\n            overlayY: 'bottom',\n            panelClass: 'mat-mdc-select-panel-above',\n        },\n    ];\n    /** Scrolls a particular option into the view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    /** Called when the panel has been opened and the overlay has settled on its final position. */\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    /** Creates a change event object that should be emitted by the select. */\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Factory function used to create a scroll strategy for this select. */\n    _scrollStrategyFactory = inject(MAT_SELECT_SCROLL_STRATEGY);\n    /** Whether or not the overlay panel is open. */\n    _panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    _compareWith = (o1, o2) => o1 === o2;\n    /** Unique id for this input. */\n    _uid = this._idGenerator.getId('mat-select-');\n    /** Current `aria-labelledby` value for the select trigger. */\n    _triggerAriaLabelledBy = null;\n    /**\n     * Keeps track of the previous form control assigned to the select.\n     * Used to detect if it has changed.\n     */\n    _previousControl;\n    /** Emits whenever the component is destroyed. */\n    _destroy = new Subject();\n    /** Tracks the error state of the select. */\n    _errorStateTracker;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form-field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    stateChanges = new Subject();\n    /**\n     * Disable the automatic labeling to avoid issues like #27241.\n     * @docs-private\n     */\n    disableAutomaticLabeling = true;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    userAriaDescribedBy;\n    /** Deals with the selection logic. */\n    _selectionModel;\n    /** Manages keyboard events for options in the panel. */\n    _keyManager;\n    /** Ideal origin for the overlay panel. */\n    _preferredOverlayOrigin;\n    /** Width of the overlay panel. */\n    _overlayWidth;\n    /** `View -> model callback called when value changes` */\n    _onChange = () => { };\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => { };\n    /** ID for the DOM node containing the select's value. */\n    _valueId = this._idGenerator.getId('mat-select-value-');\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream = new Subject();\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy;\n    _overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    _focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n    controlType = 'mat-select';\n    /** Trigger that opens the select. */\n    trigger;\n    /** Panel containing the select options. */\n    panel;\n    /** Overlay pane containing the options. */\n    _overlayDir;\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    panelClass;\n    /** Whether the select is disabled. */\n    disabled = false;\n    /** Whether ripples in the select are disabled. */\n    disableRipple = false;\n    /** Tab index of the select. */\n    tabIndex = 0;\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    _hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    _placeholder;\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = value;\n        this.stateChanges.next();\n    }\n    _required;\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = value;\n    }\n    _multiple = false;\n    /** Whether to center the active option over the trigger. */\n    disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    _value;\n    /** Aria label of the select. */\n    ariaLabel = '';\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby;\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    typeaheadDebounceInterval;\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    sortComparator;\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    _id;\n    /** Whether the select is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    /**\n     * Width of the panel. If set to `auto`, the panel will match the trigger width.\n     * If set to null or an empty string, the panel will grow to match the longest option's text.\n     */\n    panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n        ? this._defaultOptions.panelWidth\n        : 'auto';\n    /**\n     * By default selecting an option with a `null` or `undefined` value will reset the select's\n     * value. Enable this option if the reset behavior doesn't match your requirements and instead\n     * the nullable options should become selected. The value of this input can be controlled app-wide\n     * using the `MAT_SELECT_CONFIG` injection token.\n     */\n    canSelectNullableOptions = this._defaultOptions?.canSelectNullableOptions ?? false;\n    /** Combined stream of all of the child options' change events. */\n    optionSelectionChanges = defer(() => {\n        const options = this.options;\n        if (options) {\n            return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n        }\n        return this._initialized.pipe(switchMap(() => this.optionSelectionChanges));\n    });\n    /** Event emitted when the select panel has been toggled. */\n    openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n    _openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n    /** Event emitted when the select has been closed. */\n    _closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n    /** Event emitted when the selected value has been changed by the user. */\n    selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    valueChange = new EventEmitter();\n    constructor() {\n        const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n        const parentForm = inject(NgForm, { optional: true });\n        const parentFormGroup = inject(FormGroupDirective, { optional: true });\n        const tabIndex = inject(new HostAttributeToken('tabindex'), { optional: true });\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (this._defaultOptions?.typeaheadDebounceInterval != null) {\n            this.typeaheadDebounceInterval = this._defaultOptions.typeaheadDebounceInterval;\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, this.ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = tabIndex == null ? 0 : parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initialized.next();\n        this._initialized.complete();\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by the input, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (!this._canOpen()) {\n            return;\n        }\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        this._applyModalPanelOwnership();\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n    _trackedModal = null;\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n            // Required for the MDC form field to pick up when the overlay has been closed.\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Refreshes the error state of the select. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return ((option.value != null || this.canSelectNullableOptions) &&\n                    this._compareWith(option.value, value));\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate = (option) => {\n        if (this.panelOpen) {\n            // Support keyboard focusing disabled options in an ARIA listbox.\n            return false;\n        }\n        // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n        // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n        // closed.\n        return option.disabled;\n    };\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this.typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (!this.canSelectNullableOptions && option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId() || null;\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatSelect, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.1.3\", type: MatSelect, isStandalone: true, selector: \"mat-select\", inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute], placeholder: \"placeholder\", required: [\"required\", \"required\", booleanAttribute], multiple: [\"multiple\", \"multiple\", booleanAttribute], disableOptionCentering: [\"disableOptionCentering\", \"disableOptionCentering\", booleanAttribute], compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: [\"typeaheadDebounceInterval\", \"typeaheadDebounceInterval\", numberAttribute], sortComparator: \"sortComparator\", id: \"id\", panelWidth: \"panelWidth\", canSelectNullableOptions: [\"canSelectNullableOptions\", \"canSelectNullableOptions\", booleanAttribute] }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, host: { attributes: { \"role\": \"combobox\", \"aria-haspopup\": \"listbox\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], exportAs: [\"matSelect\"], usesOnChanges: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-sys-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-sys-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-sys-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-sys-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-disabled .mat-mdc-select-placeholder{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-sys-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-sys-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}@media(forced-colors: active){.mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .mat-mdc-select-arrow svg{fill:GrayText}}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-select-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-sys-on-surface-variant))}.mat-form-field-no-animations .mat-mdc-select-placeholder,._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform, translateY(-8px))}\"], dependencies: [{ kind: \"directive\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { kind: \"directive\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\", \"cdkConnectedOverlayDisposeOnNavigation\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], imports: [CdkOverlayOrigin, CdkConnectedOverlay, NgClass], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-sys-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-sys-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-sys-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-sys-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-disabled .mat-mdc-select-placeholder{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-sys-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-sys-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}@media(forced-colors: active){.mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .mat-mdc-select-arrow svg{fill:GrayText}}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-select-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-sys-on-surface-variant))}.mat-form-field-no-animations .mat-mdc-select-placeholder,._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform, translateY(-8px))}\"] }]\n        }], ctorParameters: () => [], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], multiple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableOptionCentering: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], canSelectNullableOptions: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.3\", type: MatSelectTrigger, isStandalone: true, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n\nclass MatSelectModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.1.3\", ngImport: i0, type: MatSelectModule, imports: [OverlayModule, MatOptionModule, MatCommonModule, MatSelect, MatSelectTrigger], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.3\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, MatSelect, MatSelectTrigger],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, matSelectAnimations };\n"],"names":["Overlay","CdkOverlayOrigin","CdkConnectedOverlay","OverlayModule","i0","InjectionToken","inject","ChangeDetectorRef","ElementRef","EventEmitter","HostAttributeToken","booleanAttribute","numberAttribute","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","Input","ViewChild","Output","Directive","NgModule","_countGroupLabelsBeforeOption","_getOptionScrollPosition","ErrorStateMatcher","_ErrorStateTracker","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","_c0","_c1","_c2","_c3","MatSelect_Conditional_4_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r1","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_Conditional_5_Conditional_1_Template","ɵɵprojection","MatSelect_Conditional_5_Conditional_2_Template","triggerValue","MatSelect_Conditional_5_Template","ɵɵtemplate","ɵɵconditional","customTrigger","MatSelect_ng_template_10_Template","_r3","ɵɵgetCurrentView","ɵɵlistener","MatSelect_ng_template_10_Template_div_animation_transformPanel_done_0_listener","$event","ɵɵrestoreView","ɵɵresetView","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_10_Template_div_keydown_0_listener","_handleKeydown","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵproperty","panelClass","ɵɵattribute","id","multiple","ariaLabel","_getPanelAriaLabelledby","MatOptgroup","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","MatError","MatFormField","MatHint","MatLabel","MatPrefix","MatSuffix","ViewportRuler","CdkScrollableModule","_IdGenerator","LiveAnnouncer","removeAriaReferencedId","addAriaReferencedId","ActiveDescendantKeyManager","Directionality","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","NgControl","Validators","NgForm","FormGroupDirective","Subject","defer","merge","startWith","switchMap","filter","map","distinctUntilChanged","takeUntil","take","trigger","transition","query","animateChild","state","style","animate","NgClass","matSelectAnimations","transformPanelWrap","optional","transformPanel","opacity","transform","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","MAT_SELECT_SCROLL_STRATEGY","providedIn","factory","overlay","scrollStrategies","reposition","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_TRIGGER","MatSelectChange","source","value","constructor","MatSelect","_viewportRuler","_changeDetectorRef","_elementRef","_dir","_idGenerator","_parentFormField","ngControl","self","_liveAnnouncer","_defaultOptions","_initialized","options","optionGroups","_positions","originX","originY","overlayX","overlayY","_scrollOptionIntoView","index","option","toArray","panel","nativeElement","labelCount","element","_getHostElement","scrollTop","offsetTop","offsetHeight","_positioningSettled","_keyManager","activeItemIndex","_getChangeEvent","_scrollStrategyFactory","_panelOpen","_compareWith","o1","o2","_uid","getId","_triggerAriaLabelledBy","_previousControl","_destroy","_errorStateTracker","stateChanges","disableAutomaticLabeling","userAriaDescribedBy","_selectionModel","_preferredOverlayOrigin","_overlayWidth","_onChange","_onTouched","_valueId","_scrollStrategy","_overlayPanelClass","overlayPanelClass","focused","_focused","controlType","_overlayDir","disabled","disableRipple","tabIndex","hideSingleSelectionIndicator","_hideSingleSelectionIndicator","_syncParentProperties","_placeholder","required","_required","control","hasValidator","_multiple","ngDevMode","disableOptionCentering","compareWith","fn","_initializeSelection","_value","newValue","hasAssigned","_assignValue","ariaLabelledby","errorStateMatcher","matcher","typeaheadDebounceInterval","sortComparator","_id","errorState","panelWidth","canSelectNullableOptions","optionSelectionChanges","changes","pipe","onSelectionChange","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","defaultErrorStateMatcher","parentForm","parentFormGroup","valueAccessor","parseInt","ngOnInit","subscribe","_panelDoneAnimating","panelOpen","change","_getOverlayWidth","detectChanges","ngAfterContentInit","complete","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","setAttribute","removeAttribute","undefined","updateErrorState","ngOnChanges","withTypeAhead","ngOnDestroy","destroy","_clearFromModal","toggle","close","open","_canOpen","getConnectedOverlayOrigin","_applyModalPanelOwnership","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_trackedModal","modal","closest","panelId","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","shiftKey","_onFocus","_onBlur","cancelTypeahead","_onAttached","positionChange","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","_skipPredicate","preferredOrigin","refToMeasure","elementRef","getBoundingClientRect","width","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","sort","a","b","indexOf","fallbackValue","valueToEmit","emit","firstEnabledOptionIndex","length","get","labelId","getLabelId","labelExpression","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","ɵfac","MatSelect_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","type","selectors","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","viewQuery","MatSelect_Query","ɵɵviewQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","MatSelect_blur_HostBindingHandler","toString","ɵɵclassProp","inputs","outputs","exportAs","features","ɵɵProvidersFeature","useExisting","ɵɵInputTransformsFeature","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","_r1","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","ɵɵnamespaceSVG","ɵɵelement","MatSelect_Template_ng_template_backdropClick_10_listener","MatSelect_Template_ng_template_attach_10_listener","MatSelect_Template_ng_template_detach_10_listener","fallbackOverlayOrigin_r4","ɵɵreference","dependencies","styles","encapsulation","data","animation","changeDetection","MatSelectTrigger","MatSelectTrigger_Factory","ɵdir","ɵɵdefineDirective","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}